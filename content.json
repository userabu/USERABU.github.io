{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Abu","url":"https://liuliushaoyang0723.gitee.io/abu","root":"/abu/"},"pages":[{"title":"categories","date":"2022-08-04T08:19:38.000Z","updated":"2022-08-04T08:23:32.938Z","comments":true,"path":"categories/index.html","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS总结","slug":"css.css面试题","date":"2022-08-07T11:46:05.638Z","updated":"2022-08-08T03:58:03.168Z","comments":true,"path":"2022/08/07/css.css面试题/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/07/css.css%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"","text":"一、CSS基础1. CSS选择器及其优先级 选择器 格式 优先级权重 id选择器 #id 100 类选择器 #classname 10 属性选择器 a[ref=“eee”] 10 伪类选择器 li:last-child 10 标签选择器 div 1 伪元素选择器 li:after 1 相邻兄弟选择器 h1+p 0 子选择器 ul&gt;li 0 后代选择器 li a 0 通配符选择器 * 0 对于选择器的优先级： 标签选择器、伪元素选择器：1类选择器、伪类选择器、属性选择器：10id 选择器：100内联样式：1000 注意事项： !important声明的样式的优先级最高；如果优先级相同，则最后出现的样式生效；继承得到的样式的优先级最低；通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。 2. CSS中可继承与不可继承属性有哪些一、无继承性的属性 display：规定元素应该生成的框的类型 文本属性： vertical-align：垂直文本对齐 text-decoration：规定添加到文本的装饰 text-shadow：文本阴影效果 white-space：空白符的处理 unicode-bidi：设置文本的方向 盒子模型的属性：width、height、margin、border、padding 背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment 定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index 生成内容属性：content、counter-reset、counter-increment 轮廓样式属性：outline-style、outline-width、outline-color、outline 页面样式属性：size、page-break-before、page-break-after 声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during 二、有继承性的属性 字体系列属性 font-family：字体系列 font-weight：字体的粗细 font-size：字体的大小 font-style：字体的风格 文本系列属性 text-indent：文本缩进 text-align：文本水平对齐 line-height：行高 word-spacing：单词之间的间距 letter-spacing：中文或者字母之间的间距 text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个） color：文本颜色 元素可见性 visibility：控制元素显示隐藏 列表布局属性 list-style：列表风格，包括list-style-type、list-style-image等 光标属性 cursor：光标显示为何种形态 3. display的属性值及其作用 属性值 作用 none 元素不显示，并且会从文档流中移除。 block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。 inline 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。 list-item 像块类型元素一样显示,并添加样式列表标记 table 此元素会作为块级表格来显示。 inherit 规定应该从父元素继承display属性值。 4. display的block、inline和inline-block的区别（1）block： 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；（2）inline： 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；（3）inline-block： 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。 对于行内元素和块级元素，其特点如下：（1）行内元素 设置宽高无效； 可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin； 不会自动换行； （2）块级元素 可以设置宽高； 设置margin和padding都有效； 可以自动换行； 多个块状，默认排列从上到下。 5. 隐藏元素的方法有哪些 display: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。 visibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件。 opacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。 position: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。 z-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏。 clip/clip-path ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。 transform: scale(0,0)：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。 6. link和@import的区别两者都是外部引用CSS的方式，它们的区别如下： link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。link支持使用Javascript控制DOM去改变样式；而@import不支持。 7. transition和animation的区别 transition是过度属性，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。animation是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。 8. display:none与visibility:hidden的区别这两个属性都是让元素隐藏，不可见。两者区别如下：（1）在渲染树中 display:none会让元素完全从渲染树中消失，渲染时不会占据任何空间； visibility:hidden不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。 （2）是否是继承属性 display:none是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示； visibility:hidden是继承属性，子孙节点消失是由于继承了hidden，通过设置visibility:visible可以让子孙节点显示； （3）修改常规文档流中元素的 display 通常会造成文档的重排，但是修改visibility属性只会造成本元素的重绘； （4）如果使用读屏器，设置为display:none的内容不会被读取，设置为visibility:hidden的内容会被读取。 9. 伪元素和伪类的区别和作用？伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如： 1234p::before &#123;content:&quot;第一章：&quot;;&#125;p::after &#123;content:&quot;Hot!&quot;;&#125;p::first-line &#123;background:red;&#125;p::first-letter &#123;font-size:30px;&#125; 伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如： 12a:hover &#123;color: #FF00FF&#125;p:first-child &#123;color: red&#125; 总结： 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。 10. 对requestAnimationframe的理解实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是请求动画帧。 MDN对该方法的描述： window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。 语法： window.requestAnimationFrame(callback); 其中，callback是下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执行。 取消动画： 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。优势： CPU节能：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。 函数节流：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。 减少DOM操作：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。 setTimeout执行动画的缺点：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是： 1. settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚； 2. settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。 11. 对盒模型的理解CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型盒模型都是由四个部分组成的，分别是margin、border、padding和content。标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同： 标准盒模型的width和height属性的范围只包含了content， IE盒模型的width和height属性的范围包含了border、padding和content。 可以通过修改元素的box-sizing属性来改变元素的盒模型： box-sizeing: content-box表示标准盒模型（默认值） box-sizeing: border-box表示IE盒模型（怪异盒模型） 12. 为什么有时候⽤translate来改变位置⽽不是定位？translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。 13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个放在一行，这导致换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。 解决办法： 1234（1）为&lt;li&gt;设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。（2）将所有&lt;li&gt;写在同一行。不足：代码不美观。（3）将&lt;ul&gt;内的字符尺寸直接设为0，即font-size:0。不足：&lt;ul&gt;中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。（4）消除&lt;ul&gt;的字符间隔letter-spacing:-8px，不足：这也设置了&lt;li&gt;内的字符间隔，因此需要将&lt;li&gt;内的字符间隔设为默认letter-spacing:normal。 14. CSS3中有哪些新特性新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点） 圆角 （border-radius:8px） 多列布局 （multi-column layout） 阴影和反射 （Shadoweflect） 文字特效 （text-shadow） 文字渲染 （Text-decoration） 线性渐变 （gradient） 旋转 （transform） 增加了旋转,缩放,定位,倾斜,动画,多背景 15. 替换元素的概念及计算规则通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。 替换元素除了内容可替换这一特性以外，还有以下特性： 内容的外观不受页面上的CSS的影响：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。 有自己的尺寸：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如 在很多CSS属性上有自己的一套表现规则：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。 所有的替换元素都是内联水平元素：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。 替换元素的尺寸从内而外分为三类： 1. 固有尺寸： 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。 2. HTML尺寸： 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。 3. CSS尺寸： 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。 这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。 16. 常见的图片格式及使用场景（1）BMP，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。（2）GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。（3）JPEG是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。（4）PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。（5）PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。（6）SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。 ● 在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%； ● 在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%； ● WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。 17. 对 CSSSprites 的理解CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。优点： ● 利用CSS Sprites能很好地减少网页的http请求，从而大大提高了页面的性能，这是CSS Sprites最大的优点； ● CSS Sprites能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。 缺点： ● 在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；● CSSSprites在开发的时候相对来说有点麻烦，需要借助photoshop或其他工具来对每个背景单元测量其准确的位置。● 维护方面：CSS Sprites在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的CSS，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动CSS。 18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px &amp; 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。 当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。 还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片: 1234my-image &#123; background: (low.png); &#125;@media only screen and (min-device-pixel-ratio: 1.5) &#123; #my-image &#123; background: (high.png); &#125;&#125; 19. margin 和 padding 的使用场景需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。 20. 对line-height 的理解及其赋值方式（1）line-height的概念： ● line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离； ● 如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定； ● 一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容； ● 把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中； ● line-height 和 height 都能撑开一个高度； （2）line-height 的赋值方式： ● 带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高 ● 纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px ● 百分比：将计算后的值传递给后代 21. CSS 优化和提高性能的方法有哪些？加载性能： （1）css压缩：将写好的css进行打包压缩，可以减小文件体积。（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。 选择器性能： （1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。（4）尽量少的去对标签进行选择，而是用class。（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。 渲染性能：（1）慎重使用高性能属性：浮动、定位。（2）尽量减少页面重排、重绘。（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。（4）属性值为0时，不加单位。（5）属性值为浮动小数0.**，可以省略小数点之前的0。（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。（7）不使用@import前缀，它会影响css的加载速度。（8）选择器优化嵌套，尽量避免层级过深。（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。 可维护性、健壮性： （1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。 （2）样式与内容分离：将css代码定义到外部css中。 22. CSS预处理器/后处理器是什么？为什么要使用它们？预处理器， 如：less，sass，stylus，用来预编译sass或者less，增加了css代码的复用性。层级，mixin， 变量，循环， 函数等对编写以及开发UI组件都极为方便。后处理器， 如： postCss，通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。 css预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等。 其它css预处理器语言：Sass（Scss）, Less, Stylus, Turbine, Swithch css, CSS Cacheer, DT Css。 使用原因： 结构清晰， 便于扩展 可以很方便的屏蔽浏览器私有语法的差异 可以轻松实现多重继承 完美的兼容了CSS代码，可以应用到老项目中 23. ::before 和 :after 的双冒号和单冒号有什么区别？（1）冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（2）::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。 注意： :before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before、::after。 24. display:inline-block 什么时候会显示间隙？ 有空格时会有间隙，可以删除空格解决； margin正值时，可以让margin使用负值解决； 使用font-size时，可通过设置font-size:0、letter-spacing、word-spacing解决； 25. 单行、多行文本溢出隐藏单行文本溢出 overflow: hidden; // 溢出隐藏 text-overflow: ellipsis; // 溢出用省略号显示 white-space: nowrap; // 规定段落中的文本不进行换行 多行文本溢出 overflow: hidden; // 溢出隐藏 text-overflow: ellipsis; // 溢出用省略号显示 display:-webkit-box; // 作为弹性伸缩盒子模型显示。 -webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列 -webkit-line-clamp:3; // 显示的行数 注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个-webkit- 来兼容一部分浏览器。 26. Sass、Less 是什么？为什么要使用他们？他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。 为什么要使用它们？ 结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。 可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。 27. 对媒体查询的理解？媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。 媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。 12345678910&lt;!-- link元素中的CSS媒体查询 --&gt; &lt;link rel=&quot;stylesheet&quot; media=&quot;(max-width: 800px)&quot; href=&quot;example.css&quot; /&gt; &lt;!-- 样式表中的CSS媒体查询 --&gt; &lt;style&gt; @media (max-width: 600px) &#123; .facet_sidebar &#123; display: none; &#125; &#125;&lt;/style&gt; 简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。 28. 对 CSS 工程化的理解CSS 工程化是为了解决以下问题： 宏观设计：CSS 代码如何组织、如何拆分、模块结构怎样设计？ 编码优化：怎样写出更好的 CSS？ 构建：如何处理我的 CSS，才能让它的打包结果最优？ 可维护性：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？ 以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践： 预处理器：Less、 Sass 等； 重要的工程化插件： PostCss； Webpack loader 等 。 基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看： （1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： 那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求： 1. 宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；2.编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；3. 可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。 这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性： ● 嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ； ● 支持定义 css 变量； ● 提供计算函数； ● 允许对代码片段进行 extend 和 mixin； ● 支持循环语句的使用； ● 支持将 CSS 文件模块化，实现复用。 （2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？ 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。 PostCss 在业务中的使用场景非常多： ● 提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作； ● 当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 Autoprefixer 插件可以帮助我们自动增加浏览器前缀； ● 允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码； （3）Webpack 能处理 CSS 吗？如何实现？ Webpack 能处理 CSS 吗： ● Webpack 在裸奔的状态下，是不能处理 CSS 的，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具； ● Webpack 在 loader 的辅助下，是可以处理 CSS 的。 如何用 Webpack 实现对 CSS 的处理： Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader 注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情： css-loader：导入 CSS 模块，对 CSS 代码进行编译处理； style-loader：创建style标签，把 CSS 内容写入标签。。 在实际使用中，css-loader 的执行顺序一定要安排在 style-loader 的前面。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。 29. 如何判断元素是否到达可视区域以图片显示为例： ● window.innerHeight 是浏览器可视区的高度；● document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离；● imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）；● 内容达到显示区域的：img.offsetTop &lt; window.innerHeight + document.body.scrollTop; 30. z-index属性在什么情况下会失效通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。 z-index属性在下列情况下会失效： ● 父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static； ● 元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种； ● 元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block； 二、页面布局1. 常见的CSS布局单位常用的布局单位包括像素（px），百分比（%），em，rem，vw/vh。 （1）像素（px）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素： CSS像素：为web开发者提供，在CSS中使用的一个抽象单位； 物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的。 （2）百分比（%），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。 （3）em和rem相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：em相对于父元素，rem相对于根元素。 em： 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。 rem： rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。作用：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。 （4）vw/vh是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。 vw：相对于视窗的宽度，视窗宽度是100vw； vh：相对于视窗的高度，视窗高度是100vh； vmin：vw和vh中的较小值； vmax：vw和vh中的较大值； vw/vh 和百分比很类似，两者的区别： 百分比（%）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等) vw/vm：相对于视窗的尺寸 2. px、em、rem的区别及使用场景三者的区别： px是固定的像素，一旦设置了就无法因为适应页面大小而改变。 em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。 em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。 使用场景： 对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。 3. 两栏布局的实现一般两栏布局指的是左边一栏宽度固定，右边一栏宽度自适应，两栏布局的具体实现： 利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）12345678910111213.outer &#123; height: 100px;&#125;.left &#123; float: left; width: 200px; background: tomato;&#125;.right &#123; margin-left: 200px; width: auto; background: gold;&#125; 利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。 1234567891011.left&#123; width: 100px; height: 200px; background: red; float: left;&#125;.right&#123; height: 300px; background: blue; overflow: hidden;&#125; 利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。 12345678910111213.outer &#123; display: flex; height: 100px;&#125;.left &#123; width: 200px; background: tomato;&#125;.right &#123; flex: 1; background: gold;&#125; 利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。 1234567891011121314.outer &#123; position: relative; height: 100px;&#125;.left &#123; position: absolute; width: 200px; height: 100px; background: tomato;&#125;.right &#123; margin-left: 200px; background: gold;&#125; 利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。 12345678910111213141516.outer &#123; position: relative; height: 100px;&#125;.left &#123; width: 200px; background: tomato;&#125;.right &#123; position: absolute; top: 0; right: 0; bottom: 0; left: 200px; background: gold;&#125; 4. 三栏布局的实现三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，三栏布局的具体实现： 利用绝对定位，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。 12345678910111213141516171819202122232425262728.outer &#123; position: relative; height: 100px;&#125;.left &#123; position: absolute; width: 100px; height: 100px; background: tomato;&#125;.right &#123; position: absolute; top: 0; right: 0; width: 200px; height: 100px; background: gold;&#125;.center &#123; margin-left: 100px; margin-right: 200px; height: 100px; background: lightgreen;&#125; 利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。1234567891011121314151617181920.outer &#123; display: flex; height: 100px;&#125;.left &#123; width: 100px; background: tomato;&#125;.right &#123; width: 100px; background: gold;&#125;.center &#123; flex: 1; background: lightgreen;&#125; 利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式**，中间一栏必须放到最后： 12345678910111213141516171819202122232425.outer &#123; height: 100px;&#125;.left &#123; float: left; width: 100px; height: 100px; background: tomato;&#125;.right &#123; float: right; width: 200px; height: 100px; background: gold;&#125;.center &#123; height: 100px; margin-left: 100px; margin-right: 200px; background: lightgreen;&#125; 圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。 1234567891011121314151617181920212223242526272829303132333435363738.outer &#123; height: 100px; padding-left: 100px; padding-right: 200px;&#125;.left &#123; position: relative; left: -100px; float: left; margin-left: -100%; width: 100px; height: 100px; background: tomato;&#125;.right &#123; position: relative; left: 200px; float: right; margin-left: -200px; width: 200px; height: 100px; background: gold;&#125;.center &#123; float: left; width: 100%; height: 100px; background: lightgreen;&#125; 双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。 123456789101112131415161718192021222324252627282930313233343536.outer &#123; height: 100px;&#125;.left &#123; float: left; margin-left: -100%; width: 100px; height: 100px; background: tomato;&#125;.right &#123; float: left; margin-left: -200px; width: 200px; height: 100px; background: gold;&#125;.wrapper &#123; float: left; width: 100%; height: 100px; background: lightgreen;&#125;.center &#123; margin-left: 100px; margin-right: 200px; height: 100px;&#125; 5. 水平垂直居中的实现 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要考虑浏览器兼容问题。 12345678910.parent &#123; position: relative;&#125; .child &#123; position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);&#125; 利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于盒子有宽高的情况： 12345678910111213.parent &#123; position: relative;&#125; .child &#123; position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto;&#125; 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于盒子宽高已知的情况 123456789101112.parent &#123; position: relative;&#125; .child &#123; position: absolute; top: 50%; left: 50%; margin-top: -50px; /* 自身 height 的一半 */ margin-left: -50px; /* 自身 width 的一半 */&#125; 使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要考虑兼容的问题，该方法在移动端用的较多： 12345.parent &#123; display: flex; justify-content:center; align-items:center;&#125; 6. 如何根据设计稿进行移动端适配？移动端适配主要有两个维度： ● 适配不同像素密度， 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；● 适配不同屏幕大小， 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。 为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。 7. 对Flex布局的理解及其使用场景Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。 以下6个属性设置在容器上： flex-direction属性决定主轴的方向（即项目的排列方向）。 flex-wrap属性定义，如果一条轴线排不下，如何换行。 flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 justify-content属性定义了项目在主轴上的对齐方式。 align-items属性定义项目在交叉轴上如何对齐。 align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 以下6个属性设置在项目上： order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。 align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 简单来说：flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。 8. 响应式设计的概念及基本原理响应式网站设计（Responsive Web design）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。 关于原理： 基本原理是通过媒体查询（@media）查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的viewport。 1&lt;meta name=&quot;’viewport’&quot; content=&quot;”width=device-width,&quot; initial-scale=&quot;1.&quot; maximum-scale=&quot;1,user-scalable=no”&quot;/&gt; 三、定位与浮动1. 为什么需要清除浮动？清除浮动的方式浮动的定义： 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。 浮动的工作原理： 浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象） 浮动元素碰到包含它的边框或者其他浮动元素的边框停留 浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。 浮动元素引起的问题？ 父元素的高度无法被撑开，影响与父元素同级的元素 与浮动元素同级的非浮动元素会跟随其后 若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构 清除浮动的方式如下： 给父级div定义height属性 最后一个浮动元素之后添加一个空的div标签，并添加clear:both样式 包含浮动元素的父级标签添加overflow:hidden或者overflow:auto 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout** .clearfix:after&#123; content: &quot;\\200B&quot;; display: table; height: 0; clear: both; &#125; .clearfix&#123; *zoom: 1; &#125; 2. 使用 clear 属性清除浮动的原理？使用clear属性清除浮动，其语法如下： clear:none|left|right|both 如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。 官方对clear属性解释：“元素盒子的边不能和前面的浮动元素相邻”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。 还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“前面的”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。 一般使用伪元素的方式清除浮动： .clear::after&#123; content:&#39;&#39;; display: block; clear:both;&#125; clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。 3. 对BFC的理解，如何创建BFC先来看两个相关的概念： ● Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。 ● Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。 块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。 通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。 创建BFC的条件： 根元素：body； 元素设置浮动：float 除 none 以外的值； 元素设置绝对定位：position (absolute、fixed)； display 值为：inline-block、table-cell、table-caption、flex等； overflow 值为：hidden、auto、scroll； BFC的作用： 解决margin的重叠问题：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。 解决高度塌陷的问题：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置overflow:hidden。 创建自适应两栏布局：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。 1234567891011121314.left&#123; width: 100px; height: 200px; background: red; float: left; &#125; .right&#123; height: 300px; background: blue; overflow: hidden; &#125; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;&lt;div class=&quot;right&quot;&gt;&lt;/div&gt; 左侧设置float:left，右侧设置overflow: hidden。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。 4. 什么是margin重叠问题？如何解决？问题描述： 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，浮动的元素和绝对定位这种脱离文档流的元素的外边距不会折叠。重叠只会出现在垂直方向。 计算原则： 折叠合并后外边距的计算原则如下： 如果两者都是正数，那么就去最大者 如果是一正一负，就会正值减去负值的绝对值 两个都是负值时，用0减去两个中绝对值大的那个 解决办法： 对于折叠的情况，主要有两种：兄弟之间重叠和父子之间重叠 （1）兄弟之间重叠 底部元素变为行内盒子：display: inline-block 底部元素设置浮动：float 底部元素的position的值为absolute/fixed （2）父子之间重叠 父元素加入：overflow: hidden 父元素添加透明边框：border:1px solid transparent 子元素变为行内盒子：display: inline-block 子元素加入浮动属性或定位 5. 元素的层叠顺序层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则 对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。 注意: 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。 6. position的属性有哪些，区别是什么position有以下属性值： 属性值 概述 absolute 生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。 relative 生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。 fixed 生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。 static 默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。 inherit inherit 前面三者的定位方式如下： relative： 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。 fixed： 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。 absolute： 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了position:relative/absolute/fixed的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示： 7. display、float、position的关系（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。 （2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。 （3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。 （4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。 总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元素的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设置值。 8. absolute与fixed共同点与不同点共同点： 改变行内元素的呈现方式，将display置为inline-block 使元素脱离普通文档流，不再占据文档物理空间 覆盖非定位文档元素 不同点： abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。 在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。 9. 对 sticky 定位的理解sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：position: sticky; 基于用户的滚动位置来定位。 粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。 四、场景应用1. 实现一个三角形CSS绘制三角形主要用到的是border属性，也就是边框。平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子： div &#123; width: 0; height: 0; border: 100px solid; border-color: orange blue red green; &#125; 将元素的长宽都设置为0，显示出来的效果是这样的： 所以可以根据border这个特性来绘制三角形： （1）三角1 div &#123; width: 0; height: 0; border-top: 50px solid red; border-right: 50px solid transparent; border-left: 50px solid transparent; &#125; （2）三角2 div &#123; width: 0; height: 0; border-bottom: 50px solid red; border-right: 50px solid transparent; border-left: 50px solid transparent; &#125; （3）三角3 div &#123; width: 0; height: 0; border-left: 50px solid red; border-top: 50px solid transparent; border-bottom: 50px solid transparent; &#125; （4）三角4 div &#123; width: 0; height: 0; border-right: 50px solid red; border-top: 50px solid transparent; border-bottom: 50px solid transparent; &#125; （5）三角5 div &#123; width: 0; height: 0; border-top: 100px solid red; border-right: 100px solid transparent; &#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"说说webpack的构建流程?","slug":"Webpack.说说webpack的构建流程_","date":"2022-08-05T06:12:04.844Z","updated":"2022-08-05T06:14:45.730Z","comments":true,"path":"2022/08/05/Webpack.说说webpack的构建流程_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B_/","excerpt":"","text":"说说webpack的构建流程? 一、运行流程webpack 的运行流程是一个串行的过程，它的工作流程就是将各个插件串联起来 在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条webpack机制中，去改变webpack的运作，使得整个系统扩展性良好 从启动到结束会依次执行以下三大步骤： 初始化流程：从配置文件和 Shell 语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数 编译构建流程：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理 输出流程：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统 初始化流程从配置文件和 Shell 语句中读取与合并参数，得出最终的参数 配置文件默认下为webpack.config.js，也或者通过命令的形式指定配置文件，主要作用是用于激活webpack的加载项和插件 关于文件配置内容分析，如下注释： 12345678910111213141516171819202122232425262728293031323334353637var path = require(&#x27;path&#x27;);var node_modules = path.resolve(__dirname, &#x27;node_modules&#x27;);var pathToReact = path.resolve(node_modules, &#x27;react/dist/react.min.js&#x27;);module.exports = &#123; // 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。 entry: &#x27;./path/to/my/entry/file.js&#x27;， // 文件路径指向(可加快打包过程)。 resolve: &#123; alias: &#123; &#x27;react&#x27;: pathToReact &#125; &#125;, // 生成文件，是模块构建的终点，包括输出文件与输出路径。 output: &#123; path: path.resolve(__dirname, &#x27;build&#x27;), filename: &#x27;[name].js&#x27; &#125;, // 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。 module: &#123; loaders: [ &#123; test: /\\.js$/, loader: &#x27;babel&#x27;, query: &#123; presets: [&#x27;es2015&#x27;, &#x27;react&#x27;] &#125; &#125; ], noParse: [pathToReact] &#125;, // webpack 各插件对象，在 webpack 的事件流中执行对应的方法。 plugins: [ new webpack.HotModuleReplacementPlugin() ]&#125;;webpack` 将 `webpack.config.js` 中的各个配置项拷贝到 `options` 对象中，并加载用户配置的 `plugins 完成上述步骤之后，则开始初始化Compiler编译对象，该对象掌控者webpack声明周期，不执行具体的任务，只是进行一些调度工作 123456789101112131415161718192021class Compiler extends Tapable &#123; constructor(context) &#123; super(); this.hooks = &#123; beforeCompile: new AsyncSeriesHook([&quot;params&quot;]), compile: new SyncHook([&quot;params&quot;]), afterCompile: new AsyncSeriesHook([&quot;compilation&quot;]), make: new AsyncParallelHook([&quot;compilation&quot;]), entryOption: new SyncBailHook([&quot;context&quot;, &quot;entry&quot;]) // 定义了很多不同类型的钩子 &#125;; // ... &#125;&#125;function webpack(options) &#123; var compiler = new Compiler(); ...// 检查options,若watch字段为true,则开启watch线程 return compiler;&#125;... Compiler 对象继承自 Tapable，初始化时定义了很多钩子函数 编译构建流程根据配置中的 entry 找出所有的入口文件 123module.exports = &#123; entry: &#x27;./src/file.js&#x27;&#125; 初始化完成后会调用Compiler的run来真正启动webpack编译构建流程，主要流程如下： compile 开始编译 make 从入口点分析模块及其依赖的模块，创建这些模块对象 build-module 构建模块 seal 封装构建结果 emit 把各个chunk输出到结果文件 compile 编译执行了run方法后，首先会触发compile，主要是构建一个Compilation对象 该对象是编译阶段的主要执行者，主要会依次下述流程：执行模块创建、依赖收集、分块、打包等主要任务的对象 make 编译模块当完成了上述的compilation对象后，就开始从Entry入口文件开始读取，主要执行_addModuleChain()函数，如下： 12345678910111213141516171819202122232425_addModuleChain(context, dependency, onModule, callback) &#123; ... // 根据依赖查找对应的工厂函数 const Dep = /** @type &#123;DepConstructor&#125; */ (dependency.constructor); const moduleFactory = this.dependencyFactories.get(Dep); // 调用工厂函数NormalModuleFactory的create来生成一个空的NormalModule对象 moduleFactory.create(&#123; dependencies: [dependency] ... &#125;, (err, module) =&gt; &#123; ... const afterBuild = () =&gt; &#123; this.processModuleDependencies(module, err =&gt; &#123; if (err) return callback(err); callback(null, module); &#125;); &#125;; this.buildModule(module, false, null, null, err =&gt; &#123; ... afterBuild(); &#125;) &#125;)&#125; 过程如下： _addModuleChain中接收参数dependency传入的入口依赖，使用对应的工厂函数NormalModuleFactory.create方法生成一个空的module对象 回调中会把此module存入compilation.modules对象和dependencies.module对象中，由于是入口文件，也会存入compilation.entries中 随后执行buildModule进入真正的构建模块module内容的过程 build module 完成模块编译这里主要调用配置的loaders，将我们的模块转成标准的JS模块 在用Loader 对一个模块转换完后，使用 acorn 解析转换后的内容，输出对应的抽象语法树（AST），以方便 Webpack后面对代码的分析 从配置的入口模块开始，分析其 AST，当遇到require等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系 输出流程seal 输出资源seal方法主要是要生成chunks，对chunks进行一系列的优化操作，并生成要输出的代码 webpack 中的 chunk ，可以理解为配置在 entry 中的模块，或者是动态引入的模块 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表 emit 输出完成在确定好输出内容后，根据配置确定输出的路径和文件名 1234output: &#123; path: path.resolve(__dirname, &#x27;build&#x27;), filename: &#x27;[name].js&#x27;&#125; 在 Compiler 开始生成文件前，钩子 emit 会被执行，这是我们修改最终文件的最后一个机会 从而webpack整个打包过程则结束了 小结","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说你对Webpack的理解？解决了什么问题？","slug":"Webpack.说说你对Webpack的理解？解决了什么问题？","date":"2022-08-05T06:12:04.804Z","updated":"2022-08-05T06:13:16.086Z","comments":true,"path":"2022/08/05/Webpack.说说你对Webpack的理解？解决了什么问题？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9Webpack%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/","excerpt":"","text":"说说你对Webpack的理解？解决了什么问题？ 一、背景Webpack 最初的目标是实现前端项目的模块化，旨在更高效地管理和维护项目中的每一个资源 模块化最早的时候，我们会通过文件划分的形式实现模块化，也就是将每个功能及其相关状态数据各自单独放到不同的JS 文件中 约定每个文件是一个独立的模块，然后再将这些js文件引入到页面，一个script标签对应一个模块，然后调用模块化的成员 12&lt;script src=&quot;module-a.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;module-b.js&quot;&gt;&lt;/script&gt; 但这种模块弊端十分的明显，模块都是在全局中工作，大量模块成员污染了环境，模块与模块之间并没有依赖关系、维护困难、没有私有空间等问题 项目一旦变大，上述问题会尤其明显 随后，就出现了命名空间方式，规定每个模块只暴露一个全局对象，然后模块的内容都挂载到这个对象中 12345window.moduleA = &#123; method1: function () &#123; console.log(&#x27;moduleA#method1&#x27;) &#125;&#125; 这种方式也并没有解决第一种方式的依赖等问题 再后来，我们使用立即执行函数为模块提供私有空间，通过参数的形式作为依赖声明，如下 12345678910111213// module-a.js(function ($) &#123; var name = &#x27;module-a&#x27; function method1 () &#123; console.log(name + &#x27;#method1&#x27;) $(&#x27;body&#x27;).animate(&#123; margin: &#x27;200px&#x27; &#125;) &#125; window.moduleA = &#123; method1: method1 &#125;&#125;)(jQuery) 上述的方式都是早期解决模块的方式，但是仍然存在一些没有解决的问题。例如，我们是用过script标签在页面引入这些模块的，这些模块的加载并不受代码的控制，时间一久维护起来也十分的麻烦 理想的解决方式是，在页面中引入一个JS入口文件，其余用到的模块可以通过代码控制，按需加载进来 除了模块加载的问题以外，还需要规定模块化的规范，如今流行的则是CommonJS、ES Modules 二、问题从后端渲染的JSP、PHP，到前端原生JavaScript，再到jQuery开发，再到目前的三大框架Vue、React、Angular 开发方式，也从javascript到后面的es5、es6、7、8、9、10，再到typescript，包括编写CSS的预处理器less、scss等 现代前端开发已经变得十分的复杂，所以我们开发过程中会遇到如下的问题： 需要通过模块化的方式来开发 使用一些高级的特性来加快我们的开发效率或者安全性，比如通过ES6+、TypeScript开发脚本逻辑，通过sass、less等方式来编写css样式代码 监听文件的变化来并且反映到浏览器上，提高开发的效率 JavaScript 代码需要模块化，HTML 和 CSS 这些资源文件也会面临需要被模块化的问题 开发完成后我们还需要将代码进行压缩、合并以及其他相关的优化 而webpack恰巧可以解决以上问题 三、是什么webpack 是一个用于现代JavaScript应用程序的静态模块打包工具 静态模块 这里的静态模块指的是开发阶段，可以被 webpack 直接引用的资源（可以直接被获取打包进bundle.js的资源） 当 webpack处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限js文件），并生成一个或多个 bundle webpack的能力：「编译代码能力」，提高效率，解决浏览器兼容问题「模块整合能力」，提高性能，可维护性，解决浏览器频繁请求文件的问题「万物皆可模块能力」，项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载都可以通过代码控制","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"与Webpack类似的工具还有哪些？区别？","slug":"Webpack.与Webpack类似的工具还有哪些？区别？","date":"2022-08-05T06:12:04.759Z","updated":"2022-08-05T06:14:16.760Z","comments":true,"path":"2022/08/05/Webpack.与Webpack类似的工具还有哪些？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E4%B8%8EWebpack%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%B7%A5%E5%85%B7%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"与Webpack类似的工具还有哪些？区别？ 一、模块化工具模块化是一种处理复杂系统分解为更好的可管理模块的方式 可以用来分割，组织和打包应用。每个模块完成一个特定的子功能，所有的模块按某种方法组装起来，成为一个整体(bundle) 在前端领域中，并非只有webpack这一款优秀的模块打包工具，还有其他类似的工具，例如Rollup、Parcel、snowpack，以及最近风头无两的Vite 通过这些模块打包工具，能够提高我们的开发效率，减少开发成本 这里没有提及gulp、grunt是因为它们只是定义为构建工具，不能类比 RollupRollup 是一款 ES Modules 打包器，从作用上来看，Rollup 与 Webpack非常类似。不过相比于 Webpack，Rollup要小巧的多 现在很多我们熟知的库都都使用它进行打包，比如：Vue、React和three.js等 举个例子： 12345678910111213141516171819202122// ./src/messages.jsexport default &#123; hi: &#x27;Hey Guys, I am zce~&#x27;&#125;// ./src/logger.jsexport const log = msg =&gt; &#123; console.log(&#x27;---------- INFO ----------&#x27;) console.log(msg) console.log(&#x27;--------------------------&#x27;)&#125;export const error = msg =&gt; &#123; console.error(&#x27;---------- ERROR ----------&#x27;) console.error(msg) console.error(&#x27;---------------------------&#x27;)&#125;// ./src/index.jsimport &#123; log &#125; from &#x27;./logger&#x27;import messages from &#x27;./messages&#x27;log(messages.hi) 然后通过rollup进行打包 1$ npx rollup ./src/index.js --file ./dist/bundle.js 打包结果如下图 可以看到，代码非常简洁，完成不像webpack那样存在大量引导代码和模块函数 并且error方法由于没有被使用，输出的结果中并无error方法，可以看到，rollup默认开始Tree-shaking 优化输出结果 因此，可以看到Rollup的优点： 代码效率更简洁、效率更高 默认支持 Tree-shaking 但缺点也十分明显，加载其他类型的资源文件或者支持导入 CommonJS 模块，又或是编译 ES 新特性，这些额外的需求 Rollup需要使用插件去完成 综合来看，rollup并不适合开发应用使用，因为需要使用第三方模块，而目前第三方模块大多数使用CommonJs方式导出成员，并且rollup不支持HMR，使开发效率降低 但是在用于打包JavaScript 库时，rollup比 webpack 更有优势，因为其打包出来的代码更小、更快，其存在的缺点可以忽略 ParcelParcel ，是一款完全零配置的前端打包器，它提供了 “傻瓜式” 的使用体验，只需了解简单的命令，就能构建前端应用程序 Parcel 跟 Webpack 一样都支持以任意类型文件作为打包入口，但建议使用HTML文件作为入口，该HTML文件像平时一样正常编写代码、引用资源。如下所示： 1234567891011&lt;!-- ./src/index.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Parcel Tutorials&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; main.js文件通过ES Moudle方法导入其他模块成员 12345678// ./src/main.jsimport &#123; log &#125; from &#x27;./logger&#x27;log(&#x27;hello parcel&#x27;)// ./src/logger.jsexport const log = msg =&gt; &#123; console.log(&#x27;---------- INFO ----------&#x27;) console.log(msg)&#125; 运行之后，使用命令打包 1npx parcel src/index.html 执行命令后，Parcel不仅打包了应用，同时也启动了一个开发服务器，跟webpack Dev Server一样 跟webpack类似，也支持模块热替换，但用法更简单 同时，Parcel有个十分好用的功能：支持自动安装依赖，像webpack开发阶段突然使用安装某个第三方依赖，必然会终止dev server然后安装再启动。而Parcel则免了这繁琐的工作流程 同时，Parcel能够零配置加载其他类型的资源文件，无须像webpack那样配置对应的loader 打包命令如下： 1npx parcel src/index.html 由于打包过程是多进程同时工作，构建速度会比Webpack 快，输出文件也会被压缩，并且样式代码也会被单独提取到单个文件中 可以感受到，Parcel给开发者一种很大的自由度，只管去实现业务代码，其他事情用Parcel解决 SnowpackSnowpack，是一种闪电般快速的前端构建工具，专为现代Web设计，较复杂的打包工具（如Webpack或Parcel）的替代方案，利用JavaScript的本机模块系统，避免不必要的工作并保持流畅的开发体验 开发阶段，每次保存单个文件时，Webpack和Parcel都需要重新构建和重新打包应用程序的整个bundle。而Snowpack为你的应用程序每个文件构建一次，就可以永久缓存，文件更改时，Snowpack会重新构建该单个文件 下图给出webpack与snowpack打包区别： 在重新构建每次变更时没有任何的时间浪费，只需要在浏览器中进行HMR更新 Vitevite ，是一种新型前端构建工具，能够显著提升前端开发体验 它主要由两部分组成： 一个开发服务器，它基于 原生 ES 模块 提供了丰富的内建功能，如速度快到惊人的 [模块热更新HMR 一套构建指令，它使用 Rollup打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源 其作用类似webpack+ webpack-dev-server，其特点如下： 快速的冷启动 即时的模块热更新 真正的按需编译 vite会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快 利用现代浏览器支持ES Module的特性，当浏览器请求某个模块的时候，再根据需要对模块的内容进行编译，这种方式大大缩短了编译时间 原理图如下所示： 在热模块HMR方面，当修改一个模块的时候，仅需让浏览器重新请求该模块即可，无须像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高 webpack相比上述的模块化工具，webpack大而全，很多常用的功能做到开箱即用。有两大最核心的特点：「一切皆模块」和「按需加载」 与其他构建工具相比，有如下优势： 智能解析：对 CommonJS 、 AMD 、ES6 的语法做了兼容 万物模块：对 js、css、图片等资源文件都支持打包 开箱即用：HRM、Tree-shaking等功能 代码分割：可以将代码切割成不同的 chunk，实现按需加载，降低了初始化时间 插件系统，具有强大的 Plugin 接口，具有更好的灵活性和扩展性 易于调试：支持 SourceUrls 和 SourceMaps 快速运行：webpack 使用异步 IO 并具有多级缓存，这使得 webpack 很快且在增量编译上更加快 生态环境好：社区更丰富，出现的问题更容易解决","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说提高webpack的构建速度的手段有哪些？","slug":"Webpack.说说提高webpack的构建速度的手段有哪些？","date":"2022-08-05T06:12:04.694Z","updated":"2022-08-05T06:14:56.703Z","comments":true,"path":"2022/08/05/Webpack.说说提高webpack的构建速度的手段有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4%E6%8F%90%E9%AB%98webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E7%9A%84%E6%89%8B%E6%AE%B5%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说提高webpack的构建速度的手段有哪些？ 一、背景随着我们的项目涉及到页面越来越多，功能和业务代码也会随着越多，相应的 webpack 的构建时间也会越来越久 构建时间与我们日常开发效率密切相关，当我们本地开发启动 devServer 或者 build 的时候，如果时间过长，会大大降低我们的工作效率 所以，优化webpack 构建速度是十分重要的环节 二、如何优化常见的提升构建速度的手段有如下： 优化 loader 配置 合理使用 resolve.extensions 优化 resolve.modules 优化 resolve.alias 使用 DLLPlugin 插件 使用 cache-loader terser 启动多线程 合理使用 sourceMap 优化loader配置在使用loader时，可以通过配置include、exclude、test属性来匹配文件，接触include、exclude规定哪些匹配应用loader 如采用 ES6 的项目为例，在配置 babel-loader时，可以这样： 1234567891011121314module.exports = &#123; module: &#123; rules: [ &#123; // 如果项目源码中只有 js 文件就不要写成 /\\.jsx?$/，提升正则表达式性能 test: /\\.js$/, // babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启 use: [&#x27;babel-loader?cacheDirectory&#x27;], // 只对项目根目录下的 src 目录中的文件采用 babel-loader include: path.resolve(__dirname, &#x27;src&#x27;), &#125;, ] &#125;,&#125;; 合理使用 resolve.extensions在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库， resolve可以帮助webpack从每个 require/import 语句中，找到需要引入到合适的模块代码 通过resolve.extensions是解析到文件时自动添加拓展名，默认情况如下： 1234module.exports = &#123; ... extensions:[&quot;.warm&quot;,&quot;.mjs&quot;,&quot;.js&quot;,&quot;.json&quot;]&#125; 当我们引入文件的时候，若没有文件后缀名，则会根据数组内的值依次查找 当我们配置的时候，则不要随便把所有后缀都写在里面，这会调用多次文件的查找，这样就会减慢打包速度 优化 resolve.modulesresolve.modules 用于配置 webpack 去哪些目录下寻找第三方模块。默认值为[&#39;node_modules&#39;]，所以默认会从node_modules中查找文件 当安装的第三方模块都放在项目根目录下的 ./node_modules目录下时，所以可以指明存放第三方模块的绝对路径，以减少寻找，配置如下： 1234567module.exports = &#123; resolve: &#123; // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤 // 其中 __dirname 表示当前工作目录，也就是项目根目录 modules: [path.resolve(__dirname, &#x27;node_modules&#x27;)] &#125;,&#125;; 优化 resolve.aliasalias给一些常用的路径起一个别名，特别当我们的项目目录结构比较深的时候，一个文件的路径可能是./../../的形式 通过配置alias以减少查找过程 12345678module.exports = &#123; ... resolve:&#123; alias:&#123; &quot;@&quot;:path.resolve(__dirname,&#x27;./src&#x27;) &#125; &#125;&#125; 使用 DLLPlugin 插件DLL全称是 动态链接库，是为软件在winodw中实现共享函数库的一种实现方式，而Webpack也内置了DLL的功能，为的就是可以共享，不经常改变的代码，抽成一个共享的库。这个库在之后的编译过程中，会被引入到其他项目的代码中 使用步骤分成两部分： 打包一个 DLL 库 引入 DLL 库 打包一个 DLL 库webpack内置了一个DllPlugin可以帮助我们打包一个DLL的库文件 123456789module.exports = &#123; ... plugins:[ new webpack.DllPlugin(&#123; name:&#x27;dll_[name]&#x27;, path:path.resolve(__dirname,&quot;./dll/[name].mainfest.json&quot;) &#125;) ]&#125; 引入 DLL 库使用 webpack 自带的 DllReferencePlugin 插件对 mainfest.json 映射文件进行分析，获取要使用的DLL库 然后再通过AddAssetHtmlPlugin插件，将我们打包的DLL库引入到Html模块中 1234567891011module.exports = &#123; ... new webpack.DllReferencePlugin(&#123; context:path.resolve(__dirname,&quot;./dll/dll_react.js&quot;), mainfest:path.resolve(__dirname,&quot;./dll/react.mainfest.json&quot;) &#125;), new AddAssetHtmlPlugin(&#123; outputPath:&quot;./auto&quot;, filepath:path.resolve(__dirname,&quot;./dll/dll_react.js&quot;) &#125;)&#125; 使用 cache-loader在一些性能开销较大的 loader之前添加 cache-loader，以将结果缓存到磁盘里，显著提升二次构建速度 保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader使用此loader 1234567891011module.exports = &#123; module: &#123; rules: [ &#123; test: /\\.ext$/, use: [&#x27;cache-loader&#x27;, ...loaders], include: path.resolve(&#x27;src&#x27;), &#125;, ], &#125;,&#125;; terser 启动多线程使用多进程并行运行来提高构建速度 123456789module.exports = &#123; optimization: &#123; minimizer: [ new TerserPlugin(&#123; parallel: true, &#125;), ], &#125;,&#125;; 合理使用 sourceMap打包生成 sourceMap 的时候，如果信息越详细，打包速度就会越慢。对应属性取值如下所示： 三、总结可以看到，优化webpack构建的方式有很多，主要可以从优化搜索时间、缩小文件搜索范围、减少不必要的编译等方面入手","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说你是如何利用Webpack来优化前端性能的？","slug":"Webpack.说说你是如何利用Webpack来优化前端性能的？","date":"2022-08-05T06:12:04.641Z","updated":"2022-08-05T06:15:03.590Z","comments":true,"path":"2022/08/05/Webpack.说说你是如何利用Webpack来优化前端性能的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Webpack%E6%9D%A5%E4%BC%98%E5%8C%96%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E7%9A%84%EF%BC%9F/","excerpt":"","text":"说说你是如何利用Webpack来优化前端性能的？ 一、背景随着前端的项目逐渐扩大，必然会带来的一个问题就是性能 尤其在大型复杂的项目中，前端业务可能因为一个小小的数据依赖，导致整个页面卡顿甚至奔溃 一般项目在完成后，会通过webpack进行打包，利用webpack对前端项目性能优化是一个十分重要的环节 二、如何优化通过webpack优化前端的手段有： JS代码压缩 CSS代码压缩 Html文件代码压缩 文件大小压缩 图片压缩 Tree Shaking 代码分离 内联 chunk JS代码压缩terser是一个JavaScript的解释、绞肉机、压缩机的工具集，可以帮助我们压缩、丑化我们的代码，让bundle更小 在production模式下，webpack 默认就是使用 TerserPlugin 来处理我们的代码的。如果想要自定义配置它，配置方法如下： 123456789101112const TerserPlugin = require(&#x27;terser-webpack-plugin&#x27;)module.exports = &#123; ... optimization: &#123; minimize: true, minimizer: [ new TerserPlugin(&#123; parallel: true // 电脑cpu核数-1 &#125;) ] &#125;&#125; 属性介绍如下： extractComments：默认值为true，表示会将注释抽取到一个单独的文件中，开发阶段，我们可设置为 false ，不保留注释 parallel：使用多进程并发运行提高构建的速度，默认值是true，并发运行的默认数量：os.cpus().length - 1 terserOptions：设置我们的terser相关的配置： compress：设置压缩相关的选项，mangle：设置丑化相关的选项，可以直接设置为true mangle：设置丑化相关的选项，可以直接设置为true toplevel：底层变量是否进行转换 keep_classnames：保留类的名称 keep_fnames：保留函数的名称 CSS代码压缩CSS压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等 CSS的压缩我们可以使用另外一个插件：css-minimizer-webpack-plugin 1npm install css-minimizer-webpack-plugin -D 配置方法如下： 123456789101112const CssMinimizerPlugin = require(&#x27;css-minimizer-webpack-plugin&#x27;)module.exports = &#123; // ... optimization: &#123; minimize: true, minimizer: [ new CssMinimizerPlugin(&#123; parallel: true &#125;) ] &#125;&#125; Html文件代码压缩使用HtmlWebpackPlugin插件来生成HTML的模板时候，通过配置属性minify进行html优化 12345678910111213module.exports = &#123; ... plugin:[ new HtmlwebpackPlugin(&#123; ... minify:&#123; minifyCSS:false, // 是否压缩css collapseWhitespace:false, // 是否折叠空格 removeComments:true // 是否移除注释 &#125; &#125;) ]&#125; 设置了minify，实际会使用另一个插件html-minifier-terser 文件大小压缩对文件的大小进行压缩，减少http传输过程中宽带的损耗 1234567npm install compression-webpack-plugin -Dnew ComepressionPlugin(&#123; test:/\\.(css|js)$/, // 哪些文件需要压缩 threshold:500, // 设置文件多大开始压缩 minRatio:0.7, // 至少压缩的比例 algorithm:&quot;gzip&quot;, // 采用的压缩算法&#125;) 图片压缩一般来说在打包之后，一些图片文件的大小是远远要比 js 或者 css 文件要来的大，所以图片压缩较为重要 配置方法如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243module: &#123; rules: [ &#123; test: /\\.(png|jpg|gif)$/, use: [ &#123; loader: &#x27;file-loader&#x27;, options: &#123; name: &#x27;[name]_[hash].[ext]&#x27;, outputPath: &#x27;images/&#x27;, &#125; &#125;, &#123; loader: &#x27;image-webpack-loader&#x27;, options: &#123; // 压缩 jpeg 的配置 mozjpeg: &#123; progressive: true, quality: 65 &#125;, // 使用 imagemin**-optipng 压缩 png，enable: false 为关闭 optipng: &#123; enabled: false, &#125;, // 使用 imagemin-pngquant 压缩 png pngquant: &#123; quality: &#x27;65-90&#x27;, speed: 4 &#125;, // 压缩 gif 的配置 gifsicle: &#123; interlaced: false, &#125;, // 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式 webp: &#123; quality: 75 &#125; &#125; &#125; ] &#125;, ]&#125; Tree ShakingTree Shaking 是一个术语，在计算机中表示消除死代码，依赖于ES Module的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系） 在webpack实现Trss shaking有两种不同的方案： usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的 sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用 两种不同的配置方案， 有不同的效果 usedExports配置方法也很简单，只需要将usedExports设为true 123456module.exports = &#123; ... optimization:&#123; usedExports &#125;&#125; 使用之后，没被用上的代码在webpack打包中会加入unused harmony export mul注释，用来告知 Terser 在优化时，可以删除掉这段代码 如下面sum函数没被用到，webpack打包会添加注释，terser在优化时，则将该函数去掉 sideEffectssideEffects用于告知webpack compiler哪些模块时有副作用，配置方法是在package.json中设置sideEffects属性 如果sideEffects设置为false，就是告知webpack可以安全的删除未用到的exports 如果有些文件需要保留，可以设置为数组的形式 1234&quot;sideEffecis&quot;:[ &quot;./src/util/format.js&quot;, &quot;*.css&quot; // 所有的css文件] 上述都是关于javascript的tree shaking，css同样也能够实现tree shaking css tree shakingcss进行tree shaking优化可以安装PurgeCss插件 123456789101112131415npm install purgecss-plugin-webpack -Dconst PurgeCssPlugin = require(&#x27;purgecss-webpack-plugin&#x27;)module.exports = &#123; ... plugins:[ new PurgeCssPlugin(&#123; path:glob.sync(`$&#123;path.resolve(&#x27;./src&#x27;)&#125;/**/*`), &#123;nodir:true&#125;// src里面的所有文件 satelist:function()&#123; return &#123; standard:[&quot;html&quot;] &#125; &#125; &#125;) ]&#125; paths：表示要检测哪些目录下的内容需要被分析，配合使用glob 默认情况下，Purgecss会将我们的html标签的样式移除掉，如果我们希望保留，可以添加一个safelist的属性 代码分离将代码分离到不同的bundle中，之后我们可以按需加载，或者并行加载这些文件 默认情况下，所有的JavaScript代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页的加载速度 代码分离可以分出出更小的bundle，以及控制资源加载优先级，提供代码的加载性能 这里通过splitChunksPlugin来实现，该插件webpack已经默认安装和集成，只需要配置即可 默认配置中，chunks仅仅针对于异步（async）请求，我们可以设置为initial或者all 12345678module.exports = &#123; ... optimization:&#123; splitChunks:&#123; chunks:&quot;all&quot; &#125; &#125;&#125; splitChunks主要属性有如下： Chunks，对同步代码还是异步代码进行处理 minSize：拆分包的大小, 至少为minSize，如何包的大小不超过minSize，这个包不会拆分 maxSize：将大于maxSize的包，拆分为不小于minSize的包 minChunks：被引入的次数，默认是1 内联chunk可以通过InlineChunkHtmlPlugin插件将一些chunk的模块内联到html，如runtime的代码（对模块进行解析、加载、模块信息相关的代码），代码量并不大，但是必须加载的 1234567const InlineChunkHtmlPlugin = require(&#x27;react-dev-utils/InlineChunkHtmlPlugin&#x27;)const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)module.exports = &#123; ... plugin:[ new InlineChunkHtmlPlugin(HtmlWebpackPlugin,[/runtime.+\\.js/]&#125; 三、总结关于webpack对前端性能的优化，可以通过文件体积大小入手，其次还可通过分包的形式、减少http请求次数等方式，实现对前端性能的优化","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说Webpack Proxy工作原理？为什么能解决跨域?","slug":"Webpack.说说Webpack Proxy工作原理？为什么能解决跨域_","date":"2022-08-05T06:12:04.599Z","updated":"2022-08-05T06:14:50.616Z","comments":true,"path":"2022/08/05/Webpack.说说Webpack Proxy工作原理？为什么能解决跨域_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4Webpack%20Proxy%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F_/","excerpt":"","text":"说说Webpack Proxy工作原理？为什么能解决跨域? 一、是什么webpack proxy，即webpack提供的代理服务 基本行为就是接收客户端发送的请求后转发给其他服务器 其目的是为了便于开发者在开发模式下解决跨域问题（浏览器安全策略限制） 想要实现代理首先需要一个中间服务器，webpack中提供服务器的工具为webpack-dev-server webpack-dev-serverwebpack-dev-server是 webpack 官方推出的一款开发工具，将自动编译和自动刷新浏览器等一系列对开发友好的功能全部集成在了一起 目的是为了提高开发者日常的开发效率，「只适用在开发阶段」 关于配置方面，在webpack配置对象属性中通过devServer属性提供，如下： 1234567891011121314151617// ./webpack.config.jsconst path = require(&#x27;path&#x27;)module.exports = &#123; // ... devServer: &#123; contentBase: path.join(__dirname, &#x27;dist&#x27;), compress: true, port: 9000, proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;https://api.github.com&#x27; &#125; &#125; // ... &#125;&#125; devServetr里面proxy则是关于代理的配置，该属性为对象的形式，对象中每一个属性就是一个代理的规则匹配 属性的名称是需要被代理的请求路径前缀，一般为了辨别都会设置前缀为/api，值为对应的代理匹配规则，对应如下： target：表示的是代理到的目标地址 pathRewrite：默认情况下，我们的 /api-hy 也会被写入到URL中，如果希望删除，可以使用pathRewrite secure：默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false changeOrigin：它表示是否更新代理后请求的 headers 中host地址 二、工作原理proxy工作原理实质上是利用http-proxy-middleware 这个http代理中间件，实现请求转发给其他服务器 举个例子： 在开发阶段，本地地址为http://localhost:3000，该浏览器发送一个前缀带有/api标识的请求到服务端获取数据，但响应这个请求的服务器只是将请求转发到另一台服务器中 123456789const express = require(&#x27;express&#x27;);const proxy = require(&#x27;http-proxy-middleware&#x27;);const app = express();app.use(&#x27;/api&#x27;, proxy(&#123;target: &#x27;http://www.example.org&#x27;, changeOrigin: true&#125;));app.listen(3000);// http://localhost:3000/api/foo/bar -&gt; http://www.example.org/api/foo/bar 三、跨域在开发阶段， webpack-dev-server 会启动一个本地开发服务器，所以我们的应用在开发阶段是独立运行在 localhost的一个端口上，而后端服务又是运行在另外一个地址上 所以在开发阶段中，由于浏览器同源策略的原因，当本地访问后端就会出现跨域请求的问题 通过设置webpack proxy实现代理请求后，相当于浏览器与服务端中添加一个代理者 当本地发送请求的时候，代理服务器响应该请求，并将请求转发到目标服务器，目标服务器响应数据后再将数据返回给代理服务器，最终再由代理服务器将数据响应给本地 在代理服务器传递数据给本地浏览器的过程中，两者同源，并不存在跨域行为，这时候浏览器就能正常接收数据 注意：「服务器与服务器之间请求数据并不会存在跨域行为，跨域行为是浏览器安全策略限制」","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说Webpack的热更新是如何做到的？原理是什么？","slug":"Webpack.说说Webpack的热更新是如何做到的？原理是什么？","date":"2022-08-05T06:12:04.559Z","updated":"2022-08-05T06:14:40.884Z","comments":true,"path":"2022/08/05/Webpack.说说Webpack的热更新是如何做到的？原理是什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4Webpack%E7%9A%84%E7%83%AD%E6%9B%B4%E6%96%B0%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E7%9A%84%EF%BC%9F%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"说说Webpack的热更新是如何做到的？原理是什么？ 一、是什么HMR全称 Hot Module Replacement，可以理解为模块热替换，指在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个应用 例如，我们在应用运行过程中修改了某个模块，通过自动刷新会导致整个应用的整体刷新，那页面中的状态信息都会丢失 如果使用的是 HMR，就可以实现只将修改的模块实时替换至应用中，不必完全刷新整个应用 在webpack中配置开启热模块也非常的简单，如下代码： 123456789const webpack = require(&#x27;webpack&#x27;)module.exports = &#123; // ... devServer: &#123; // 开启 HMR 特性 hot: true // hotOnly: true &#125;&#125; 通过上述这种配置，如果我们修改并保存css文件，确实能够以不刷新的形式更新到页面中 但是，当我们修改并保存js文件之后，页面依旧自动刷新了，这里并没有触发热模块 所以，HMR并不像 Webpack 的其他特性一样可以开箱即用，需要有一些额外的操作 我们需要去指定哪些模块发生更新时进行HRM，如下代码： 12345if(module.hot)&#123; module.hot.accept(&#x27;./util.js&#x27;,()=&gt;&#123; console.log(&quot;util.js更新了&quot;) &#125;)&#125; 二、实现原理首先来看看一张图，如下： Webpack Compile：将 JS 源代码编译成 bundle.js HMR Server：用来将热更新的文件输出给 HMR Runtime Bundle Server：静态资源文件服务器，提供文件访问路径 HMR Runtime：socket服务器，会被注入到浏览器，更新文件的变化 bundle.js：构建输出的文件 在HMR Runtime 和 HMR Server之间建立 websocket，即图上4号线，用于实时更新文件变化 上面图中，可以分成两个阶段： 启动阶段为上图 1 - 2 - A - B 在编写未经过webpack打包的源代码后，Webpack Compile 将源代码和 HMR Runtime 一起编译成 bundle文件，传输给Bundle Server 静态资源服务器 更新阶段为上图 1 - 2 - 3 - 4 当某一个文件或者模块发生变化时，webpack监听到文件变化对文件重新编译打包，编译生成唯一的hash值，这个hash值用来作为下一次热更新的标识 根据变化的内容生成两个补丁文件：manifest（包含了 hash 和 chundId，用来说明变化的内容）和chunk.js 模块 由于socket服务器在HMR Runtime 和 HMR Server之间建立 websocket链接，当文件发生改动的时候，服务端会向浏览器推送一条消息，消息包含文件改动后生成的hash值，如下图的h属性，作为下一次热更新的标识 在浏览器接受到这条消息之前，浏览器已经在上一次socket 消息中已经记住了此时的hash 标识，这时候我们会创建一个 ajax 去服务端请求获取到变化内容的 manifest 文件 mainfest文件包含重新build生成的hash值，以及变化的模块，对应上图的c属性 浏览器根据 manifest 文件获取模块变化的内容，从而触发render流程，实现局部模块更新 三、总结关于webpack热模块更新的总结如下： 通过webpack-dev-server创建两个服务器：提供静态资源的服务（express）和Socket服务 express server 负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析） socket server 是一个 websocket 的长连接，双方可以通信 当 socket server 监听到对应的模块发生变化时，会生成两个文件.json（manifest文件）和.js文件（update chunk） 通过长连接，socket server 可以直接将这两个文件主动发送给客户端（浏览器） 浏览器拿到两个新的文件后，通过HMR runtime机制，加载这两个文件，并且针对修改的模块进行更新","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说Webpack中Loader和Plugin的区别？编写Loader，Plugin的思路？","slug":"Webpack.说说Webpack中Loader和Plugin的区别？编写Loader，Plugin的思路？","date":"2022-08-05T06:12:04.515Z","updated":"2022-08-05T06:14:21.593Z","comments":true,"path":"2022/08/05/Webpack.说说Webpack中Loader和Plugin的区别？编写Loader，Plugin的思路？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4Webpack%E4%B8%ADLoader%E5%92%8CPlugin%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E7%BC%96%E5%86%99Loader%EF%BC%8CPlugin%E7%9A%84%E6%80%9D%E8%B7%AF%EF%BC%9F/","excerpt":"","text":"说说Webpack中Loader和Plugin的区别？编写Loader，Plugin的思路？ 一、区别前面两节我们有提到Loader与Plugin对应的概念，先来回顾下 loader 是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中 plugin 赋予了 webpack 各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader 无法实现的其他事 从整个运行时机上来看，如下图所示： 可以看到，两者在运行时机上的区别： loader 运行在打包文件之前 plugins 在整个编译周期都起作用 在Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过Webpack提供的 API改变输出结果 对于loader，实质是一个转换器，将A文件进行编译形成B文件，操作的是文件，比如将A.scss或A.less转变为B.css，单纯的文件转换过程 二、编写loader在编写 loader 前，我们首先需要了解 loader 的本质 其本质为函数，函数中的 this 作为上下文会被 webpack 填充，因此我们不能将 loader设为一个箭头函数 函数接受一个参数，为 webpack 传递给 loader 的文件源内容 函数中 this 是由 webpack 提供的对象，能够获取当前 loader 所需要的各种信息 函数中有异步操作或同步操作，异步操作通过 this.callback 返回，返回值要求为 string 或者 Buffer 代码如下所示： 1234567891011121314151617181920// 导出一个函数，source为webpack传递给loader的文件源内容module.exports = function(source) &#123; const content = doSomeThing2JsString(source); // 如果 loader 配置了 options 对象，那么this.query将指向 options const options = this.query; // 可以用作解析其他模块路径的上下文 console.log(&#x27;this.context&#x27;); /* * this.callback 参数： * error：Error | null，当 loader 出错时向外抛出一个 error * content：String | Buffer，经过 loader 编译后需要导出的内容 * sourceMap：为方便调试生成的编译后内容的 source map * ast：本次编译生成的 AST 静态语法树，之后执行的 loader 可以直接使用这个 AST，进而省去重复生成 AST 的过程 */ this.callback(null, content); // 异步 return content; // 同步&#125; 一般在编写loader的过程中，保持功能单一，避免做多种功能 如less文件转换成 css文件也不是一步到位，而是 less-loader、css-loader、style-loader几个 loader的链式调用才能完成转换 三、编写plugin由于webpack基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务 在之前也了解过，webpack编译会创建两个核心对象： compiler：包含了 webpack 环境的所有的配置信息，包括 options，loader 和 plugin，和 webpack 整个生命周期相关的钩子 compilation：作为 plugin 内置事件回调函数的参数，包含了当前的模块资源、编译生成资源、变化的文件以及被跟踪依赖的状态信息。当检测到一个文件变化，一次新的 Compilation 将被创建 如果自己要实现plugin，也需要遵循一定的规范： 插件必须是一个函数或者是一个包含 apply 方法的对象，这样才能访问compiler实例 传给每个插件的 compiler 和 compilation 对象都是同一个引用，因此不建议修改 异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住 实现plugin的模板如下： 123456789101112class MyPlugin &#123; // Webpack 会调用 MyPlugin 实例的 apply 方法给插件实例传入 compiler 对象 apply (compiler) &#123; // 找到合适的事件钩子，实现自己的插件功能 compiler.hooks.emit.tap(&#x27;MyPlugin&#x27;, compilation =&gt; &#123; // compilation: 当前打包构建流程的上下文 console.log(compilation); // do something... &#125;) &#125;&#125; 在 emit 事件发生时，代表源文件的转换和组装已经完成，可以读取到最终将输出的资源、代码块、模块及其依赖，并且可以修改输出资源的内容","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说webpack中常见的Plugin？解决了什么问题？","slug":"Webpack.说说webpack中常见的Plugin？解决了什么问题？","date":"2022-08-05T06:12:04.477Z","updated":"2022-08-05T06:14:30.086Z","comments":true,"path":"2022/08/05/Webpack.说说webpack中常见的Plugin？解决了什么问题？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4webpack%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Plugin%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/","excerpt":"","text":"说说webpack中常见的Plugin？解决了什么问题？ 一、是什么Plugin（Plug-in）是一种计算机应用程序，它和主应用程序互相交互，以提供特定的功能 是一种遵循一定规范的应用程序接口编写出来的程序，只能运行在程序规定的系统下，因为其需要调用原纯净系统提供的函数库或者数据 webpack中的plugin也是如此，plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在 webpack 的不同阶段（钩子 / 生命周期），贯穿了webpack整个编译周期 目的在于解决loader 无法实现的其他事 配置方式这里讲述文件的配置方式，一般情况，通过配置文件导出对象中plugins属性传入new实例对象。如下所示： 123456789const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;); // 通过 npm 安装const webpack = require(&#x27;webpack&#x27;); // 访问内置的插件module.exports = &#123; ... plugins: [ new webpack.ProgressPlugin(), new HtmlWebpackPlugin(&#123; template: &#x27;./src/index.html&#x27; &#125;), ],&#125;; 二、特性其本质是一个具有apply方法javascript对象 apply 方法会被 webpack compiler调用，并且在整个编译生命周期都可以访问 compiler对象 1234567891011const pluginName = &#x27;ConsoleLogOnBuildWebpackPlugin&#x27;;class ConsoleLogOnBuildWebpackPlugin &#123; apply(compiler) &#123; compiler.hooks.run.tap(pluginName, (compilation) =&gt; &#123; console.log(&#x27;webpack 构建过程开始！&#x27;); &#125;); &#125;&#125;module.exports = ConsoleLogOnBuildWebpackPlugin; compiler hook 的 tap方法的第一个参数，应是驼峰式命名的插件名称 关于整个编译生命周期钩子，有如下： entry-option ：初始化 option run compile：真正开始的编译，在创建 compilation 对象之前 compilation ：生成好了 compilation 对象 make 从 entry 开始递归分析依赖，准备对每个模块进行 build after-compile：编译 build 过程结束 emit ：在将内存中 assets 内容写到磁盘文件夹之前 after-emit ：在将内存中 assets 内容写到磁盘文件夹之后 done：完成所有的编译过程 failed：编译失败的时候 三、常见的Plugin常见的plugin有如图所示： 下面介绍几个常用的插件用法： HtmlWebpackPlugin在打包结束后，⾃动生成⼀个 html ⽂文件，并把打包生成的js 模块引⼊到该 html 中 1234567891011121314151617181920212223242526npm install --save-dev html-webpack-plugin// webpack.config.jsconst HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);module.exports = &#123; ... plugins: [ new HtmlWebpackPlugin(&#123; title: &quot;My App&quot;, filename: &quot;app.html&quot;, template: &quot;./src/html/index.html&quot; &#125;) ]&#125;;&lt;!--./src/html/index.html--&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;&lt;%=htmlWebpackPlugin.options.title%&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;html-webpack-plugin&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 在 html 模板中，可以通过 &lt;%=htmlWebpackPlugin.options.XXX%&gt; 的方式获取配置的值 更多的配置可以自寻查找 clean-webpack-plugin删除（清理）构建目录 12345678910npm install --save-dev clean-webpack-pluginconst &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;);module.exports = &#123; ... plugins: [ ..., new CleanWebpackPlugin(), ... ]&#125; mini-css-extract-plugin提取 CSS 到一个单独的文件中 1234567891011121314151617181920212223242526npm install --save-dev mini-css-extract-pluginconst MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);module.exports = &#123; ..., module: &#123; rules: [ &#123; test: /\\.s[ac]ss$/, use: [ &#123; loader: MiniCssExtractPlugin.loader &#125;, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27; ] &#125; ] &#125;, plugins: [ ..., new MiniCssExtractPlugin(&#123; filename: &#x27;[name].css&#x27; &#125;), ... ]&#125; DefinePlugin允许在编译时创建配置的全局对象，是一个webpack内置的插件，不需要安装 12345678910const &#123; DefinePlugun &#125; = require(&#x27;webpack&#x27;)module.exports = &#123; ... plugins:[ new DefinePlugin(&#123; BASE_URL:&#x27;&quot;./&quot;&#x27; &#125;) ]&#125; 这时候编译template模块的时候，就能通过下述形式获取全局对象 1&lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL%&gt;favicon.ico&gt;&quot; copy-webpack-plugin复制文件或目录到执行区域，如vue的打包过程中，如果我们将一些文件放到public的目录下，那么这个目录会被复制到dist文件夹中 12345678910111213npm install copy-webpack-plugin -Dnew CopyWebpackPlugin(&#123; parrerns:[ &#123; from:&quot;public&quot;, globOptions:&#123; ignore:[ &#x27;**/index.html&#x27; ] &#125; &#125; ]&#125;) 复制的规则在patterns属性中设置： from：设置从哪一个源中开始复制 to：复制到的位置，可以省略，会默认复制到打包的目录下 globOptions：设置一些额外的选项，其中可以编写需要忽略的文件","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"说说Webpack中常见的Loader？解决了什么问题？","slug":"Webpack.说说Webpack中常见的Loader？解决了什么问题？","date":"2022-08-05T06:12:04.441Z","updated":"2022-08-05T06:14:35.976Z","comments":true,"path":"2022/08/05/Webpack.说说Webpack中常见的Loader？解决了什么问题？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/Webpack.%E8%AF%B4%E8%AF%B4Webpack%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Loader%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/","excerpt":"","text":"说说Webpack中常见的Loader？解决了什么问题？ 一、是什么loader 用于对模块的源代码进行转换，在 import 或”加载”模块时预处理文件 webpack做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。如下图所示： 在webpack内部中，任何文件都是模块，不仅仅只是js文件 默认情况下，在遇到import或者load加载模块的时候，webpack只支持对js文件打包 像css、sass、png等这些类型的文件的时候，webpack则无能为力，这时候就需要配置对应的loader进行文件内容的解析 在加载模块的时候，执行顺序如下： 当 webpack 碰到不识别的模块的时候，webpack 会在配置的中查找该文件解析规则 关于配置loader的方式有三种： 配置方式（推荐）：在 webpack.config.js文件中指定 loader 内联方式：在每个 import 语句中显式指定 loader CLI 方式：在 shell 命令中指定它们 配置方式关于loader的配置，我们是写在module.rules属性中，属性介绍如下： rules是一个数组的形式，因此我们可以配置很多个loader 每一个loader对应一个对象的形式，对象属性test 为匹配的规则，一般情况为正则表达式 属性use针对匹配到文件类型，调用对应的 loader 进行处理 代码编写，如下形式： 12345678910111213141516171819module.exports = &#123; module: &#123; rules: [ &#123; test: /\\.css$/, use: [ &#123; loader: &#x27;style-loader&#x27; &#125;, &#123; loader: &#x27;css-loader&#x27;, options: &#123; modules: true &#125; &#125;, &#123; loader: &#x27;sass-loader&#x27; &#125; ] &#125; ] &#125;&#125;; 二、特性这里继续拿上述代码，来讲讲loader的特性 从上述代码可以看到，在处理css模块的时候，use属性中配置了三个loader分别处理css文件 因为loader支持链式调用，链中的每个loader会处理之前已处理过的资源，最终变为js代码。顺序为相反的顺序执行，即上述执行方式为sass-loader、css-loader、style-loader 除此之外，loader的特性还有如下： loader 可以是同步的，也可以是异步的 loader 运行在 Node.js 中，并且能够执行任何操作 除了常见的通过 package.json 的 main 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 loader 字段直接引用一个模块 插件(plugin)可以为 loader 带来更多特性 loader 能够产生额外的任意文件 可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言翻译和更多其他特性 三、常见的loader在页面开发过程中，我们经常性加载除了js文件以外的内容，这时候我们就需要配置响应的loader进行加载 常见的loader如下： style-loader: 将css添加到DOM的内联样式标签style里 css-loader :允许将css文件通过require的方式引入，并返回css代码 less-loader: 处理less sass-loader: 处理sass postcss-loader: 用postcss来处理CSS autoprefixer-loader: 处理CSS3属性前缀，已被弃用，建议直接使用postcss file-loader: 分发文件到output目录并返回相对路径 url-loader: 和file-loader类似，但是当文件小于设定的limit时可以返回一个Data Url html-minify-loader: 压缩HTML babel-loader :用babel来转换ES6文件到ES 下面给出一些常见的loader的使用： css-loader分析 css 模块之间的关系，并合成⼀个 css 123456789101112131415161718npm install --save-dev css-loaderrules: [ ..., &#123; test: /\\.css$/, use: &#123; loader: &quot;css-loader&quot;, options: &#123; // 启用/禁用 url() 处理 url: true, // 启用/禁用 @import 处理 import: true, // 启用/禁用 Sourcemap sourceMap: false &#125; &#125; &#125;] 如果只通过css-loader加载文件，这时候页面代码设置的样式并没有生效 原因在于，css-loader只是负责将.css文件进行一个解析，而并不会将解析后的css插入到页面中 如果我们希望再完成插入style的操作，那么我们还需要另外一个loader，就是style-loader style-loader把 css-loader 生成的内容，用 style 标签挂载到页面的 head 中 12345678npm install --save-dev style-loaderrules: [ ..., &#123; test: /\\.css$/, use: [&quot;style-loader&quot;, &quot;css-loader&quot;] &#125;] 同一个任务的 loader 可以同时挂载多个，处理顺序为：从右到左，从下往上 less-loader开发中，我们也常常会使用less、sass、stylus预处理器编写css样式，使开发效率提高，这里需要使用less-loader 12345678npm install less-loader -Drules: [ ..., &#123; test: /\\.css$/, use: [&quot;style-loader&quot;, &quot;css-loader&quot;,&quot;less-loader&quot;] &#125;] raw-loader在 webpack中通过 import方式导入文件内容，该loader并不是内置的，所以首先要安装 1npm install --save-dev raw-loader 然后在 webpack.config.js 中进行配置 1234567891011module.exports = &#123; ..., module: &#123; rules: [ &#123; test: /\\.(txt|md)$/, use: &#x27;raw-loader&#x27; &#125; ] &#125;&#125; jsfile-loader把识别出的资源模块，移动到指定的输出⽬目录，并且返回这个资源在输出目录的地址(字符串) 12345678910111213141516171819npm install --save-dev file-loaderrules: [ ..., &#123; test: /\\.(png|jpe?g|gif)$/, use: &#123; loader: &quot;file-loader&quot;, options: &#123; // placeholder 占位符 [name] 源资源模块的名称 // [ext] 源资源模块的后缀 name: &quot;[name]_[hash].[ext]&quot;, //打包后的存放位置 outputPath: &quot;./images&quot;, // 打包后文件的 url publicPath: &#x27;./images&#x27;, &#125; &#125; &#125;] url-loader可以处理理 file-loader 所有的事情，但是遇到图片格式的模块，可以选择性的把图片转成 base64 格式的字符串，并打包到 js 中，对小体积的图片比较合适，大图片不合适。 123456789101112131415161718192021npm install --save-dev url-loaderrules: [ ..., &#123; test: /\\.(png|jpe?g|gif)$/, use: &#123; loader: &quot;url-loader&quot;, options: &#123; // placeholder 占位符 [name] 源资源模块的名称 // [ext] 源资源模块的后缀 name: &quot;[name]_[hash].[ext]&quot;, //打包后的存放位置 outputPath: &quot;./images&quot; // 打包后文件的 url publicPath: &#x27;./images&#x27;, // 小于 100 字节转成 base64 格式 limit: 100 &#125; &#125; &#125;]","categories":[{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"}],"tags":[]},{"title":"设计模式-如何理解工厂模式?","slug":"设计模式.如何理解工厂模式_","date":"2022-08-05T06:09:39.733Z","updated":"2022-08-05T07:24:03.574Z","comments":true,"path":"2022/08/05/设计模式.如何理解工厂模式_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F_/","excerpt":"","text":"设计模式-如何理解工厂模式?设计模式-如何理解工厂模式? 定义: 创建对象的接口，让子类决定实例化哪个类。工厂方法将类的实例化延迟到子类,而子类可以重写接口方法以便创建的时候指定自己的对象类型。 适用场景需要根据不同参数产生不同实例，这些实例都有相同的行为,这时候我们可以使用工厂模式，简化实现的过程，同时也可以减少每种对象所需的代码量。工厂模式有利于消除对象间的耦合，提供更大的灵活性 代码理解: 123456789// 下方就是一个典型的工厂模式// 首先创建对象的接口const productManager = &#123;&#125;;productManager.createProductA = function () &#123; console.log(&#x27;ProductA&#x27;);&#125;productManager.createProductB = function () &#123; console.log(&#x27;ProductB&#x27;);&#125;productManager.factory = function (type) &#123; // 工厂方法将类的实例化延迟到子类 return new productManager[type];&#125;// 让子类决定实例化哪个类productManager.factory(&quot;createProductA&quot;); 如果还不理解的话，那我们就再详细一点咯，假如我们想在网页面里插入一些元素，而这些元素类型不固定，可能是图片，也有可能是连接，甚至可能是文本，根据工厂模式的定义，我们需要定义工厂类和相应的子类，我们先来定义子类的具体实现（也就是子函数） 12345678910111213141516171819202122232425var page = page || &#123;&#125;;page.dom = page.dom || &#123;&#125;;//子函数1：处理文本page.dom.Text = function () &#123; this.insert = function (where) &#123; var txt = document.createTextNode(this.url); where.appendChild(txt); &#125;;&#125;;//子函数2：处理链接page.dom.Link = function () &#123; this.insert = function (where) &#123; var link = document.createElement(&#x27;a&#x27;); link.href = this.url; link.appendChild(document.createTextNode(this.url)); where.appendChild(link); &#125;;&#125;;//子函数3：处理图片page.dom.Image = function () &#123; this.insert = function (where) &#123; var im = document.createElement(&#x27;img&#x27;); im.src = this.url; where.appendChild(im); &#125;;&#125;; 那么我们如何定义工厂处理函数呢？其实很简单： 123page.dom.factory = function (type) &#123; return new page.dom[type];&#125; 使用方式如下： 123var o = page.dom.factory(&#x27;Link&#x27;);o.url = &#x27;http://www.cnblogs.com&#x27;;o.insert(document.body); 熟悉的jqueryjQuery中的$()其实就是一个工厂函数，它根据传入参数的不同创建元素或者去寻找上下文中的元素，创建成相应的jQuery对象 1234567891011121314151617181920212223// https://github.com/jquery/jquery/blob/master/src/core/init.jsinit = jQuery.fn.init = function (selector, context, root) &#123; var match, elem; // HANDLE: $(&quot;&quot;), $(null), $(undefined), $(false) if (!selector) &#123; return this; &#125; // Method init() accepts an alternate rootjQuery // so migrate can support jQuery.sub (gh-2101) root = root || rootjQuery; // Handle HTML strings if (typeof selector === &quot;string&quot;) &#123; //... // HANDLE: $(DOMElement) &#125; else if (selector.nodeType) &#123; //.... // HANDLE: $(function) // Shortcut for document ready &#125; else if (jQuery.isFunction(selector)) &#123; //.... &#125; return jQuery.makeArray(selector, this);&#125;; 总结优点 工厂类含有必要的判断逻辑, 实现了对责任的分割，它提供了专门的工厂类用于创建对象 用户只需要关心所需产品对应的工厂，无须关心创建细节 在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口,符合“开闭原则” 缺点 添加新产品时，需要编写新的具体产品类,一定程度上增加了系统的复杂度 考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[]},{"title":"说说你对链表的理解？常见的操作有哪些？","slug":"算法.说说你对链表的理解？常见的操作有哪些？","date":"2022-08-05T06:05:46.240Z","updated":"2022-08-05T07:24:10.604Z","comments":true,"path":"2022/08/05/算法.说说你对链表的理解？常见的操作有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E9%93%BE%E8%A1%A8%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对链表的理解？常见的操作有哪些？ 一、是什么链表（Linked List）是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的，由一系列结点（链表中每一个元素称为结点）组成 每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域 节点用代码表示，则如下： 123456class Node &#123; constructor(val) &#123; this.val = val; this.next = null; &#125;&#125; data 表示节点存放的数据 next 表示下一个节点指向的内存空间 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1) 链表的结构也十分多，常见的有四种形式： 单链表：拥有两个特殊节点，头节点和尾节点，每个节点包含一个后继指针 循环链表：跟单链表唯一的区别就在于它的尾结点又指回了链表的头结点，首尾相连，形成了一个环 双向链表：每个结点具有两个方向指针，后继指针(next)指向后面的结点，前驱指针(prev)指向前面的结点，其中节点的前驱指针和尾结点的后继指针均指向空地址NULL 双向循环链表：跟双向链表基本一致，不过头节点前驱指针指向尾迹诶单和尾节点的后继指针指向头节点 二、操作关于链表的操作可以主要分成如下： 遍历 插入 删除 遍历遍历很好理解，就是根据next指针遍历下去，直到为null，如下： 12345let current = headwhile(current)&#123; console.log(current.val) current = current.next&#125; 插入向链表中间插入一个元素，可以如下图所示： 可以看到，插入节点可以分成如下步骤： 存储插入位置的前一个节点 存储插入位置的后一个节点 将插入位置的前一个节点的 next 指向插入节点 将插入节点的 next 指向前面存储的 next 节点 相关代码如下所示： 1234567let current = headwhile (current &lt; position)&#123; pervious = current; current = current.next;&#125;pervious.next = node;node.next = current; 如果在头节点进行插入操作的时候，会实现previousNode节点为undefined，不适合上述方式 解放方式可以是在头节点前面添加一个虚拟头节点，保证插入行为一致 删除向链表任意位置删除节点，如下图操作： 从上图可以看到删除节点的步骤为如下： 获取删除节点的前一个节点 获取删除节点的后一个节点 将前一个节点的 next 指向后一个节点 向删除节点的 next 指向为null 如果想要删除制定的节点，示意代码如下： 123456while (current != node)&#123; pervious = current; current = current.next; nextNode = current.next;&#125;pervious.next = nextNode 同样如何希望删除节点处理行为一致，可以在头节点前面添加一个虚拟头节点 三、应用场景缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等 当缓存空间被用满时，我们可能会使用LRU最近最好使用策略去清楚，而实现LRU算法的数据结构是链表，思路如下： 维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头部开始顺序遍历链表 如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据的对应结点，并将其从原来的位置删除，并插入到链表头部 如果此数据没在缓存链表中 如果此时缓存未满，可直接在链表头部插入新节点存储此数据 如果此时缓存已满，则删除链表尾部节点，再在链表头部插入新节点 由于链表插入删除效率极高，达到O(1)。对于不需要搜索但变动频繁且无法预知数量上限的数据的情况的时候，都可以使用链表","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对数据结构的理解？有哪些？区别？","slug":"算法.说说你对数据结构的理解？有哪些？区别？","date":"2022-08-05T06:05:46.165Z","updated":"2022-08-05T07:24:15.481Z","comments":true,"path":"2022/08/05/算法.说说你对数据结构的理解？有哪些？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说你对数据结构的理解？有哪些？区别？ 一、是什么数据结构是计算机存储、组织数据的方式，是指相互之间存在一种或多种特定关系的数据元素的集合 前面讲到，一个程序 = 算法 + 数据结构，数据结构是实现算法的基础，选择合适的数据结构可以带来更高的运行或者存储效率 数据元素相互之间的关系称为结构，根据数据元素之间关系的不同特性，通常有如下四类基本的结构： 集合结构：该结构的数据元素间的关系是“属于同一个集合” 线性结构：该结构的数据元素之间存在着一对一的关系 树型结构：该结构的数据元素之间存在着一对多的关系 图形结构：该结构的数据元素之间存在着多对多的关系，也称网状结构 由于数据结构种类太多，逻辑结构可以再分成为： 线性结构：有序数据元素的集合，其中数据元素之间的关系是一对一的关系，除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的 非线性结构：各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生关联 二、有哪些常见的数据结构有如下： 数组 栈 队列 链表 树 图 堆 散列表 数组在程序设计中，为了处理方便， 一般情况把具有相同类型的若干变量按有序的形式组织起来，这些按序排列的同类数据元素的集合称为数组 栈一种特殊的线性表，只能在某一端插入和删除的特殊线性表，按照先进后出的特性存储数据 先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据 队列跟栈基本一致，也是一种特殊的线性表，其特性是先进先出，只允许在表的前端进行删除操作，而在表的后端进行插入操作 链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的 链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成 一般情况，每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域 树树是典型的非线性结构，在树的结构中，有且仅有一个根结点，该结点没有前驱结点。在树结构中的其他结点都有且仅有一个前驱结点，而且可以有两个以上的后继结点 图一种非线性结构。在图形结构中，数据结点一般称为顶点，而边是顶点的有序偶对。如果两个顶点之间存在一条边，那么就表示这两个顶点具有相邻关系 堆堆是一种特殊的树形数据结构，每个结点都有一个值，特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆 散列表若结构中存在关键字和K相等的记录，则必定在f(K)的存储位置上，不需比较便可直接取得所查记录 三、区别上述的数据结构，之前的区别可以分成线性结构和非线性结构： 线性结构有：数组、栈、队列、链表等 非线性结构有：树、图、堆等","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对算法中时间复杂度，空间复杂度的理解？如何计算？","slug":"算法.说说你对算法中时间复杂度，空间复杂度的理解？如何计算？","date":"2022-08-05T06:05:46.122Z","updated":"2022-08-05T07:24:21.311Z","comments":true,"path":"2022/08/05/算法.说说你对算法中时间复杂度，空间复杂度的理解？如何计算？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E7%AE%97%E6%B3%95%E4%B8%AD%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%EF%BC%9F/","excerpt":"","text":"说说你对算法中时间复杂度，空间复杂度的理解？如何计算？ 一、前言算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别 衡量不同算法之间的优劣主要是通过「时间」和「空间」两个维度去考量： 时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。 空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述 通常会遇到一种情况，时间和空间维度不能够兼顾，需要在两者之间取得一个平衡点是我们需要考虑的 一个算法通常存在最好、平均、最坏三种情况，我们一般关注的是最坏情况 最坏情况是算法运行时间的上界，对于某些算法来说，最坏情况出现的比较频繁，也意味着平均情况和最坏情况一样差 二、时间复杂度时间复杂度是指执行这个算法所需要的计算工作量，其复杂度反映了程序执行时间「随输入规模增长而增长的量级」，在很大程度上能很好地反映出算法的优劣与否 一个算法花费的时间与算法中语句的「执行次数成正比」，执行次数越多，花费的时间就越多 算法的复杂度通常用大O符号表述，定义为T(n) = O(f(n))，常见的时间复杂度有：O(1)常数型、O(log n)对数型、O(n)线性型、O(nlogn)线性对数型、O(n^2)平方型、O(n^3)立方型、O(n^k)k次方型、O(2^n)指数型，如下图所示： 从上述可以看到，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低，由小到大排序如下： 1Ο(1)＜Ο(log n)＜Ο(n)＜Ο(nlog n)＜Ο(n2)＜Ο(n3)＜…＜Ο(2^n)＜Ο(n!) 注意的是，算法复杂度只是描述算法的增长趋势，并不能说一个算法一定比另外一个算法高效，如果常数项过大的时候也会导致算法的执行时间变长 关于如何计算时间复杂度，可以看看如下简单例子： 123456789function process(n) &#123; let a = 1 let b = 2 let sum = a + b for(let i = 0; i &lt; n; i++) &#123; sum += i &#125; return sum&#125; 该函数算法需要执行的运算次数用输入大小n的函数表示，即 T(n) = 2 + n + 1，那么时间复杂度为O(n + 3)，又因为时间复杂度只关注最高数量级，且与之系数也没有关系，因此上述的时间复杂度为O(n) 又比如下面的例子： 12345678function process(n) &#123; let count = 0 for(let i = 0; i &lt; n; i++)&#123; for(let i = 0; i &lt; n; i++)&#123; count += 1 &#125; &#125;&#125; 循环里面嵌套循环，外面的循环执行一次，里面的循环执行n次，因此时间复杂度为 O(n*n*1 + 2) = O(n^2) 对于顺序执行的语句，总的时间复杂度等于其中最大的时间复杂度，如下： 123456789101112function process(n) &#123; let sum = 0 for(let i = 0; i &lt; n; i++) &#123; sum += i &#125; for(let i = 0; i &lt; n; i++)&#123; for(let i = 0; i &lt; n; i++)&#123; sum += 1 &#125; &#125; return sum&#125; 上述第一部分复杂度为O(n)，第二部分复杂度为O(n^2)，总复杂度为max(O(n^2), O(n)) = O(n^2) 又如下一个例子： 123456function process(n) &#123; let i = 1; // ① while (i &lt;= n) &#123; i = i * 2; // ② &#125;&#125; 循环语句中以2的倍数来逼近n，每次都乘以2。如果用公式表示就是1 * 2 * 2 * 2 … * 2 &lt;=n，也就是说2的x次方小于等于n时会执行循环体，记作2^x &lt;= n，于是得出x&lt;=logn 因此循环在执行logn次之后，便结束，因此时间复杂度为O(logn) 同理，如果一个O(n)循环里面嵌套O(logn)的循环，则时间复杂度为O(nlogn)，像O(n^3)无非也就是嵌套了三层O(n)循环 三、空间复杂度空间复杂度主要指执行算法所需内存的大小，用于对程序运行过程中所需要的临时存储空间的度量 除了需要存储空间、指令、常数、变量和输入数据外，还包括对数据进行操作的工作单元和存储计算所需信息的辅助空间 下面给出空间复杂度为O(1)的示例，如下 123let a = 1let b = 2let c = 3 上述代码的临时空间不会随着n的变化而变化，因此空间复杂度为O(1) 1234let arr []for(i=1; i&lt;=n; ++i)&#123; arr.push(i)&#125; 上述可以看到，随着n的增加，数组的占用的内存空间越大 通常来说，只要算法不涉及到动态分配的空间，以及递归、栈所需的空间，空间复杂度通常为O(1)，一个一维数组a[n]，空间复杂度O(n)，二维数组为O(n^2)","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对算法的理解？应用场景？","slug":"算法.说说你对算法的理解？应用场景？","date":"2022-08-05T06:05:46.085Z","updated":"2022-08-05T07:24:18.355Z","comments":true,"path":"2022/08/05/算法.说说你对算法的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对算法的理解？应用场景？ 一、是什么算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制 也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出 如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题 一个程序=算法+数据结构，数据结构是算法实现的基础，算法总是要依赖于某种数据结构来实现的，两者不可分割 因此，算法的设计和选择要同时结合数据结构，简单地说数据结构的设计就是选择存储方式，如确定问题中的信息是用数组存储还是用普通的变量存储或其他更加复杂的数据结构 针对上述，可以得出一个总结：不同的算法可能用不同的时间、空间或效率来完成同样的任务 二、特性关于算法的五大特性，有如下： 有限性（Finiteness）：一个算法必须保证执行有限步之后结束 确切性（Definiteness）：一个算法的每一步骤必须有确切的定义 输入（Input）：一个算法有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身给定了初始条件 输出（Output）：一个算法有一个或多个输出。没有输出的算法毫无意义 可行性（Effectiveness）：算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步骤，即每个计算步骤都可以在有限时间内完成（也称之为有效性） 三、应用场景在前端领域中，数据结构与算法无法不在，例如现在的vue或者react项目，实现虚拟DOM或者Fiber结构，本质就是一种数据结构，如下一个简单的虚拟DOM： 1234567891011&#123; type: &#x27;div&#x27;, props: &#123; name: &#x27;lucifer&#x27; &#125;, children: [&#123; type: &#x27;span&#x27;, props: &#123;&#125;, children: [] &#125;]&#125; vue与react都能基于基于对应的数据结构实现diff算法，提高了整个框架的性能以及拓展性 包括在前端javascript编译的时候，都会生成对应的抽象语法树AST，其本身不涉及到任何语法，因此你只要编写相应的转义规则，就可以将任何语法转义到任何语法，也是babel， PostCSS, prettier， typescript 除了这些框架或者工具底层用到算法与数据结构之外，日常业务也无处不在，例如实现一个输入框携带联想功能，如下： 如果我们要实现这个功能， 则可以使用前缀树，如下： 包括前端可能会做一些对字符串进行相似度检测，例如”每日一题”和”js每日一题”两个字符串进行相似度对比，这种情况可以通过“最小编辑距离”算法，如果a和b的编辑距离越小，我们认为越相似 日常在编写任何代码的都需要一个良好的算法思维，选择好的算法或者数据结构，能让整个程序效率更高","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对图的理解？相关操作有哪些？","slug":"算法.说说你对图的理解？相关操作有哪些？","date":"2022-08-05T06:05:46.050Z","updated":"2022-08-05T07:24:24.294Z","comments":true,"path":"2022/08/05/算法.说说你对图的理解？相关操作有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E5%9B%BE%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对图的理解？相关操作有哪些？ 一、是什么在计算机科学中，图是一种抽象的数据类型，在图中的数据元素通常称为结点，V是所有顶点的集合，E是所有边的集合 如果两个顶点v,w，只能由v向w，而不能由w向v，那么我们就把这种情况叫做一个从 v 到 w 的有向边。v也被称做初始点，w也被称为终点。这种图就被称做有向图 如果v和w是没有顺序的，从v到达w和从w到达v是完全相同的，这种图就被称为无向图 图的结构比较复杂，任意两个顶点之间都可能存在联系，因此无法以数据元素在存储区中的物理位置来表示元素之间的关系 常见表达图的方式有如下： 邻接矩阵 邻接表 邻接矩阵通过使用一个二维数组G[N][N]进行表示N个点到N-1编号，通过邻接矩阵可以立刻看出两顶点之间是否存在一条边，只需要检查邻接矩阵行i和列j是否是非零值，对于无向图，邻接矩阵是对称的 邻接表存储方式如下图所示： 在javascript中，可以使用Object进行表示，如下： 123456789const graph = &#123; A: [2, 3, 5], B: [2], C: [0, 1, 3], D: [0, 2], E: [6], F: [0, 6], G: [4, 5]&#125; 图的数据结构还可能包含和每条边相关联的数值（edge value），例如一个标号或一个数值（即权重，weight；表示花费、容量、长度等） 二、操作关于图的操作常见的有： 深度优先遍历 广度优先遍历 首先构建一个图的邻接矩阵表示，如下面的图： 用代码表示则如下： 1234567const graph = &#123; 0: [1, 4], 1: [2, 4], 2: [2, 3], 3: [], 4: [3],&#125; 深度优先遍历也就是尽可能的往深处的搜索图的分支 实现思路是，首先应该确定一个根节点，然后对根节点的没访问过的相邻节点进行深度优先遍历 确定以 0 为根节点，然后进行深度遍历，然后遍历1，接着遍历 2，然后3，此时完成一条分支0 - 1- 2- 3的遍历，换一条分支，也就是4，4后面因为3已经遍历过了，所以就不访问了 用代码表示则如下： 12345678910const visited = new Set()const dfs = (n) =&gt; &#123; console.log(n) visited.add(n) // 访问过添加记录 graph[n].forEach(c =&gt; &#123; if(!visited.has(c))&#123; // 判断是否访问呢过 dfs(c) &#125; &#125;)&#125; 广度优先遍历先访问离根节点最近的节点，然后进行入队操作，解决思路如下： 新建一个队列，把根节点入队 把队头出队并访问 把队头的没访问过的相邻节点入队 重复二、三步骤，知道队列为空 用代码标识则如下： 123456789101112131415const visited = new Set()const dfs = (n) =&gt; &#123; visited.add(n) const q = [n] while(q.length)&#123; const n = q.shift() console.log(n) graph[n].forEach(c =&gt; &#123; if(!visited.has(c))&#123; q.push(c) visited.add(c) &#125; &#125;) &#125;&#125; 三、总结通过上面的初步了解，可以看到图就是由顶点的有穷非空集合和顶点之间的边组成的集合，分成了无向图与有向图 图的表达形式可以分成邻接矩阵和邻接表两种形式，在javascript中，则可以通过二维数组和对象的形式进行表达 图实际是很复杂的，后续还可以延伸出无向图和带权图，对应如下图所示：","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对堆的理解？如何实现？应用场景？","slug":"算法.说说你对堆的理解？如何实现？应用场景？","date":"2022-08-05T06:05:46.014Z","updated":"2022-08-05T07:24:05.914Z","comments":true,"path":"2022/08/05/算法.说说你对堆的理解？如何实现？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E5%A0%86%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对堆的理解？如何实现？应用场景？ 一、是什么堆(Heap)是计算机科学中一类特殊的数据结构的统称 堆通常是一个可以被看做一棵完全二叉树的数组对象，如下图： 总是满足下列性质： 堆中某个结点的值总是不大于或不小于其父结点的值 堆总是一棵完全二叉树 堆又可以分成最大堆和最小堆： 最大堆：每个根结点，都有根结点的值大于两个孩子结点的值 最小堆：每个根结点，都有根结点的值小于孩子结点的值 二、操作堆的元素存储方式，按照完全二叉树的顺序存储方式存储在一个一维数组中，如下图： 用一维数组存储则如下： 1[0, 1, 2, 3, 4, 5, 6, 7, 8] 根据完全二叉树的特性，可以得到如下特性： 数组零坐标代码的是堆顶元素 一个节点的父亲节点的坐标等于其坐标除以2整数部分 一个节点的左节点等于其本身节点坐标 * 2 + 1 一个节点的右节点等于其本身节点坐标 * 2 + 2 根据上述堆的特性，下面构建最小堆的构造函数和对应的属性方法： 12345678910111213141516171819202122232425262728293031323334353637class MinHeap &#123; constructor() &#123; // 存储堆元素 this.heap = [] &#125; // 获取父元素坐标 getParentIndex(i) &#123; return (i - 1) &gt;&gt; 1 &#125; // 获取左节点元素坐标 getLeftIndex(i) &#123; return i * 2 + 1 &#125; // 获取右节点元素坐标 getRightIndex(i) &#123; return i * 2 + 2 &#125; // 交换元素 swap(i1, i2) &#123; const temp = this.heap[i1] this.heap[i1] = this.heap[i2] this.heap[i2] = temp &#125; // 查看堆顶元素 peek() &#123; return this.heap[0] &#125; // 获取堆元素的大小 size() &#123; return this.heap.length &#125;&#125; 涉及到堆的操作有： 插入 删除 插入将值插入堆的底部，即数组的尾部，当插入一个新的元素之后，堆的结构就会被破坏，因此需要堆中一个元素做上移操作 将这个值和它父节点进行交换，直到父节点小于等于这个插入的值，大小为k的堆中插入元素的时间复杂度为O(logk) 如下图所示，22节点是新插入的元素，然后进行上移操作： 相关代码如下： 123456789101112131415// 插入元素insert(value) &#123; this.heap.push(value) this.shifUp(this.heap.length - 1)&#125;// 上移操作shiftUp(index) &#123; if (index === 0) &#123; return &#125; const parentIndex = this.getParentIndex(index) if(this.heap[parentIndex] &gt; this.heap[index])&#123; this.swap(parentIndex, index) this.shiftUp(parentIndex) &#125;&#125; 删除常见操作是用数组尾部元素替换堆顶，这里不直接删除堆顶，因为所有的元素会向前移动一位，会破坏了堆的结构 然后进行下移操作，将新的堆顶和它的子节点进行交换，直到子节点大于等于这个新的堆顶，删除堆顶的时间复杂度为O(logk) 整体如下图操作： 相关代码如下： 12345678910111213141516171819// 删除元素pop() &#123; this.heap[0] = this.heap.pop() this.shiftDown(0)&#125;// 下移操作shiftDown(index) &#123; const leftIndex = this.getLeftIndex(index) const rightIndex = this.getRightIndex(index) if (this.heap[leftIndex] &lt; this.heap[index])&#123; this.swap(leftIndex, index) this.shiftDown(leftIndex) &#125; if (this.heap[rightIndex] &lt; this.heap[index])&#123; this.swap(rightIndex, index) this.shiftDown(rightIndex) &#125;&#125; 时间复杂度关于堆的插入和删除时间复杂度都是Olog(n)，原因在于包含n个节点的完全二叉树，树的高度不会超过log2n 堆化的过程是顺着节点所在路径比较交换的，所以堆化的时间复杂度跟树的高度成正比，也就是Olog(n)，插入数据和删除堆顶元素的主要逻辑就是堆化 三、总结 堆是一个完全二叉树 堆中每一个节点的值都必须大于等于(或小于等于)其子树中每个节点的值 对于每个节点的值都大于等于子树中每个节点值的堆，叫作“大顶堆” 对于每个节点的值都小于等于子树中每个节点值的堆，叫作“小顶堆” 根据堆的特性，我们可以使用堆来进行排序操作，也可以使用其来求第几大或者第几小的值","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对树的理解？相关的操作有哪些？","slug":"算法.说说你对树的理解？相关的操作有哪些？","date":"2022-08-05T06:05:45.977Z","updated":"2022-08-05T07:24:13.342Z","comments":true,"path":"2022/08/05/算法.说说你对树的理解？相关的操作有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E6%A0%91%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对树的理解？相关的操作有哪些？ 一、是什么在计算机领域，树形数据结构是一类重要的非线性数据结构，可以表示数据之间一对多的关系。以树与二叉树最为常用，直观看来，树是以分支关系定义的层次结构 二叉树满足以下两个条件： 本身是有序树 树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2 如下图，左侧的为二叉树，而右侧的因为头结点的子结点超过2，因此不属于二叉树： 同时，二叉树可以继续进行分类，分成了满二叉树和完成二叉树： 满二叉树：如果二叉树中除了叶子结点，每个结点的度都为 2 完成二叉树：如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布 二、操作关于二叉树的遍历，常见的有： 前序遍历 中序遍历 后序遍历 层序遍历 前序遍历前序遍历的实现思想是： 访问根节点 访问当前节点的左子树 若当前节点无左子树，则访问当前节点的右子 根据遍历特性，递归版本用代码表示则如下： 123456const preOrder = (root) =&gt; &#123; if(!root)&#123; return &#125; console.log(root) preOrder(root.left) preOrder(root.right)&#125; 如果不使用递归版本，可以借助栈先进后出的特性实现，先将根节点压入栈，再分别压入右节点和左节点，直到栈中没有元素，如下： 1234567891011121314const preOrder = (root) =&gt; &#123; if(!root)&#123; return &#125; const stack = [root] while (stack.length) &#123; const n = stack.pop() console.log(n.val) if (n.right) &#123; stack.push(n.right) &#125; if (n.left) &#123; stack.push(n.left) &#125; &#125;&#125; 中序遍历前序遍历的实现思想是： 访问当前节点的左子树 访问根节点 访问当前节点的右子 递归版本很好理解，用代码表示则如下： 123456const inOrder = (root) =&gt; &#123; if (!root) &#123; return &#125; inOrder(root.left) console.log(root.val) inOrder(root.right)&#125; 非递归版本也是借助栈先进后出的特性，可以一直首先一直压入节点的左元素，当左节点没有后，才开始进行出栈操作，压入右节点，然后有依次压入左节点，如下： 1234567891011121314const inOrder = (root) =&gt; &#123; if (!root) &#123; return &#125; const stack = [root] let p = root while(stack.length || p)&#123; while (p) &#123; stack.push(p) p = p.left &#125; const n = stack.pop() console.log(n.val) p = n.right &#125;&#125; 后序遍历前序遍历的实现思想是： 访问当前节点的左子树 访问当前节点的右子 访问根节点 递归版本，用代码表示则如下： 123456const postOrder = (root) =&gt; &#123; if (!root) &#123; return &#125; postOrder(root.left) postOrder(root.right) console.log(n.val) &#125; 后序遍历非递归版本实际跟全序遍历是逆序关系，可以再多创建一个栈用来进行输出，如下： 12345678910111213141516171819const preOrder = (root) =&gt; &#123; if(!root)&#123; return &#125; const stack = [root] const outPut = [] while (stack.length) &#123; const n = stack.pop() outPut.push(n.val) if (n.right) &#123; stack.push(n.right) &#125; if (n.left) &#123; stack.push(n.left) &#125; &#125; while (outPut.length) &#123; const n = outPut.pop() console.log(n.val) &#125;&#125; 层序遍历按照二叉树中的层次从左到右依次遍历每层中的结点 借助队列先进先出的特性，从树的根结点开始，依次将其左孩子和右孩子入队。而后每次队列中一个结点出队，都将其左孩子和右孩子入队，直到树中所有结点都出队，出队结点的先后顺序就是层次遍历的最终结果 用代码表示则如下： 1234567891011121314151617const levelOrder = (root) =&gt; &#123; if (!root) &#123; return [] &#125; const queue = [[root, 0]] const res = [] while (queue.length) &#123; const n = queue.shift() const [node, leval] = n if (!res[leval]) &#123; res[leval] = [node.val] &#125; else &#123; res[leval].push(node.val) &#125; if (node.left) &#123; queue.push([node.left, leval + 1]) &#125; if (node.right) &#123; queue.push([node.right, leval + 1]) &#125; &#125; return res&#125;; 三、总结树是一个非常重要的非线性结构，其中二叉树以二叉树最常见，二叉树的遍历方式可以分成前序遍历、中序遍历、后序遍历 同时，二叉树又分成了完成二叉树和满二叉树","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"说说你对集合的理解？常见的操作有哪些？","slug":"算法.说说你对集合的理解？常见的操作有哪些？","date":"2022-08-05T06:05:45.936Z","updated":"2022-08-05T07:24:08.055Z","comments":true,"path":"2022/08/05/算法.说说你对集合的理解？常见的操作有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E9%9B%86%E5%90%88%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对集合的理解？常见的操作有哪些？ 一、是什么集合（Set），指具有某种特定性质的事物的总体，里面的每一项内容称作元素 在数学中，我们经常会遇到集合的概念： 有限集合：例如一个班级所有的同学构成的集合 无限集合：例如全体自然数集合 在计算机中集合道理也基本一致，具有三大特性： 确定性：于一个给定的集合，集合中的元素是确定的。即一个元素，或者属于该集合，或者不属于该集合，两者必居其一 无序性：在一个集合中，不考虑元素之间的顺序，只要元素完全相同，就认为是同一个集合 互异性：集合中任意两个元素都是不同的 二、操作在ES6中，集合本身是一个构建函数Set，用来生成 Set 数据结构，如下： 1const s = new Set(); 关于集合常见的方法有： add()：增 delete()：删 has()：改 clear()：查 add()添加某个值，返回 Set 结构本身 当添加实例中已经存在的元素，set不会进行处理添加 1s.add(1).add(2).add(2); // 2只被添加了一次 体现了集合的互异性特性 delete()删除某个值，返回一个布尔值，表示删除是否成功 1s.delete(1) has()返回一个布尔值，判断该值是否为Set的成员 1s.has(2) clear()清除所有成员，没有返回值 1s.clear() 关于多个集合常见的操作有： 并集 交集 差集 并集两个集合的共同元素，如下图所示： 代码实现方式如下： 123456let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// 并集let union = new Set([...a, ...b]);// Set &#123;1, 2, 3, 4&#125; 交集两个集合A 和 B，即属于A又属于B的元素，如下图所示： 用代码标识则如下： 123456let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// 交集let intersect = new Set([...a].filter(x =&gt; b.has(x)));// set &#123;2, 3&#125; 差集两个集合A 和 B，属于A的元素但不属于B的元素称为A相对于B的差集，如下图所示： 代码标识则如下： 123456let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// （a 相对于 b 的）差集let difference = new Set([...a].filter(x =&gt; !b.has(x)));// Set &#123;1&#125; 三、应用场景一般情况下，使用数组的概率会比集合概率高很多 使用set集合的场景一般是借助其确定性，其本身只包含不同的元素 所以，可以利用Set的一些原生方法轻松的完成数组去重，查找数组公共元素及不同元素等操作","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"如何理解CDN？说说实现原理？","slug":"http.如何理解CDN？说说实现原理？","date":"2022-08-05T05:57:10.307Z","updated":"2022-08-05T07:23:38.429Z","comments":true,"path":"2022/08/05/http.如何理解CDN？说说实现原理？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3CDN%EF%BC%9F%E8%AF%B4%E8%AF%B4%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/","excerpt":"","text":"如何理解CDN？说说实现原理？ 一、是什么CDN (全称 Content Delivery Network)，即内容分发网络 构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术 简单来讲，CDN就是根据用户位置分配最近的资源 于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫「边缘节点」，其实就是缓存了源站内容的代理服务器。如下图： 二、原理分析在没有应用CDN时，我们使用域名访问某一个站点时的路径为 用户提交域名→浏览器对域名进行解释→DNS 解析得到目的主机的IP地址→根据IP地址访问发出请求→得到请求数据并回复 应用CDN后，DNS 返回的不再是 IP 地址，而是一个CNAME(Canonical Name ) 别名记录，指向CDN的全局负载均衡 CNAME实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是CDN实现的关键 负载均衡系统由于没有返回IP地址，于是本地DNS会向负载均衡系统再发送请求 ，则进入到CDN的全局负载均衡系统进行智能调度： 看用户的 IP 地址，查表得知地理位置，找相对最近的边缘节点 看用户所在的运营商网络，找相同网络的边缘节点 检查边缘节点的负载情况，找负载较轻的节点 其他，比如节点的“健康状况”、服务能力、带宽、响应时间等 结合上面的因素，得到最合适的边缘节点，然后把这个节点返回给用户，用户就能够就近访问CDN的缓存代理 整体流程如下图： 缓存代理缓存系统是 CDN的另一个关键组成部分，缓存系统会有选择地缓存那些最常用的那些资源 其中有两个衡量CDN服务质量的指标： 命中率：用户访问的资源恰好在缓存系统里，可以直接返回给用户，命中次数与所有访问次数之比 回源率：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比 缓存系统也可以划分出层次，分成一级缓存节点和二级缓存节点。一级缓存配置高一些，直连源站，二级缓存配置低一些，直连用户 回源的时候二级缓存只找一级缓存，一级缓存没有才回源站，可以有效地减少真正的回源 现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上 三、总结CDN 目的是为了改善互联网的服务质量，通俗一点说其实就是提高访问速度 CDN 构建了全国、全球级别的专网，让用户就近访问专网里的边缘节点，降低了传输延迟，实现了网站加速 通过CDN的负载均衡系统，智能调度边缘节点提供服务，相当于CDN服务的大脑，而缓存系统相当于CDN的心脏，缓存命中直接返回给用户，否则回源","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"DNS 协议是什么？说说 DNS 完整的查询过程?","slug":"http.DNS 协议是什么？说说 DNS 完整的查询过程_","date":"2022-08-05T05:57:10.263Z","updated":"2022-08-05T06:05:19.831Z","comments":true,"path":"2022/08/05/http.DNS 协议是什么？说说 DNS 完整的查询过程_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.DNS%20%E5%8D%8F%E8%AE%AE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E8%AF%B4%E8%AF%B4%20DNS%20%E5%AE%8C%E6%95%B4%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B_/","excerpt":"","text":"DNS 协议是什么？说说 DNS 完整的查询过程? 一、是什么DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器 简单来讲，DNS相当于一个翻译官，负责将域名翻译成ip地址 IP 地址：一长串能够唯一地标记网络上的计算机的数字 域名：是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识 二、域名域名是一个具有层次的结构，从上到下一次为根域名、顶级域名、二级域名、三级域名… 例如www.xxx.com，www为三级域名、xxx为二级域名、com为顶级域名，系统为用户做了兼容，域名末尾的根域名.一般不需要输入 在域名的每一层都会有一个域名服务器，如下图： 除此之外，还有电脑默认的本地域名服务器 三、查询方式DNS 查询的方式有两种： 递归查询：如果 A 请求 B，那么 B 作为请求的接收者一定要给 A 想要的答案 迭代查询：如果接收者 B 没有请求者 A 所需要的准确内容，接收者 B 将告诉请求者 A，如何去获得这个内容，但是自己并不去发出请求 四、域名缓存在域名服务器解析的时候，使用缓存保存域名和IP地址的映射 计算机中DNS的记录也分成了两种缓存方式： 浏览器缓存：浏览器在获取网站域名的实际 IP 地址后会对其进行缓存，减少网络请求的损耗 操作系统缓存：操作系统的缓存其实是用户自己配置的 hosts 文件 五、查询过程解析域名的过程如下： 首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表 若没有命中，则继续搜索操作系统的 DNS 缓存 若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果 若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询 首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器 本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址 本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址 本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来 操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起 至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起 流程如下图所示：","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"如何理解TCP/IP协议?","slug":"http.如何理解TCPIP协议_","date":"2022-08-05T05:57:10.225Z","updated":"2022-08-05T07:23:33.031Z","comments":true,"path":"2022/08/05/http.如何理解TCPIP协议_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3TCPIP%E5%8D%8F%E8%AE%AE_/","excerpt":"","text":"如何理解TCP/IP协议? 一、是什么TCP/IP，「传输控制协议」/「网际协议」，是指能够在多个不同网络间实现信息传输的协议簇 TCP（传输控制协议） 一种面向连接的、可靠的、基于字节流的传输层通信协议 IP（网际协议） 用于封包交换数据网络的协议 TCP/IP协议不仅仅指的是TCP和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols） 二、划分TCP/IP协议族按层次分别了五层体系或者四层体系 五层体系的协议结构是综合了 OSI 和 TCP/IP 优点的一种协议，包括应用层、传输层、网络层、数据链路层和物理层 五层协议的体系结构只是为介绍网络原理而设计的，实际应用还是 TCP/IP 四层体系结构，包括应用层、传输层、网络层（网际互联层）、网络接口层 如下图所示： 五层体系应用层TCP/IP 模型将 OSI参考模型中的会话层、表示层和应用层的功能合并到一个应用层实现，通过不同的应用层协议为不同的应用提供服务 如：FTP、Telnet、DNS、SMTP 等 传输层该层对应于 OSI 参考模型的传输层，为上层实体提供源端到对端主机的通信功能 传输层定义了两个主要协议：传输控制协议（TCP）和用户数据报协议（UDP） 其中面向连接的 TCP 协议保证了数据的传输可靠性，面向无连接的 UDP 协议能够实现数据包简单、快速地传输 网络层负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机 在发送数据时，网络层把运输层产生的报文段或用户数据封装成分组或包进行传送 数据链路层数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报组装成帧，在两个相邻节点之间的链路上传送帧 物理层保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境 四层体系TCP/IP 的四层结构则如下表所示： 层次名称 单位 功 能 协 议 网络接口层 帧 负责实际数据的传输，对应OSI参考模型的下两层 HDLC（高级链路控制协议）PPP（点对点协议） SLIP（串行线路接口协议） 网络层 数据报 负责网络间的寻址数据传输，对应OSI参考模型的第三层 IP（网际协议） ICMP（网际控制消息协议）ARP（地址解析协议） RARP（反向地址解析协议） 传输层 报文段 负责提供可靠的传输服务，对应OSI参考模型的第四层 TCP（控制传输协议） UDP（用户数据报协议） 应用层 负责实现一切与应用程序相关的功能，对应OSI参考模型的上三层 FTP（文件传输协议） HTTP（超文本传输协议） DNS（域名服务器协议）SMTP（简单邮件传输协议）NFS（网络文件系统协议） 三、总结OSI 参考模型与 TCP/IP 参考模型区别如下： 相同点： OSI 参考模型与 TCP/IP 参考模型都采用了层次结构 都能够提供面向连接和无连接两种通信服务机制 不同点： OSI 采用的七层模型；TCP/IP 是四层或五层结构 TCP/IP 参考模型没有对网络接口层进行细分，只是一些概念性的描述；OSI 参考模型对服务和协议做了明确的区分 OSI 参考模型虽然网络划分为七层，但实现起来较困难。TCP/IP 参考模型作为一种简化的分层结构是可以的 TCP/IP协议去掉表示层和会话层的原因在于会话层、表示层、应用层都是在应用程序内部实现的，最终产出的是一个应用数据包，而应用程序之间是几乎无法实现代码的抽象共享的，这也就造成 OSI 设想中的应用程序维度的分层是无法实现的 三种模型对应关系如下图所示：","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"如何理解OSI七层模型?","slug":"http.如何理解OSI七层模型_","date":"2022-08-05T05:57:10.170Z","updated":"2022-08-05T07:23:35.927Z","comments":true,"path":"2022/08/05/http.如何理解OSI七层模型_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B_/","excerpt":"","text":"如何理解OSI七层模型? 一、是什么OSI （Open System Interconnect）模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架 OSI将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。即每一层扮演固定的角色，互不打扰 二、划分OSI主要划分了七层，如下图所示： 应用层应用层位于 OSI 参考模型的第七层，其作用是通过应用程序间的交互来完成特定的网络应用 该层协议定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务。例如域名系统 DNS，支持万维网应用的 HTTP 协议，电子邮件系统采用的 SMTP协议等 在应用层交互的数据单元我们称之为报文 表示层表示层的作用是使通信的应用程序能够解释交换数据的含义，其位于 OSI参考模型的第六层，向上为应用层提供服务，向下接收来自会话层的服务 该层提供的服务主要包括数据压缩，数据加密以及数据描述，使应用程序不必担心在各台计算机中表示和存储的内部格式差异 会话层会话层就是负责建立、管理和终止表示层实体之间的通信会话 该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法 传输层传输层的主要任务是为两台主机进程之间的通信提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题 传输层向高层屏蔽了下层数据通信的细节。因此，它是计算机通信体系结构中关键的一层 其中，主要的传输层协议是TCP和UDP 网络层两台计算机之间传送数据时其通信链路往往不止一条，所传输的信息甚至可能经过很多通信子网 网络层的主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送 在发送数据时，网络层把传输层产生的报文或用户数据报封装成分组和包，向下传输到数据链路层 在网络层使用的协议是无连接的网际协议（Internet Protocol）和许多路由协议，因此我们通常把该层简单地称为 IP 层 数据链路层数据链路层通常也叫做链路层，在物理层和网络层之间。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层协议 在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP数据报组装成帧，在两个相邻节点间的链路上传送帧 每一帧的数据可以分成：报头head和数据data两部分: head 标明数据发送者、接受者、数据类型，如 MAC地址 data 存储了计算机之间交互的数据 通过控制信息我们可以知道一个帧的起止比特位置，此外，也能使接收端检测出所收到的帧有无差错，如果发现差错，数据链路层能够简单的丢弃掉这个帧，以避免继续占用网络资源 物理层作为OSI 参考模型中最低的一层，物理层的作用是实现计算机节点之间比特流的透明传送 该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性） 该层主要是和硬件有关，与软件关系不大 三、传输过程数据在各层之间的传输如下图所示： 应用层报文被传送到运输层 在最简单的情况下，运输层收取到报文并附上附加信息，该首部将被接收端的运输层使用 应用层报文和运输层首部信息一道构成了运输层报文段。附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变 运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报 网络层数据接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧 在物理层数据帧被封装成比特流，之后通过传输介质传送到对端 对端再一步步解开封装，获取到传送的数据","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？","slug":"http.为什么说HTTPS比HTTP安全_ HTTPS是如何保证安全的？","date":"2022-08-05T05:57:10.130Z","updated":"2022-08-05T06:05:14.875Z","comments":true,"path":"2022/08/05/http.为什么说HTTPS比HTTP安全_ HTTPS是如何保证安全的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4HTTPS%E6%AF%94HTTP%E5%AE%89%E5%85%A8_%20HTTPS%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/","excerpt":"","text":"为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？ 一、安全特性在什么是HTTP这篇文章中，我们了解到HTTP在通信过程中，存在以下问题： 通信使用明文（不加密），内容可能被窃听 不验证通信方的身份，因此有可能遭遇伪装 而HTTPS的出现正是解决这些问题，HTTPS是建立在SSL之上，其安全性由SSL来保证 在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能 SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议 二、如何做SSL的实现这些功能主要依赖于三种手段： 对称加密：采用协商的密钥对数据加密 非对称加密：实现身份认证和密钥协商 摘要算法：验证信息的完整性 数字签名：身份验证 对称加密对称加密指的是加密和解密使用的秘钥都是同一个，是对称的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性 非对称加密非对称加密，存在两个秘钥，一个叫公钥，一个叫私钥。两个秘钥是不同的，公钥可以公开给任何人使用，私钥则需要保密 公钥和私钥都可以用来加密解密，但公钥加密后只能用私钥解 密，反过来，私钥加密后也只能用公钥解密 混合加密在HTTPS通信过程中，采用的是对称加密+非对称加密，也就是混合加密 在对称加密中讲到，如果能够保证了密钥的安全，那整个通信过程就可以说具有了机密性 而HTTPS采用非对称加密解决秘钥交换的问题 具体做法是发送密文的一方使用对方的公钥进行加密处理“对称的密钥”，然后对方用自己的私钥解密拿到“对称的密钥” 这样可以确保交换的密钥是安全的前提下，使用对称加密方式进行通信 举个例子：网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文 上述的方法解决了数据加密，在网络传输过程中，数据有可能被篡改，并且黑客可以伪造身份发布公钥，如果你获取到假的公钥，那么混合加密也并无多大用处，你的数据扔被黑客解决 因此，在上述加密的基础上仍需加上完整性、身份验证的特性，来实现真正的安全，实现这一功能则是摘要算法 摘要算法实现完整性的手段主要是摘要算法，也就是常说的散列函数、哈希函数 可以理解成一种特殊的压缩算法，它能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹” 摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的完整性 比如，你发了条消息：“转账 1000 元”，然后再加上一个 SHA-2 的摘要。网站收到后也计算一下消息的摘要，把这两份“指纹”做个对比，如果一致，就说明消息是完整可信的，没有被修改 数字签名数字签名能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名 原理其实很简单，就是用私钥加密，公钥解密 签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的 和消息本身一样，因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段，也就是说，怎么判断这个公钥就是你的公钥 这时候就需要一个第三方，就是证书验证机构 CA验证机构数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场 CA 对公钥的签名认证要求包括序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书” 流程如下图： 服务器的运营人员向数字证书认证机构提出公开密钥的申请 数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名 然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起 服务器会将这份由数字证书认证机构颁发的数字证书发送给客户端，以进行非对称加密方式通信 接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，则证明： 认证服务器的公开密钥的是真实有效的数字证书认证机构 服务器的公开密钥是值得信赖的 三、总结可以看到，HTTPS与HTTP虽然只差一个SSL，但是通信安全得到了大大的保障，通信的四大特性都以解决，解决方式如下： 机密性：混合算法 完整性：摘要算法 身份认证：数字签名 不可否定：数字签名 同时引入第三方证书机构，确保公开秘钥的安全性","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"什么是HTTP? HTTP 和 HTTPS 的区别?","slug":"http.什么是HTTP_ HTTP 和 HTTPS 的区别_","date":"2022-08-05T05:57:10.061Z","updated":"2022-08-05T06:04:34.053Z","comments":true,"path":"2022/08/05/http.什么是HTTP_ HTTP 和 HTTPS 的区别_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E4%BB%80%E4%B9%88%E6%98%AFHTTP_%20HTTP%20%E5%92%8C%20HTTPS%20%E7%9A%84%E5%8C%BA%E5%88%AB_/","excerpt":"","text":"什么是HTTP? HTTP 和 HTTPS 的区别? 一、HTTPHTTP (HyperText Transfer Protocol)，即超文本运输协议，是实现网络通信的一种规范 在计算机和网络世界有，存在不同的协议，如广播协议、寻址协议、路由协议等等…… 而HTTP是一个传输协议，即将数据由A传到B或将B传输到A，并且 A 与 B 之间能够存放很多第三方，如：A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B 传输的数据并不是计算机底层中的二进制包，而是完整的、有意义的数据，如HTML 文件, 图片文件, 查询结果等超文本，能够被上层应用识别 在实际应用中，HTTP常被用于在Web浏览器和网站服务器之间传递信息，以明文方式发送内容，不提供任何方式的数据加密 特点如下： 支持客户/服务器模式 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间 无状态：HTTP协议无法根据之前的状态进行本次的请求处理 二、HTTPS在上述介绍HTTP中，了解到HTTP传递信息是以明文的形式发送内容，这并不安全。而HTTPS出现正是为了解决HTTP不安全的特性 为了保证这些隐私数据能加密传输，让HTTP运行安全的SSL/TLS协议上，即 HTTPS = HTTP + SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密 SSL 协议位于TCP/IP 协议与各种应用层协议之间，浏览器和服务器在使用 SSL建立连接时需要选择一组恰当的加密算法来实现安全通信，为数据通讯提供安全支持 流程图如下所示： 首先客户端通过URL访问服务器建立SSL连接 服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端 客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级 客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站 服务器利用自己的私钥解密出会话密钥 服务器利用会话密钥加密与客户端之间的通信 三、区别 HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全 HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP是80，HTTPS是443 HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书费用越高","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"web常见的攻击方式有哪些？如何防御？","slug":"http.web常见的攻击方式有哪些？如何防御？","date":"2022-08-05T05:57:10.000Z","updated":"2022-08-05T06:05:26.886Z","comments":true,"path":"2022/08/05/http.web常见的攻击方式有哪些？如何防御？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.web%E5%B8%B8%E8%A7%81%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%A6%82%E4%BD%95%E9%98%B2%E5%BE%A1%EF%BC%9F/","excerpt":"","text":"web常见的攻击方式有哪些？如何防御？ 一、是什么Web攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为 如植入恶意代码，修改网站权限，获取网站用户隐私信息等等 Web应用程序的安全性是任何基于Web业务的重要组成部分 确保Web应用程序安全十分重要，即使是代码中很小的 bug 也有可能导致隐私信息被泄露 站点安全就是为保护站点不受未授权的访问、使用、修改和破坏而采取的行为或实践 我们常见的Web攻击方式有 XSS (Cross Site Scripting) 跨站脚本攻击 CSRF（Cross-site request forgery）跨站请求伪造 SQL注入攻击 二、XSSXSS，跨站脚本攻击，允许攻击者将恶意代码植入到提供给其它用户使用的页面中 XSS涉及到三方，即攻击者、客户端与Web应用 XSS的攻击目标是为了盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互 举个例子： 一个搜索页面，根据url参数决定关键词的内容 12345&lt;input type=&quot;text&quot; value=&quot;&lt;%= getParameter(&quot;keyword&quot;) %&gt;&quot;&gt;&lt;button&gt;搜索&lt;/button&gt;&lt;div&gt; 您搜索的关键词是：&lt;%= getParameter(&quot;keyword&quot;) %&gt;&lt;/div&gt; 这里看似并没有问题，但是如果不按套路出牌呢？ 用户输入&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;，拼接到 HTML 中返回给浏览器。形成了如下的 HTML： 12345&lt;input type=&quot;text&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;&quot;&gt;&lt;button&gt;搜索&lt;/button&gt;&lt;div&gt; 您搜索的关键词是：&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;&lt;/div&gt; 浏览器无法分辨出 &lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt; 是恶意代码，因而将其执行，试想一下，如果是获取cookie发送对黑客服务器呢？ 根据攻击的来源，XSS攻击可以分成： 存储型 反射型 DOM 型 存储型存储型 XSS 的攻击步骤： 攻击者将恶意代码提交到目标网站的数据库中 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作 这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等 反射型 XSS反射型 XSS 的攻击步骤： 攻击者构造出特殊的 URL，其中包含恶意代码 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作 反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。 反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。 由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。 POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见 DOM 型 XSSDOM 型 XSS 的攻击步骤： 攻击者构造出特殊的 URL，其中包含恶意代码 用户打开带有恶意代码的 URL 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作 DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞 XSS的预防通过前面介绍，看到XSS攻击的两大要素： 攻击者提交而恶意代码 浏览器执行恶意代码 针对第一个要素，我们在用户输入的过程中，过滤掉用户输入的恶劣代码，然后提交给后端，但是如果攻击者绕开前端请求，直接构造请求就不能预防了 而如果在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示 例如： 一个正常的用户输入了 5 &lt; 7 这个内容，在写入数据库前，被转义，变成了 5 &lt; 7 在客户端中，一旦经过了 escapeHTML()，客户端显示的内容就变成了乱码( 5 &lt; 7 ) 在前端中，不同的位置所需的编码也不同。 当 5 &lt; 7 作为 HTML 拼接页面时，可以正常显示： 1&lt;div title=&quot;comment&quot;&gt;5 &amp;lt; 7&lt;/div&gt; 当 5 &lt; 7 通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等 可以看到，过滤并非可靠的，下面就要通过防止浏览器执行恶意代码： 在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等 如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患 DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，&lt;a&gt; 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免 12345678910111213&lt;!-- 链接内包含恶意代码 --&gt;&lt;a href=&quot;UNTRUSTED&quot;&gt;1&lt;/a&gt;&lt;script&gt;// setTimeout()/setInterval() 中调用恶意代码setTimeout(&quot;UNTRUSTED&quot;)setInterval(&quot;UNTRUSTED&quot;)// location 调用恶意代码location.href = &#x27;UNTRUSTED&#x27;// eval() 中调用恶意代码eval(&quot;UNTRUSTED&quot;) 三、CSRFCSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求 利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目 一个典型的CSRF攻击有着如下的流程： 受害者登录a.com，并保留了登录凭证（Cookie） 攻击者引诱受害者访问了b.com b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求 a.com以受害者的名义执行了act=xx 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作 csrf可以通过get请求，即通过访问img的页面后，浏览器自动访问目标地址，发送请求 同样，也可以设置一个自动提交的表单发送post请求，如下： 123456&lt;form action=&quot;http://bank.example/withdraw&quot; method=POST&gt; &lt;input type=&quot;hidden&quot; name=&quot;account&quot; value=&quot;xiaoming&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;amount&quot; value=&quot;10000&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;for&quot; value=&quot;hacker&quot; /&gt;&lt;/form&gt;&lt;script&gt; document.forms[0].submit(); &lt;/script&gt; 访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作 还有一种为使用a标签的，需要用户点击链接才会触发 访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作 123&lt;a href=&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot; taget=&quot;_blank&quot;&gt; 重磅消息！！&lt;a/&gt; CSRF的特点 攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生 攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据 整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用” 跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪 CSRF的预防CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性 防止csrf常用方案如下： 阻止不明外域的访问 同源检测 Samesite Cookie 提交时要求附加本域才能获取的信息 CSRF Token 双重Cookie验证 这里主要讲讲token这种形式，流程如下： 用户打开页面的时候，服务器需要给这个用户生成一个Token 对于GET请求，Token将附在请求地址之后。对于 POST 请求来说，要在 form 的最后加上 1&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt; 当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性 四、SQL注入Sql 注入攻击，是通过将恶意的 Sql查询或添加语句插入到应用的输入参数中，再在后台 Sql服务器上解析执行进行的攻击 流程如下所示： 找出SQL漏洞的注入点 判断数据库的类型以及版本 猜解用户名和密码 利用工具查找Web后台管理入口 入侵和破坏 预防方式如下： 严格检查输入变量的类型和格式 过滤和转义特殊字符 对访问数据库的Web应用程序采用Web应用防火墙 上述只是列举了常见的web攻击方式，实际开发过程中还会遇到很多安全问题，对于这些问题， 切记不可忽视","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"如何理解UDP 和 TCP? 区别? 应用场景?","slug":"http.如何理解UDP 和 TCP_ 区别_ 应用场景_","date":"2022-08-05T05:57:09.956Z","updated":"2022-08-05T07:23:29.869Z","comments":true,"path":"2022/08/05/http.如何理解UDP 和 TCP_ 区别_ 应用场景_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3UDP%20%E5%92%8C%20TCP_%20%E5%8C%BA%E5%88%AB_%20%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF_/","excerpt":"","text":"如何理解UDP 和 TCP? 区别? 应用场景? 一、UDPUDP（User Datagram Protocol），用户数据包协议，是一个简单的「面向数据报的通信协议」，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层 也就是说无论应用层交给UDP多长的报文，它统统发送，一次发送一个报文 而对接收方，接到后直接去除首部，交给上面的应用层就完成任务 UDP报头包括4个字段，每个字段占用2个字节（即16个二进制位），标题短，开销小 特点如下： UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务 传输途中出现丢包，UDP 也不负责重发 当包的到达顺序出现乱序时，UDP没有纠正的功能。 并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为 二、TCPTCP（Transmission Control Protocol），传输控制协议，是一种可靠、「面向字节流的通信协议」，把上面应用层交下来的数据看成无结构的字节流来发送 可以想象成流水形式的，发送方TCP会将数据放入“蓄水池”（缓存区），等到可以发送的时候就发送，不能发送就等着，TCP会根据当前网络的拥塞状态来确定每个报文段的大小 TCP报文首部有20个字节，额外开销大 特点如下： TCP充分地实现了数据传输时各种控制功能，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在 UDP 中都没有。 此外，TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。 根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高可靠性的通信（ 主要通过校验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现） 三、区别UDP与TCP两者的都位于传输层，如下图所示： 两者区别如下表所示： TCP UDP 可靠性 可靠 不可靠 连接性 面向连接 无连接 报文 面向字节流 面向报文 效率 传输效率低 传输效率高 双共性 全双工 一对一、一对多、多对一、多对多 流量控制 滑动窗口 无 拥塞控制 慢开始、拥塞避免、快重传、快恢复 无 传输效率 慢 快 TCP 是面向连接的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取 TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方 TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用 TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信 两者应用场景如下图： 可以看到，TCP 应用场景适用于对效率要求低，对准确性要求高或者要求有链接的场景，而UDP 适用场景为对效率要求高，对准确性要求低的场景","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说对WebSocket的理解？应用场景？","slug":"http.说说对WebSocket的理解？应用场景？","date":"2022-08-05T05:57:09.923Z","updated":"2022-08-05T06:04:59.924Z","comments":true,"path":"2022/08/05/http.说说对WebSocket的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E8%AF%B4%E5%AF%B9WebSocket%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说对WebSocket的理解？应用场景？ 一、是什么WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅 客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输 从上图可见，websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据 而在websocket出现之前，开发实时web应用的方式为轮询 不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果 轮询的缺点也很明显，反复发送无效查询请求耗费了大量的带宽和 CPU资源 二、特点全双工通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合 例如指 A→B 的同时 B→A ，是瞬时同步的 二进制帧采用了二进制帧结构，语法、语义与 HTTP 完全不兼容，相比http/2，WebSocket更侧重于“实时通信”，而HTTP/2 更侧重于提高传输效率，所以两者的帧结构也有很大的区别 不像 HTTP/2 那样定义流，也就不存在多路复用、优先级等特性 自身就是全双工，也不需要服务器推送 协议名引入ws和wss分别代表明文和密文的websocket协议，且默认端口使用80或443，几乎与http一致 123ws://www.chrono.comws://www.chrono.com:8080/srvwss://www.chrono.com:445/im?user_id=xxx 握手WebSocket也要有一个握手过程，然后才能正式收发数据 客户端发送数据格式如下： 12345678GET /chat HTTP/1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==Origin: http://example.comSec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13 Connection：必须设置Upgrade，表示客户端希望连接升级 Upgrade：必须设置Websocket，表示希望升级到Websocket协议 Sec-WebSocket-Key：客户端发送的一个 base64 编码的密文，用于简单的认证秘钥。要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept应答，否则客户端会抛出错误，并关闭连接 Sec-WebSocket-Version ：表示支持的Websocket版本 服务端返回的数据格式： 1234HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat HTTP/1.1 101 Switching Protocols：表示服务端接受 WebSocket 协议的客户端连接 Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要 优点 较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部 更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少 保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证 更好的二进制支持：定义了二进制帧，更好处理二进制内容 支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议 更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率 二、应用场景基于websocket的事实通信的特点，其存在的应用场景大概有： 弹幕 媒体聊天 协同编辑 基于位置的应用 体育实况更新 股票基金报价实时更新","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说TCP为什么需要三次握手和四次挥手？","slug":"http.说说TCP为什么需要三次握手和四次挥手？","date":"2022-08-05T05:57:09.881Z","updated":"2022-08-05T06:05:05.446Z","comments":true,"path":"2022/08/05/http.说说TCP为什么需要三次握手和四次挥手？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E8%AF%B4TCP%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%9F/","excerpt":"","text":"说说TCP为什么需要三次握手和四次挥手？ 一、三次握手三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包 主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备 过程如下： 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK的值，此时服务器处于 SYN_RCVD 的状态 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接 上述每一次握手的作用如下： 第一次握手：客户端发送网络包，服务端收到了 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。 第二次握手：服务端发包，客户端收到了 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常 第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常 通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了 为什么不是两次握手?如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到 并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源 二、四次挥手tcp终止一个连接，需要经过四次挥手 过程如下： 第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认 第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态 第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态 第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态 四次挥手原因服务端在收到客户端断开连接Fin报文后，并不会立即关闭连接，而是先发送一个ACK包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送FIN报文断开连接，因此需要四次挥手 三、总结一个完整的三次握手四次挥手如下图所示：","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说地址栏输入 URL 敲下回车后发生了什么?","slug":"http.说说地址栏输入 URL 敲下回车后发生了什么_","date":"2022-08-05T05:57:09.842Z","updated":"2022-08-05T06:04:55.184Z","comments":true,"path":"2022/08/05/http.说说地址栏输入 URL 敲下回车后发生了什么_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E8%AF%B4%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%20URL%20%E6%95%B2%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88_/","excerpt":"","text":"说说地址栏输入 URL 敲下回车后发生了什么? 一、简单分析简单的分析，从输入 URL到回车后发生的行为如下： URL解析 DNS 查询 TCP 连接 HTTP 请求 响应请求 页面渲染 二、详细分析URL解析首先判断你输入的是一个合法的URL 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作 一个url的结构解析如下： DNS查询在之前文章中讲过DNS的查询，这里就不再讲述了 整个查询过程如下图所示： 最终，获取到了域名对应的目标服务器IP地址 TCP连接在之前文章中，了解到tcp是一种面向有连接的传输层协议 在确定目标服务器服务器的IP地址后，则经历三次握手建立TCP连接，流程如下： 发送 http 请求当建立tcp连接之后，就可以在这基础上进行通信，浏览器发送 http 请求到目标服务器 请求的内容包括： 请求行 请求头 请求主体 响应请求当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，包括： 状态行 响应头 响应正文 在服务器响应之后，由于现在http默认开始长连接keep-alive，当页面关闭之后，tcp链接则会经过四次挥手完成断开 页面渲染当浏览器接收到服务器响应的资源后，首先会对资源进行解析： 查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等 查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式 关于页面的渲染过程如下： 解析HTML，构建 DOM 树 解析 CSS ，生成 CSS 规则树 合并 DOM 树和 CSS 规则，生成 render 树 布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算 绘制 render 树（ paint ），绘制页面像素信息 浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说 HTTP 常见的请求头有哪些? 作用？","slug":"http.说说 HTTP 常见的请求头有哪些_ 作用？","date":"2022-08-05T05:57:09.797Z","updated":"2022-08-05T06:04:39.534Z","comments":true,"path":"2022/08/05/http.说说 HTTP 常见的请求头有哪些_ 作用？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E8%AF%B4%20HTTP%20%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%9C%89%E5%93%AA%E4%BA%9B_%20%E4%BD%9C%E7%94%A8%EF%BC%9F/","excerpt":"","text":"说说 HTTP 常见的请求头有哪些? 作用？ 一、是什么HTTP头字段（HTTP header fields）,是指在超文本传输协议（HTTP）的请求和响应消息中的消息头部分 它们定义了一个超文本传输协议事务中的操作参数 HTTP头部字段可以自己根据需要定义，因此可能在 Web服务器和浏览器上发现非标准的头字段 下面是一个HTTP请求的请求头： 123456789101112GET /home.html HTTP/1.1Host: developer.mozilla.orgUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brReferer: https://developer.mozilla.org/testpage.htmlConnection: keep-aliveUpgrade-Insecure-Requests: 1If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMTIf-None-Match: &quot;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&quot;Cache-Control: max-age=0 二、分类常见的请求字段如下表所示： 字段名 说明 示例 Accept 能够接受的回应内容类型（Content-Types） Accept: text/plain Accept-Charset 能够接受的字符集 Accept-Charset: utf-8 Accept-Encoding 能够接受的编码方式列表 Accept-Encoding: gzip, deflate Accept-Language 能够接受的回应内容的自然语言列表 Accept-Language: en-US Authorization 用于超文本传输协议的认证的认证信息 Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== Cache-Control 用来指定在这次的请求/响应链中的所有缓存机制 都必须 遵守的指令 Cache-Control: no-cache Connection 该浏览器想要优先使用的连接类型 Connection: keep-alive Connection: Upgrade Cookie 服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议Cookie Cookie: $Version=1; Skin=new; Content-Length 以 八位字节数组 （8位的字节）表示的请求体的长度 Content-Length: 348 Content-Type 请求体的 多媒体类型 Content-Type: application/x-www-form-urlencoded Date 发送该消息的日期和时间 Date: Tue, 15 Nov 1994 08:12:31 GMT Expect 表明客户端要求服务器做出特定的行为 Expect: 100-continue Host 服务器的域名(用于虚拟主机 )，以及服务器所监听的传输控制协议端口号 Host: en.wikipedia.org:80 Host: en.wikipedia.org If-Match 仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用时，用作像 PUT 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源 If-Match: “737060cd8c284d8af7ad3082f209582d” If-Modified-Since 允许在对应的内容未被修改的情况下返回304未修改 If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT If-None-Match 允许在对应的内容未被修改的情况下返回304未修改 If-None-Match: “737060cd8c284d8af7ad3082f209582d” If-Range 如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体 If-Range: “737060cd8c284d8af7ad3082f209582d” Range 仅请求某个实体的一部分 Range: bytes=500-999 User-Agent 浏览器的浏览器身份标识字符串 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0 Origin 发起一个针对 跨来源资源共享 的请求 Origin: http://www.example-social-network.com 三、使用场景通过配合请求头和响应头，可以满足一些场景的功能实现： 协商缓存协商缓存是利用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对请求头响应头来管理的 Last-Modified 表示本地文件最后修改日期，浏览器会在request header加上If-Modified-Since（上次返回的Last-Modified的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来 Etag就像一个指纹，资源变化都会导致ETag变化，跟最后修改时间没有关系，ETag可以保证每一个资源是唯一的 If-None-Match的header会将上次返回的Etag发送给服务器，询问该资源的Etag是否有更新，有变动就会发送新的资源回来 而强制缓存不需要发送请求到服务端，根据请求头expires和cache-control判断是否命中强缓存 强制缓存与协商缓存的流程图如下所示： 会话状态cookie，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据，通过响应头set-cookie决定 作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie有效期、安全性、使用范围的可选属性组成 Cookie 主要用于以下三个方面： 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说一下 GET 和 POST 的区别？","slug":"http.说一下 GET 和 POST 的区别？","date":"2022-08-05T05:57:09.753Z","updated":"2022-08-05T06:05:10.402Z","comments":true,"path":"2022/08/05/http.说一下 GET 和 POST 的区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E4%B8%80%E4%B8%8B%20GET%20%E5%92%8C%20POST%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说一下 GET 和 POST 的区别？ 一、是什么GET和POST，两者是HTTP协议中发送请求的方法 GETGET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据 POSTPOST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或「副作用」 本质上都是TCP链接，并无差别 但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中会体现出一些区别 二、区别从w3schools得到的标准答案的区别如下： GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。 GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST没有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 GET参数通过URL传递，POST放在Request body中 参数位置貌似从上面看到GET与POST请求区别非常大，但两者实质并没有区别 无论 GET还是 POST，用的都是同一个传输层协议，所以在传输上没有区别 当不携带参数的时候，两者最大的区别为第一行方法名不同 POST /uri HTTP/1.1 \\r\\n GET /uri HTTP/1.1 \\r\\n 当携带参数的时候，我们都知道GET请求是放在url中，POST则放在body中 GET 方法简约版报文是这样的 12GET /index.html?name=qiming.c&amp;age=22 HTTP/1.1Host: localhost POST方法简约版报文是这样的 12345POST /index.html HTTP/1.1Host: localhostContent-Type: application/x-www-form-urlencodedname=qiming.c&amp;age=22 注意：这里只是约定，并不属于HTTP规范，相反的，我们可以在POST请求中url中写入参数，或者GET请求中的body携带参数 参数长度HTTP协议没有Body和 URL 的长度限制，对 URL限制的大多是浏览器和服务器的原因 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持 这里限制的是整个URL长度，而不仅仅是参数值的长度 服务器处理长URL 要消耗比较多的资源，为了性能和安全考虑，会给 URL 长度加限制 安全POST比GET 安全，因为数据在地址栏上不可见 然而，从传输的角度来说，他们都是不安全的，因为HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文 只有使用HTTPS才能加密安全 数据包对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据） 对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok 注意：并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说 HTTP 常见的状态码有哪些，适用场景？","slug":"http.说说 HTTP 常见的状态码有哪些，适用场景？","date":"2022-08-05T05:57:09.708Z","updated":"2022-08-05T06:04:44.948Z","comments":true,"path":"2022/08/05/http.说说 HTTP 常见的状态码有哪些，适用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E8%AF%B4%20HTTP%20%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说 HTTP 常见的状态码有哪些，适用场景？ 一、是什么HTTP状态码（英语：HTTP Status Code），用以表示网页服务器超文本传输协议响应状态的3位数字代码 它由 RFC 2616规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774与 RFC 4918等规范扩展 简单来讲，http状态码的作用是服务器告诉客户端当前请求响应的状态，通过状态码就能判断和分析服务器的运行状态 二、分类状态码第一位数字决定了不同的响应状态，有如下： 1 表示消息 2 表示成功 3 表示重定向 4 表示请求错误 5 表示服务器错误 1xx代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束 常见的有： 100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应 101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级 2xx代表请求已成功被服务器接收、理解、并接受 常见的有： 200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回 201（已创建）：请求成功并且服务器创建了新的资源 202（已创建）：服务器已经接收请求，但尚未处理 203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源 204（无内容）：服务器成功处理请求，但没有返回任何内容 205（重置内容）：服务器成功处理请求，但没有返回任何内容 206（部分内容）：服务器成功处理了部分请求 3xx表示要完成请求，需要进一步操作。通常，这些状态代码用来重定向 常见的有： 300（多种选择）：针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择 301（永久移动）：请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置 302（临时移动）：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求 303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码 305 （使用代理）：请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理 307 （临时重定向）：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求 4xx代表了客户端看起来可能发生了错误，妨碍了服务器的处理 常见的有： 400（错误请求）：服务器不理解请求的语法 401（未授权）：请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。 403（禁止）：服务器拒绝请求 404（未找到）：服务器找不到请求的网页 405（方法禁用）：禁用请求中指定的方法 406（不接受）：无法使用请求的内容特性响应请求的网页 407（需要代理授权）：此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理 408（请求超时）：服务器等候请求时发生超时 5xx表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生 常见的有： 500（服务器内部错误）：服务器遇到错误，无法完成请求 501（尚未实施）：服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码 502（错误网关）：服务器作为网关或代理，从上游服务器收到无效响应 503（服务不可用）：服务器目前无法使用（由于超载或停机维护） 504（网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求 505（HTTP 版本不受支持）：服务器不支持请求中所用的 HTTP 协议版本 三、适用场景下面给出一些状态码的适用场景： 100：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输 206：一般用来做断点续传，或者是视频文件等大文件的加载 301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名 302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面 304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分 400：参数有误，请求无法被服务器识别 403：告诉客户端禁止访问该站点或者资源，如在外网环境下，然后访问只有内网IP才能访问的时候则返回 404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时 503：服务器停机维护时，主动用503响应请求或 nginx 设置限速，超过限速，会返回503 504：网关超时","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说 HTTP1.0/1.1/2.0 的区别?","slug":"http.说说 HTTP1.01.12.0 的区别_","date":"2022-08-05T05:57:09.663Z","updated":"2022-08-05T06:04:50.045Z","comments":true,"path":"2022/08/05/http.说说 HTTP1.01.12.0 的区别_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/http.%E8%AF%B4%E8%AF%B4%20HTTP1.01.12.0%20%E7%9A%84%E5%8C%BA%E5%88%AB_/","excerpt":"","text":"说说 HTTP1.0/1.1/2.0 的区别? 一、HTTP1.0HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本 HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接 服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求 简单来讲，每次与服务器交互，都需要新开一个连接 例如，解析html文件，当发现文件中存在资源文件的时候，这时候又创建单独的链接 最终导致，一个html文件的访问包含了多次的请求和响应，每次请求都需要创建连接、关系连接 这种形式明显造成了性能上的缺陷 如果需要建立长连接，需要设置一个非标准的Connection字段 Connection: keep-alive 二、HTTP1.1在HTTP1.1中，默认支持长连接（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟 建立一次连接，多次请求均由这个连接完成 这样，在加载html文件的时候，文件中多个请求和响应就可以在一个连接中传输 同时，HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间 同时，HTTP1.1在HTTP1.0的基础上，增加更多的请求头和响应头来完善的功能，如下： 引入了更多的缓存控制策略，如If-Unmodified-Since, If-Match, If-None-Match等缓存头来控制缓存策略 引入range，允许值请求资源某个部分 引入host，实现了在一台WEB服务器上可以在同一个IP地址和端口号上使用不同的主机名来创建多个虚拟WEB站点 并且还添加了其他的请求方法：put、delete、options… 三、HTTP2.0而HTTP2.0在相比之前版本，性能上有很大的提升，如添加了一个特性： 多路复用 二进制分帧 首部压缩 服务器推送 多路复用HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以「同时」发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞” 上图中，可以看到第四步中css、js资源是同时发送到服务端 二进制分帧帧是HTTP2通信中最小单位信息 HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x的文本格式，解析起来更高效 将请求和响应数据分割为更小的帧，并且它们采用二进制编码 HTTP2中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流 每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装，这也是多路复用同时发送数据的实现条件 首部压缩HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送 首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新 例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销 服务器推送HTTP2引入服务器推送，允许服务端推送资源给客户端 服务器会顺便把一些客户端需要的资源一起推送到客户端，如在响应一个页面请求中，就可以随同页面的其它资源 免得客户端再次创建连接发送请求到服务器端获取 这种方式非常合适加载静态资源 四、总结HTTP1.0： 浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接 HTTP1.1： 引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用 在同一个TCP连接里面，客户端可以同时发送多个请求 虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着 新增了一些请求方法 新增了一些请求头和响应头 HTTP2.0： 采用二进制格式而非文本格式 完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行 使用报头压缩，降低开销 服务器推送","categories":[{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],"tags":[]},{"title":"说说如何在Vue项目中应用TypeScript？","slug":"ts.说说如何在Vue项目中应用TypeScript？","date":"2022-08-05T03:16:40.156Z","updated":"2022-08-05T03:20:36.024Z","comments":true,"path":"2022/08/05/ts.说说如何在Vue项目中应用TypeScript？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E5%A6%82%E4%BD%95%E5%9C%A8Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript%EF%BC%9F/","excerpt":"","text":"说说如何在Vue项目中应用TypeScript？ 一、前言与如何在React项目中应用TypeScript类似 在VUE项目中应用typescript，我们需要引入一个库vue-property-decorator， 其是基于vue-class-component库而来，这个库vue官方推出的一个支持使用class方式来开发vue单文件组件的库 主要的功能如下： methods 可以直接声明为类的成员方法 计算属性可以被声明为类的属性访问器 初始化的 data 可以被声明为类属性 data、render 以及所有的 Vue 生命周期钩子可以直接作为类的成员方法 所有其他属性，需要放在装饰器中 二、使用vue-property-decorator 主要提供了以下装饰器 @Prop @PropSync @Model @Watch @Provide @Inject @ProvideReactive @InjectReactive @Emit @Ref @Component (由 vue-class-component 提供) Mixins (由 vue-class-component 提供) @ComponentComponent装饰器它注明了此类为一个Vue组件，因此即使没有设置选项也不能省略 如果需要定义比如 name、components、filters、directives以及自定义属性，就可以在Component装饰器中定义，如下： 1234567891011121314151617181920import &#123;Component,Vue&#125; from &#x27;vue-property-decorator&#x27;;import &#123;componentA,componentB&#125; from &#x27;@/components&#x27;; @Component(&#123; components:&#123; componentA, componentB, &#125;, directives: &#123; focus: &#123; // 指令的定义 inserted: function (el) &#123; el.focus() &#125; &#125; &#125;&#125;)export default class YourCompoent extends Vue&#123; &#125; computed、data、methods这里取消了组件的data和methods属性，以往data返回对象中的属性、methods中的方法需要直接定义在Class中，当做类的属性和方法 123456789101112131415161718@Componentexport default class HelloDecorator extends Vue &#123; count: number = 123 // 类属性相当于以前的 data add(): number &#123; // 类方法就是以前的方法 this.count + 1 &#125; // 获取计算属性 get total(): number &#123; return this.count + 1 &#125; // 设置计算属性 set total(param:number): void &#123; this.count = param &#125;&#125; @props组件接收属性的装饰器，如下使用： 123456789101112131415161718192021222324252627import &#123;Component,Vue,Prop&#125; from vue-property-decorator;@Componentexport default class YourComponent extends Vue &#123; @Prop(String) propA:string; @Prop([String,Number]) propB:string|number; @Prop(&#123; type: String, // type: [String , Number] default: &#x27;default value&#x27;, // 一般为String或Number //如果是对象或数组的话。默认值从一个工厂函数中返回 // defatult: () =&gt; &#123; // return [&#x27;a&#x27;,&#x27;b&#x27;] // &#125; required: true, validator: (value) =&gt; &#123; return [ &#x27;InProcess&#x27;, &#x27;Settled&#x27; ].indexOf(value) !== -1 &#125; &#125;) propC:string;&#125; @watch实际就是Vue中的监听器，如下： 12345678910111213import &#123; Vue, Component, Watch &#125; from &#x27;vue-property-decorator&#x27;@Componentexport default class YourComponent extends Vue &#123; @Watch(&#x27;child&#x27;) onChildChanged(val: string, oldVal: string) &#123;&#125; @Watch(&#x27;person&#x27;, &#123; immediate: true, deep: true &#125;) onPersonChanged1(val: Person, oldVal: Person) &#123;&#125; @Watch(&#x27;person&#x27;) onPersonChanged2(val: Person, oldVal: Person) &#123;&#125;&#125; @emitvue-property-decorator 提供的 @Emit 装饰器就是代替Vue中的事件的触发$emit，如下： 1234567891011121314import &#123;Vue, Component, Emit&#125; from &#x27;vue-property-decorator&#x27;; @Component(&#123;&#125;) export default class Some extends Vue&#123; mounted()&#123; this.$on(&#x27;emit-todo&#x27;, function(n) &#123; console.log(n) &#125;) this.emitTodo(&#x27;world&#x27;); &#125; @Emit() emitTodo(n: string)&#123; console.log(&#x27;hello&#x27;); &#125; &#125; 三 、总结可以看到上述typescript版本的vue class的语法与平时javascript版本使用起来还是有很大的不同，多处用到class与装饰器，但实际上本质是一致的，只有不断编写才会得心应手","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说如何在React项目中应用TypeScript？","slug":"ts.说说如何在React项目中应用TypeScript？","date":"2022-08-05T03:16:40.154Z","updated":"2022-08-05T03:20:29.898Z","comments":true,"path":"2022/08/05/ts.说说如何在React项目中应用TypeScript？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E5%A6%82%E4%BD%95%E5%9C%A8React%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript%EF%BC%9F/","excerpt":"","text":"说说如何在React项目中应用TypeScript？ 一、前言单独的使用typescript 并不会导致学习成本很高，但是绝大部分前端开发者的项目都是依赖于框架的 例如和vue、react 这些框架结合使用的时候，会有一定的门槛 使用 TypeScript 编写 react 代码，除了需要 typescript 这个库之外，还需要安装@types/react、@types/react-dom 123npm i @types/react -snpm i @types/react-dom -s 至于上述使用@types的库的原因在于，目前非常多的javascript库并没有提供自己关于 TypeScript 的声明文件 所以，ts并不知道这些库的类型以及对应导出的内容，这里@types实际就是社区中的DefinitelyTyped库，定义了目前市面上绝大多数的JavaScript库的声明 所以下载相关的javascript对应的@types声明时，就能够使用使用该库对应的类型定义 二、使用方式在编写react项目的时候，最常见的使用的组件就是： 无状态组件 有状态组件 受控组件 无状态组件主要作用是用于展示UI，如果使用js声明，则如下所示： 123456789import * as React from &#x27;react&#x27;export const Logo = props =&gt; &#123; const &#123; logo, className, alt &#125; = props return ( &lt;img src=&#123;logo&#125; className=&#123;className&#125; alt=&#123;alt&#125; /&gt; )&#125; 但这时候ts会出现报错提示，原因在于没有定义porps类型，这时候就可以使用interface接口去定义porps即可，如下： 123456789101112131415import * as React from &#x27;react&#x27;interface IProps &#123; logo?: string className?: string alt?: string&#125;export const Logo = (props: IProps) =&gt; &#123; const &#123; logo, className, alt &#125; = props return ( &lt;img src=&#123;logo&#125; className=&#123;className&#125; alt=&#123;alt&#125; /&gt; )&#125; 但是我们都知道props里面存在children属性，我们不可能每个porps接口里面定义多一个children，如下： 123456interface IProps &#123; logo?: string className?: string alt?: string children?: ReactNode&#125; 更加规范的写法是使用React里面定义好的FC属性，里面已经定义好children类型，如下： 1234567export const Logo: React.FC&lt;IProps&gt; = props =&gt; &#123; const &#123; logo, className, alt &#125; = props return ( &lt;img src=&#123;logo&#125; className=&#123;className&#125; alt=&#123;alt&#125; /&gt; )&#125; React.FC显式地定义了返回类型，其他方式是隐式推导的 React.FC对静态属性：displayName、propTypes、defaultProps提供了类型检查和自动补全 React.FC为children提供了隐式的类型（ReactElement | null） 有状态组件可以是一个类组件且存在props和state属性 如果使用typescript声明则如下所示： 12345678910111213141516171819import * as React from &#x27;react&#x27;interface IProps &#123; color: string, size?: string,&#125;interface IState &#123; count: number,&#125;class App extends React.Component&lt;IProps, IState&gt; &#123; public state = &#123; count: 1, &#125; public render () &#123; return ( &lt;div&gt;Hello world&lt;/div&gt; ) &#125;&#125; 上述通过泛型对props、state进行类型定义，然后在使用的时候就可以在编译器中获取更好的智能提示 关于Component泛型类的定义，可以参考下 React 的类型定义文件 node_modules/@types/react/index.d.ts，如下所示： 1234567class Component&lt;P, S&gt; &#123; readonly props: Readonly&lt;&#123; children?: ReactNode &#125;&gt; &amp; Readonly&lt;P&gt;; state: Readonly&lt;S&gt;;&#125; 从上述可以看到，state属性也定义了可读类型，目的是为了防止直接调用this.state更新状态 受控组件受控组件的特性在于元素的内容通过组件的状态state进行控制 由于组件内部的事件是合成事件，不等同于原生事件， 例如一个input组件修改内部的状态，常见的定义的时候如下所示： 123private updateValue(e: React.ChangeEvent&lt;HTMLInputElement&gt;) &#123; this.setState(&#123; itemText: e.target.value &#125;)&#125; 常用Event 事件对象类型： ClipboardEvent&lt;T = Element&gt; 剪贴板事件对象 DragEvent&lt;T = Element&gt; 拖拽事件对象 ChangeEvent&lt;T = Element&gt; Change 事件对象 KeyboardEvent&lt;T = Element&gt; 键盘事件对象 MouseEvent&lt;T = Element&gt; 鼠标事件对象 TouchEvent&lt;T = Element&gt; 触摸事件对象 WheelEvent&lt;T = Element&gt; 滚轮事件对象 AnimationEvent&lt;T = Element&gt; 动画事件对象 TransitionEvent&lt;T = Element&gt; 过渡事件对象 T接收一个DOM 元素类型 三、总结上述只是简单的在react项目使用typescript，但在编写react项目的时候，还存在hooks、默认参数、以及store等等…… typescript在框架中使用的学习成本相对会更高，需要不断编写才能熟练","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说对 TypeScript 中命名空间与模块的理解？区别？","slug":"ts.说说对 TypeScript 中命名空间与模块的理解？区别？","date":"2022-08-05T03:16:40.153Z","updated":"2022-08-05T03:19:41.477Z","comments":true,"path":"2022/08/05/ts.说说对 TypeScript 中命名空间与模块的理解？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E5%AF%B9%20TypeScript%20%E4%B8%AD%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8E%E6%A8%A1%E5%9D%97%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说对 TypeScript 中命名空间与模块的理解？区别？ 一、模块TypeScript 与ECMAScript 2015 一样，任何包含顶级 import 或者 export 的文件都被当成一个模块 相反地，如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的 例如我们在在一个 TypeScript 工程下建立一个文件 1.ts，声明一个变量a，如下： 1const a = 1 然后在另一个文件同样声明一个变量a，这时候会出现错误信息 提示重复声明a变量，但是所处的空间是全局的 如果需要解决这个问题，则通过import或者export引入模块系统即可，如下： 123const a = 10;export default a 在typescript中，export关键字可以导出变量或者类型，用法与es6模块一致，如下： 1234export const a = 1export type Person = &#123; name: String&#125; 通过import 引入模块，如下： 1import &#123; a, Person &#125; from &#x27;./export&#x27;; 二、命名空间命名空间一个最明确的目的就是解决重名问题 命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的 这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中 TypeScript 中命名空间使用 namespace 来定义，语法格式如下： 1234namespace SomeNameSpaceName &#123; export interface ISomeInterfaceName &#123; &#125; export class SomeClassName &#123; &#125; &#125; 以上定义了一个命名空间 SomeNameSpaceName，如果我们需要在外部可以调用 SomeNameSpaceName 中的类和接口，则需要在类和接口添加 export 关键字 使用方式如下： 1SomeNameSpaceName.SomeClassName 命名空间本质上是一个对象，作用是将一系列相关的全局变量组织到一个对象的属性，如下： 1234567namespace Letter &#123; export let a = 1; export let b = 2; export let c = 3; // ... export let z = 26;&#125; 编译成js如下： 12345678var Letter;(function (Letter) &#123; Letter.a = 1; Letter.b = 2; Letter.c = 3; // ... Letter.z = 26;&#125;)(Letter || (Letter = &#123;&#125;)); 三、区别 命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中 像命名空间一样，模块可以包含代码和声明。不同的是模块可以声明它的依赖 在正常的TS项目开发过程中并不建议用命名空间，但通常在通过 d.ts 文件标记 js 库类型的时候使用命名空间，主要作用是给编译器编写代码的时候参考使用","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中装饰器的理解？应用场景？","slug":"ts.说说你对 TypeScript 中装饰器的理解？应用场景？","date":"2022-08-05T03:16:40.152Z","updated":"2022-08-05T03:20:25.567Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中装饰器的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中装饰器的理解？应用场景？ 一、是什么装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上 是一种在不改变原类和使用继承的情况下，动态地扩展对象功能 同样的，本质也不是什么高大上的结构，就是一个普通的函数，@expression 的形式其实是Object.defineProperty的语法糖 expression求值后必须也是一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入 二、使用方式由于typescript是一个实验性特性，若要使用，需要在tsconfig.json文件启动，如下： 123456&#123; &quot;compilerOptions&quot;: &#123; &quot;target&quot;: &quot;ES5&quot;, &quot;experimentalDecorators&quot;: true &#125;&#125; typescript装饰器的使用和javascript基本一致 类的装饰器可以装饰： 类 方法/属性 参数 访问器 类装饰例如声明一个函数 addAge 去给 Class 的属性 age 添加年龄. 12345678910111213141516function addAge(constructor: Function) &#123; constructor.prototype.age = 18;&#125;@addAgeclass Person&#123; name: string; age!: number; constructor() &#123; this.name = &#x27;huihui&#x27;; &#125;&#125;let person = new Person();console.log(person.age); // 18 上述代码，实际等同于以下形式： 1Person = addAge(function Person() &#123; ... &#125;); 上述可以看到，当装饰器作为修饰类的时候，会把构造器传递进去。constructor.prototype.age 就是在每一个实例化对象上面添加一个 age 属性 方法/属性装饰同样，装饰器可以用于修饰类的方法，这时候装饰器函数接收的参数变成了： target：对象的原型 propertyKey：方法的名称 descriptor：方法的属性描述符 可以看到，这三个属性实际就是Object.defineProperty的三个参数，如果是类的属性，则没有传递第三个参数 如下例子： 12345678910111213141516171819202122232425262728293031323334353637// 声明装饰器修饰方法/属性function method(target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123; console.log(target); console.log(&quot;prop &quot; + propertyKey); console.log(&quot;desc &quot; + JSON.stringify(descriptor) + &quot;\\n\\n&quot;); descriptor.writable = false;&#125;;function property(target: any, propertyKey: string) &#123; console.log(&quot;target&quot;, target) console.log(&quot;propertyKey&quot;, propertyKey)&#125;class Person&#123; @property name: string; constructor() &#123; this.name = &#x27;huihui&#x27;; &#125; @method say()&#123; return &#x27;instance method&#x27;; &#125; @method static run()&#123; return &#x27;static method&#x27;; &#125;&#125;const xmz = new Person();// 修改实例方法sayxmz.say = function() &#123; return &#x27;edit&#x27;&#125; 输出如下图所示： 参数装饰接收3个参数，分别是： target ：当前对象的原型 propertyKey ：参数的名称 index：参数数组中的位置 12345678910111213function logParameter(target: Object, propertyName: string, index: number) &#123; console.log(target); console.log(propertyName); console.log(index);&#125;class Employee &#123; greet(@logParameter message: string): string &#123; return `hello $&#123;message&#125;`; &#125;&#125;const emp = new Employee();emp.greet(&#x27;hello&#x27;); 输入如下图： 访问器装饰使用起来方式与方法装饰一致，如下： 1234567891011121314151617function modification(target: Object, propertyKey: string, descriptor: PropertyDescriptor) &#123; console.log(target); console.log(&quot;prop &quot; + propertyKey); console.log(&quot;desc &quot; + JSON.stringify(descriptor) + &quot;\\n\\n&quot;);&#125;;class Person&#123; _name: string; constructor() &#123; this._name = &#x27;huihui&#x27;; &#125; @modification get name() &#123; return this._name &#125;&#125; 装饰器工厂如果想要传递参数，使装饰器变成类似工厂函数，只需要在装饰器函数内部再函数一个函数即可，如下： 12345678910111213141516function addAge(age: number) &#123; return function(constructor: Function) &#123; constructor.prototype.age = age &#125;&#125;@addAge(10)class Person&#123; name: string; age!: number; constructor() &#123; this.name = &#x27;huihui&#x27;; &#125;&#125;let person = new Person(); 执行顺序当多个装饰器应用于一个声明上，将由上至下依次对装饰器表达式求值，求值的结果会被当作函数，由下至上依次调用，例如如下： 12345678910111213141516171819202122232425function f() &#123; console.log(&quot;f(): evaluated&quot;); return function (target, propertyKey: string, descriptor: PropertyDescriptor) &#123; console.log(&quot;f(): called&quot;); &#125;&#125;function g() &#123; console.log(&quot;g(): evaluated&quot;); return function (target, propertyKey: string, descriptor: PropertyDescriptor) &#123; console.log(&quot;g(): called&quot;); &#125;&#125;class C &#123; @f() @g() method() &#123;&#125;&#125;// 输出f(): evaluatedg(): evaluatedg(): calledf(): called 三、应用场景可以看到，使用装饰器存在两个显著的优点： 代码可读性变强了，装饰器命名相当于一个注释 在不改变原有代码情况下，对原来功能进行扩展 后面的使用场景中，借助装饰器的特性，除了提高可读性之后，针对已经存在的类，可以通过装饰器的特性，在不改变原有代码情况下，对原来功能进行扩展","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中高级类型的理解？有哪些？","slug":"ts.说说你对 TypeScript 中高级类型的理解？有哪些？","date":"2022-08-05T03:16:40.150Z","updated":"2022-08-05T03:19:59.338Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中高级类型的理解？有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中高级类型的理解？有哪些？ 一、是什么除了string、number、boolean 这种基础类型外，在 typescript 类型声明中还存在一些高级的类型应用 这些高级类型，是typescript为了保证语言的灵活性，所使用的一些语言特性。这些特性有助于我们应对复杂多变的开发场景 二、有哪些常见的高级类型有如下： 交叉类型 联合类型 类型别名 类型索引 类型约束 映射类型 条件类型 交叉类型通过 &amp; 将多个类型合并为一个类型，包含了所需的所有类型的特性，本质上是一种并的操作 语法如下： 1T &amp; U 适用于对象合并场景，如下将声明一个函数，将两个对象合并成一个对象并返回： 123456789101112function extend&lt;T , U&gt;(first: T, second: U) : T &amp; U &#123; let result: &lt;T &amp; U&gt; = &#123;&#125; for (let key in first) &#123; result[key] = first[key] &#125; for (let key in second) &#123; if(!result.hasOwnProperty(key)) &#123; result[key] = second[key] &#125; &#125; return result&#125; 联合类型联合类型的语法规则和逻辑 “或” 的符号一致，表示其类型为连接的多个类型中的任意一个，本质上是一个交的关系 语法如下： 1T | U 例如 number | string | boolean 的类型只能是这三个的一种，不能共存 如下所示： 12345678function formatCommandline(command: string[] | string) &#123; let line = &#x27;&#x27;; if (typeof command === &#x27;string&#x27;) &#123; line = command.trim(); &#125; else &#123; line = command.join(&#x27; &#x27;).trim(); &#125;&#125; 类型别名类型别名会给一个类型起个新名字，类型别名有时和接口很像，但是可以作用于原始值、联合类型、元组以及其它任何你需要手写的类型 可以使用 type SomeName = someValidTypeAnnotation的语法来创建类型别名： 12345type some = boolean | stringconst b: some = true // okconst c: some = &#x27;hello&#x27; // okconst d: some = 123 // 不能将类型“123”分配给类型“some” 此外类型别名可以是泛型: 1type Container&lt;T&gt; = &#123; value: T &#125;; 也可以使用类型别名来在属性里引用自己： 12345type Tree&lt;T&gt; = &#123; value: T; left: Tree&lt;T&gt;; right: Tree&lt;T&gt;;&#125; 可以看到，类型别名和接口使用十分相似，都可以描述一个对象或者函数 两者最大的区别在于，interface只能用于定义对象类型，而 type 的声明方式除了对象之外还可以定义交叉、联合、原始类型等，类型声明的方式适用范围显然更加广泛 类型索引keyof 类似于 Object.keys ，用于获取一个接口中 Key 的联合类型。 12345678interface Button &#123; type: string text: string&#125;type ButtonKeys = keyof Button// 等效于type ButtonKeys = &quot;type&quot; | &quot;text&quot; 类型约束通过关键字 extend 进行约束，不同于在 class 后使用 extends 的继承作用，泛型内使用的主要作用是对泛型加以约束 1234567type BaseType = string | number | boolean// 这里表示 copy 的参数// 只能是字符串、数字、布尔这几种基础类型function copy&lt;T extends BaseType&gt;(arg: T): T &#123; return arg&#125; 类型约束通常和类型索引一起使用，例如我们有一个方法专门用来获取对象的值，但是这个对象并不确定，我们就可以使用 extends 和 keyof 进行约束。 123456function getValue&lt;T, K extends keyof T&gt;(obj: T, key: K) &#123; return obj[key]&#125;const obj = &#123; a: 1 &#125;const a = getValue(obj, &#x27;a&#x27;) 映射类型通过 in 关键字做类型的映射，遍历已有接口的 key 或者是遍历联合类型，如下例子： 12345678910type Readonly&lt;T&gt; = &#123; readonly [P in keyof T]: T[P];&#125;;interface Obj &#123; a: string b: string&#125;type ReadOnlyObj = Readonly&lt;Obj&gt; 上述的结构，可以分成这些步骤： keyof T：通过类型索引 keyof 的得到联合类型 ‘a’ | ‘b’ P in keyof T 等同于 p in ‘a’ | ‘b’，相当于执行了一次 forEach 的逻辑，遍历 ‘a’ | ‘b’ 所以最终ReadOnlyObj的接口为下述： 1234interface ReadOnlyObj &#123; readonly a: string; readonly b: string;&#125; 条件类型条件类型的语法规则和三元表达式一致，经常用于一些类型不确定的情况。 1T extends U ? X : Y 上面的意思就是，如果 T 是 U 的子集，就是类型 X，否则为类型 Y 三、总结可以看到，如果只是掌握了 typeScript 的一些基础类型，可能很难游刃有余的去使用 typeScript，需要了解一些typescript的高阶用法，在实践场景中，还有更多更复杂的组合，需要在实践中慢慢体会","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中泛型的理解？应用场景？","slug":"ts.说说你对 TypeScript 中泛型的理解？应用场景？","date":"2022-08-05T03:16:40.149Z","updated":"2022-08-05T03:19:53.689Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中泛型的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中泛型的理解？应用场景？ 一、是什么泛型程序设计（generic programming）是程序设计语言的一种风格或范式 泛型允许我们在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型 在typescript中，定义函数，接口或者类的时候，不预先定义好具体的类型，而在使用的时候在指定类型的一种特性 假设我们用一个函数，它可接受一个 number 参数并返回一个number 参数，如下写法： 123function returnItem (para: number): number &#123; return para&#125; 如果我们打算接受一个 string 类型，然后再返回 string类型，则如下写法： 123function returnItem (para: string): string &#123; return para&#125; 上述两种编写方式，存在一个最明显的问题在于，代码重复度比较高 虽然可以使用 any类型去替代，但这也并不是很好的方案，因为我们的目的是接收什么类型的参数返回什么类型的参数，即在运行时传入参数我们才能确定类型 这种情况就可以使用泛型，如下所示： 123function returnItem&lt;T&gt;(para: T): T &#123; return para&#125; 可以看到，泛型给予开发者创造灵活、可重用代码的能力 二、使用方式泛型通过&lt;&gt;的形式进行表述，可以声明： 函数 接口 类 函数声明声明函数的形式如下： 123function returnItem&lt;T&gt;(para: T): T &#123; return para&#125; 定义泛型的时候，可以一次定义「多个类型参数」，比如我们可以同时定义泛型 T和 泛型 U： 12345function swap&lt;T, U&gt;(tuple: [T, U]): [U, T] &#123; return [tuple[1], tuple[0]];&#125;swap([7, &#x27;seven&#x27;]); // [&#x27;seven&#x27;, 7] 接口声明声明接口的形式如下： 123interface ReturnItemFn&lt;T&gt; &#123; (para: T): T&#125; 那么当我们想传入一个number作为参数的时候，就可以这样声明函数: 1const returnItem: ReturnItemFn&lt;number&gt; = para =&gt; para 类声明使用泛型声明类的时候，既可以作用于类本身，也可以作用于类的成员函数 下面简单实现一个元素同类型的栈结构，如下所示： 1234567891011class Stack&lt;T&gt; &#123; private arr: T[] = [] public push(item: T) &#123; this.arr.push(item) &#125; public pop() &#123; this.arr.pop() &#125;&#125; 使用方式如下： 1const stack = new Stacn&lt;number&gt;() 如果上述只能传递 string 和 number 类型，这时候就可以使用 &lt;T extends xx&gt; 的方式猜实现「约束泛型」，如下所示： 除了上述的形式，泛型更高级的使用如下： 例如要设计一个函数，这个函数接受两个参数，一个参数为对象，另一个参数为对象上的属性，我们通过这两个参数返回这个属性的值 这时候就设计到泛型的索引类型和约束类型共同实现 索引类型、约束类型索引类型 keyof T 把传入的对象的属性类型取出生成一个联合类型，这里的泛型 U 被约束在这个联合类型中，如下所示： 123function getValue&lt;T extends object, U extends keyof T&gt;(obj: T, key: U) &#123; return obj[key] // ok&#125; 上述为什么需要使用泛型约束，而不是直接定义第一个参数为 object类型，是因为默认情况 object 指的是&#123;&#125;，而我们接收的对象是各种各样的，一个泛型来表示传入的对象类型，比如 T extends object 使用如下图所示： 多类型约束例如如下需要实现两个接口的类型约束： 1234567interface FirstInterface &#123; doSomething(): number&#125;interface SecondInterface &#123; doSomethingElse(): string&#125; 可以创建一个接口继承上述两个接口，如下： 123interface ChildInterface extends FirstInterface, SecondInterface &#123;&#125; 正确使用如下： 1234567891011class Demo&lt;T extends ChildInterface&gt; &#123; private genericProperty: T constructor(genericProperty: T) &#123; this.genericProperty = genericProperty &#125; useT() &#123; this.genericProperty.doSomething() this.genericProperty.doSomethingElse() &#125;&#125; 通过泛型约束就可以达到多类型约束的目的 三、应用场景通过上面初步的了解，后述在编写 typescript 的时候，定义函数，接口或者类的时候，不预先定义好具体的类型，而在使用的时候在指定类型的一种特性的时候，这种情况下就可以使用泛型 灵活的使用泛型定义类型，是掌握typescript 必经之路","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中函数的理解？与 JavaScript 函数的区别？","slug":"ts.说说你对 TypeScript 中函数的理解？与 JavaScript 函数的区别？","date":"2022-08-05T03:16:40.147Z","updated":"2022-08-05T03:20:03.863Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中函数的理解？与 JavaScript 函数的区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E4%B8%8E%20JavaScript%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中函数的理解？与 JavaScript 函数的区别？ 一、是什么函数是JavaScript 应用程序的基础，帮助我们实现抽象层、模拟类、信息隐藏和模块 在TypeScript 里，虽然已经支持类、命名空间和模块，但函数仍然是主要定义行为的方式，TypeScript 为 JavaScript 函数添加了额外的功能，丰富了更多的应用场景 函数类型在 TypeScript 类型系统中扮演着非常重要的角色，它们是可组合系统的核心构建块 二、使用方式跟javascript 定义函数十分相似，可以通过funciton 关键字、箭头函数等形式去定义，例如下面一个简单的加法函数： 1const add = (a: number, b: number) =&gt; a + b 上述只定义了函数的两个参数类型，这个时候整个函数虽然没有被显式定义，但是实际上TypeScript 编译器是能够通过类型推断到这个函数的类型，如下图所示： 当鼠标放置在第三行add函数名的时候，会出现完整的函数定义类型，通过: 的形式来定义参数类型，通过 =&gt; 连接参数和返回值类型 当我们没有提供函数实现的情况下，有两种声明函数类型的方式，如下所示： 1234567// 方式一type LongHand = &#123; (a: number): number;&#125;;// 方式二type ShortHand = (a: number) =&gt; number; 当存在函数重载时，只能使用方式一的形式 可选参数当函数的参数可能是不存在的，只需要在参数后面加上 ? 代表参数可能不存在，如下： 1const add = (a: number, b?: number) =&gt; a + (b ? b : 0) 这时候参数b可以是number类型或者undefined类型，即可以传一个number类型或者不传都可以 剩余类型剩余参数与JavaScript的语法类似，需要用 ... 来表示剩余参数 如果剩余参数 rest 是一个由number类型组成的数组，则如下表示： 1const add = (a: number, ...rest: number[]) =&gt; rest.reduce(((a, b) =&gt; a + b), a) 函数重载允许创建数项名称相同但输入输出类型或个数不同的子程序，它可以简单地称为一个单独功能可以执行多项任务的能力 关于typescript函数重载，必须要把精确的定义放在前面，最后函数实现时，需要使用 |操作符或者?操作符，把所有可能的输入类型全部包含进去，用于具体实现 这里的函数重载也只是多个函数的声明，具体的逻辑还需要自己去写，typescript并不会真的将你的多个重名 function的函数体进行合并 例如我们有一个add函数，它可以接收 string类型的参数进行拼接，也可以接收 number 类型的参数进行相加，如下： 1234567891011121314// 上边是声明function add (arg1: string, arg2: string): stringfunction add (arg1: number, arg2: number): number// 因为我们在下边有具体函数的实现，所以这里并不需要添加 declare 关键字// 下边是实现function add (arg1: string | number, arg2: string | number) &#123; // 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 arg1 + arg2 if (typeof arg1 === &#x27;string&#x27; &amp;&amp; typeof arg2 === &#x27;string&#x27;) &#123; return arg1 + arg2 &#125; else if (typeof arg1 === &#x27;number&#x27; &amp;&amp; typeof arg2 === &#x27;number&#x27;) &#123; return arg1 + arg2 &#125;&#125; 三、区别从上面可以看到： 从定义的方式而言，typescript 声明函数需要定义参数类型或者声明返回值类型 typescript 在参数中，添加可选参数供使用者选择 typescript 增添函数重载功能，使用者只需要通过查看函数声明的方式，即可知道函数传递的参数个数以及类型","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中类的理解？应用场景？","slug":"ts.说说你对 TypeScript 中类的理解？应用场景？","date":"2022-08-05T03:16:40.146Z","updated":"2022-08-05T03:20:13.574Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中类的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中类的理解？应用场景？ 一、是什么类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础 类是一种用户定义的引用数据类型，也称类类型 传统的面向对象语言基本都是基于类的，JavaScript 基于原型的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class 关键字，虽然本质依然是构造函数，但是使用起来已经方便了许多 但是JavaScript 的class依然有一些特性还没有加入，比如修饰符和抽象类 TypeScript 的 class 支持面向对象的所有特性，比如 类、接口等 二、使用方式定义类的关键字为 class，后面紧跟类名，类可以包含以下几个模块（类的数据成员）： 「字段」 ：字段是类里面声明的变量。字段表示对象的有关数据。 「构造函数」：类实例化时调用，可以为类的对象分配内存。 「方法」：方法为对象要执行的操作 如下例子： 1234567891011121314class Car &#123; // 字段 engine:string; // 构造函数 constructor(engine:string) &#123; this.engine = engine &#125; // 方法 disp():void &#123; console.log(&quot;发动机为 : &quot;+this.engine) &#125; &#125; 继承类的继承使用过extends的关键字 12345678910111213141516class Animal &#123; move(distanceInMeters: number = 0) &#123; console.log(`Animal moved $&#123;distanceInMeters&#125;m.`); &#125;&#125;class Dog extends Animal &#123; bark() &#123; console.log(&#x27;Woof! Woof!&#x27;); &#125;&#125;const dog = new Dog();dog.bark();dog.move(10);dog.bark(); Dog是一个 派生类，它派生自 Animal 基类，派生类通常被称作子类，基类通常被称作 超类 Dog类继承了Animal类，因此实例dog也能够使用Animal类move方法 同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写，通过super关键字是对父类的直接引用，该关键字可以引用父类的属性和方法，如下： 123456789101112class PrinterClass &#123; doPrint():void &#123; console.log(&quot;父类的 doPrint() 方法。&quot;) &#125; &#125; class StringPrinter extends PrinterClass &#123; doPrint():void &#123; super.doPrint() // 调用父类的函数 console.log(&quot;子类的 doPrint()方法。&quot;) &#125; &#125; 修饰符可以看到，上述的形式跟ES6十分的相似，typescript在此基础上添加了三种修饰符： 公共 public：可以自由的访问类程序里定义的成员 私有 private：只能够在该类的内部进行访问 受保护 protect：除了在该类的内部可以访问，还可以在子类中仍然可以访问 私有修饰符只能够在该类的内部进行访问，实例对象并不能够访问 并且继承该类的子类并不能访问，如下图所示： 受保护修饰符跟私有修饰符很相似，实例对象同样不能访问受保护的属性，如下： 有一点不同的是 protected 成员在子类中仍然可以访问 除了上述修饰符之外，还有只读「修饰符」 只读修饰符通过readonly关键字进行声明，只读属性必须在声明时或构造函数里被初始化，如下： 除了实例属性之外，同样存在静态属性 静态属性这些属性存在于类本身上面而不是类的实例上，通过static进行定义，访问这些属性需要通过 类型.静态属性 的这种形式访问，如下所示： 12345class Square &#123; static width = &#x27;100px&#x27;&#125;console.log(Square.width) // 100px 上述的类都能发现一个特点就是，都能够被实例化，在 typescript中，还存在一种抽象类 抽象类抽象类做为其它派生类的基类使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法，如下所示： 123456abstract class Animal &#123; abstract makeSound(): void; move(): void &#123; console.log(&#x27;roaming the earch...&#x27;); &#125;&#125; 这种类并不能被实例化，通常需要我们创建子类去继承，如下： 1234567891011class Cat extends Animal &#123; makeSound() &#123; console.log(&#x27;miao miao&#x27;) &#125;&#125;const cat = new Cat()cat.makeSound() // miao miaocat.move() // roaming the earch... 三、应用场景除了日常借助类的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在 React 工程中是很常用的，如下： 1export default class Carousel extends React.Component&lt;Props, State&gt; &#123;&#125; 由于组件需要传入 props 的类型 Props ，同时有需要设置默认 props 即 defaultProps，这时候更加适合使用class作为接口 先声明一个类，这个类包含组件 props 所需的类型和初始值： 12345678910111213// props的类型export default class Props &#123; public children: Array&lt;React.ReactElement&lt;any&gt;&gt; | React.ReactElement&lt;any&gt; | never[] = [] public speed: number = 500 public height: number = 160 public animation: string = &#x27;easeInOutQuad&#x27; public isAuto: boolean = true public autoPlayInterval: number = 4500 public afterChange: () =&gt; &#123;&#125; public beforeChange: () =&gt; &#123;&#125; public selesctedColor: string public showDots: boolean = true&#125; 当我们需要传入 props 类型的时候直接将 Props 作为接口传入，此时 Props的作用就是接口，而当需要我们设置defaultProps初始值的时候，我们只需要: 1public static defaultProps = new Props() Props 的实例就是 defaultProps 的初始值，这就是 class作为接口的实际应用，我们用一个 class 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中接口的理解？应用场景？","slug":"ts.说说你对 TypeScript 中接口的理解？应用场景？","date":"2022-08-05T03:16:40.144Z","updated":"2022-08-05T03:20:08.356Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中接口的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中接口的理解？应用场景？ 一、是什么「接口」是一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的「类」去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法 简单来讲，一个接口所描述的是一个对象相关的属性和方法，但并不提供具体创建此对象实例的方法 typescript的核心功能之一就是对类型做检测，虽然这种检测方式是“鸭式辨型法”，而接口的作用就是为为这些类型命名和为你的代码或第三方代码定义一个约定 二、使用方式接口定义如下： 12interface interface_name &#123; &#125; 例如有一个函数，这个函数接受一个 User 对象，然后返回这个 User 对象的 name 属性: 1const getUserName = (user) =&gt; user.name 可以看到，参数需要有一个user的name属性，可以通过接口描述user参数的结构 123456interface User &#123; name: string age: number&#125;const getUserName = (user: User) =&gt; user.name 这些属性并不一定全部实现，上述传入的对象必须拥有name和age属性，否则typescript在编译阶段会报错，如下图： 如果不想要age属性的话，这时候可以采用「可选属性」，如下表示： 1234interface User &#123; name: string age?: number&#125; 这时候age属性则可以是number类型或者undefined类型 有些时候，我们想要一个属性变成只读属性，在typescript只需要使用readonly声明，如下： 12345interface User &#123; name: string age?: number readonly isMale: boolean&#125; 当我们修改属性的时候，就会出现警告，如下所示： 这是属性中有一个函数，可以如下表示： 123456interface User &#123; name: string age?: number readonly isMale: boolean say: (words: string) =&gt; string&#125; 如果传递的对象不仅仅是上述的属性，这时候可以使用： 类型推断 1234567interface User &#123; name: string age: number&#125;const getUserName = (user: User) =&gt; user.namegetUserName(&#123;color: &#x27;yellow&#x27;&#125; as User) 给接口添加字符串「索引签名」 12345interface User &#123; name: string age: number [propName: string]: any;&#125; 接口还能实现继承，如下图： 也可以继承多个，父类通过逗号隔开，如下： 123456789101112interface Father &#123; color: String&#125;interface Mother &#123; height: Number&#125;interface Son extends Father,Mother&#123; name: string age: Number&#125; 三、应用场景例如在javascript中定义一个函数，用来获取用户的姓名和年龄： 1234const getUserInfo = function(user) &#123; // ... return name: $&#123;user.name&#125;, age: $&#123;user.age&#125; &#125; 如果多人开发的都需要用到这个函数的时候，如果没有注释，则可能出现各种运行时的错误，这时候就可以使用接口定义参数变量： 123456789101112// 先定义一个接口interface IUser &#123; name: string; age: number;&#125;const getUserInfo = (user: IUser): string =&gt; &#123; return `name: $&#123;user.name&#125;, age: $&#123;user.age&#125;`;&#125;;// 正确的调用getUserInfo(&#123;name: &quot;koala&quot;, age: 18&#125;); 包括后面讲到类的时候也会应用到接口 https://www.tslang.cn/docs/handbook/interfaces.html","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 中枚举类型的理解？应用场景？","slug":"ts.说说你对 TypeScript 中枚举类型的理解？应用场景？","date":"2022-08-05T03:16:40.143Z","updated":"2022-08-05T03:20:20.448Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 中枚举类型的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E4%B8%AD%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 中枚举类型的理解？应用场景？ 一、是什么枚举是一个被命名的整型常数的集合，用于声明一组命名的常数,当一个变量有几种可能的取值时,可以将它定义为枚举类型 通俗来说，枚举就是一个对象的所有可能取值的集合 在日常生活中也很常见，例如表示星期的SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY就可以看成是一个枚举 枚举的说明与结构和联合相似，其形式为： 123456enum 枚举名&#123; 标识符①[=整型常数], 标识符②[=整型常数], ... 标识符N[=整型常数],&#125;枚举变量; 二、使用枚举的使用是通过enum关键字进行定义，形式如下： 1enum xxx &#123; ... &#125; 声明关键字为枚举类型的方式如下： 12// 声明d为枚举类型Directionlet d: Direction; 类型可以分成： 数字枚举 字符串枚举 异构枚举 数字枚举当我们声明一个枚举类型是,虽然没有给它们赋值,但是它们的值其实是默认的数字类型,而且默认从0开始依次累加: 1234567891011enum Direction &#123; Up, // 值默认为 0 Down, // 值默认为 1 Left, // 值默认为 2 Right // 值默认为 3&#125;console.log(Direction.Up === 0); // trueconsole.log(Direction.Down === 1); // trueconsole.log(Direction.Left === 2); // trueconsole.log(Direction.Right === 3); // true 如果我们将第一个值进行赋值后，后面的值也会根据前一个值进行累加1： 12345678enum Direction &#123; Up = 10, Down, Left, Right&#125;console.log(Direction.Up, Direction.Down, Direction.Left, Direction.Right); // 10 11 12 13 字符串枚举12345678910枚举类型的值其实也可以是字符串类型：enum Direction &#123; Up = &#x27;Up&#x27;, Down = &#x27;Down&#x27;, Left = &#x27;Left&#x27;, Right = &#x27;Right&#x27;&#125;console.log(Direction[&#x27;Right&#x27;], Direction.Up); // Right Up 如果设定了一个变量为字符串之后，后续的字段也需要赋值字符串，否则报错： 123456enum Direction &#123; Up = &#x27;UP&#x27;, Down, // error TS1061: Enum member must have initializer Left, // error TS1061: Enum member must have initializer Right // error TS1061: Enum member must have initializer&#125; 异构枚举即将数字枚举和字符串枚举结合起来混合起来使用，如下： 1234enum BooleanLikeHeterogeneousEnum &#123; No = 0, Yes = &quot;YES&quot;,&#125; 通常情况下我们很少会使用异构枚举 本质现在一个枚举的案例如下： 123456enum Direction &#123; Up, Down, Left, Right&#125; 通过编译后，javascript如下： 1234567var Direction;(function (Direction) &#123; Direction[Direction[&quot;Up&quot;] = 0] = &quot;Up&quot;; Direction[Direction[&quot;Down&quot;] = 1] = &quot;Down&quot;; Direction[Direction[&quot;Left&quot;] = 2] = &quot;Left&quot;; Direction[Direction[&quot;Right&quot;] = 3] = &quot;Right&quot;;&#125;)(Direction || (Direction = &#123;&#125;)); 上述代码可以看到， Direction[Direction[&quot;Up&quot;] = 0] = &quot;Up&quot;可以分成 Direction[“Up”] = 0 Direction[0] = “Up” 所以定义枚举类型后，可以通过正反映射拿到对应的值，如下： 123456789enum Direction &#123; Up, Down, Left, Right&#125;console.log(Direction.Up === 0); // trueconsole.log(Direction[0]); // Up 并且多处定义的枚举是可以进行合并操作，如下： 12345678910enum Direction &#123; Up = &#x27;Up&#x27;, Down = &#x27;Down&#x27;, Left = &#x27;Left&#x27;, Right = &#x27;Right&#x27;&#125;enum Direction &#123; Center = 1&#125; 编译后，js代码如下： 12345678910var Direction;(function (Direction) &#123; Direction[&quot;Up&quot;] = &quot;Up&quot;; Direction[&quot;Down&quot;] = &quot;Down&quot;; Direction[&quot;Left&quot;] = &quot;Left&quot;; Direction[&quot;Right&quot;] = &quot;Right&quot;;&#125;)(Direction || (Direction = &#123;&#125;));(function (Direction) &#123; Direction[Direction[&quot;Center&quot;] = 1] = &quot;Center&quot;;&#125;)(Direction || (Direction = &#123;&#125;)); 可以看到，Direction对象属性回叠加 三、应用场景就拿回生活的例子，后端返回的字段使用 0 - 6 标记对应的日期，这时候就可以使用枚举可提高代码可读性，如下： 123456enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;console.log(Days[&quot;Sun&quot;] === 0); // trueconsole.log(Days[&quot;Mon&quot;] === 1); // trueconsole.log(Days[&quot;Tue&quot;] === 2); // trueconsole.log(Days[&quot;Sat&quot;] === 6); // true 包括后端日常返回0、1 等等状态的时候，我们都可以通过枚举去定义，这样可以提高代码的可读性，便于后续的维护","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说 Typescript 的数据类型有哪些？","slug":"ts.说说 Typescript 的数据类型有哪些？","date":"2022-08-05T03:16:40.141Z","updated":"2022-08-05T03:18:15.162Z","comments":true,"path":"2022/08/05/ts.说说 Typescript 的数据类型有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%20Typescript%20%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说 Typescript 的数据类型有哪些？ 一、是什么typescript 和 javascript几乎一样，拥有相同的数据类型，另外在javascript基础上提供了更加实用的类型供开发使用 在开发阶段，可以为明确的变量定义为某种类型，这样typescript就能在编译阶段进行类型检查，当类型不合符预期结果的时候则会出现错误提示 二、有哪些typescript 的数据类型主要有如下： boolean（布尔类型） number（数字类型） string（字符串类型） array（数组类型） tuple（元组类型） enum（枚举类型） any（任意类型） null 和 undefined 类型 void 类型 never 类型 object 对象类型 boolean布尔类型 123let flag:boolean = true;// flag = 123; // 错误flag = false; //正确 number数字类型，和javascript一样，typescript的数值类型都是浮点数，可支持二进制、八进制、十进制和十六进制 123let num:number = 123;// num = &#x27;456&#x27;; // 错误num = 456; //正确 进制表示： 1234let decLiteral: number = 6; // 十进制let hexLiteral: number = 0xf00d; // 十六进制let binaryLiteral: number = 0b1010; // 二进制let octalLiteral: number = 0o744; // 八进制 string字符串类型，和JavaScript一样，可以使用双引号（&quot;）或单引号（&#39;）表示字符串 12let str:string = &#x27;this is ts&#x27;;str = &#x27;test&#x27;; 作为超集，当然也可以使用模版字符串``进行包裹，通过 ${} 嵌入变量 123let name: string = `Gene`;let age: number = 37;let sentence: string = `Hello, my name is $&#123; name &#125; array数组类型，跟javascript一致，通过[]进行包裹，有两种写法： 方式一：元素类型后面接上 [] 12let arr:string[] = [&#x27;12&#x27;, &#x27;23&#x27;];arr = [&#x27;45&#x27;, &#x27;56&#x27;]; 方式二：使用数组泛型，Array&lt;元素类型&gt;： 12let arr:Array&lt;number&gt; = [1, 2];arr = [&#x27;45&#x27;, &#x27;56&#x27;]; tuple元祖类型，允许表示一个已知元素数量和类型的数组，各元素的类型不必相同 123let tupleArr:[number, string, boolean]; tupleArr = [12, &#x27;34&#x27;, true]; //oktypleArr = [12, &#x27;34&#x27;] // no ok 赋值的类型、位置、个数需要和定义（声明）的类型、位置、个数一致 enumenum类型是对JavaScript标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字 12enum Color &#123;Red, Green, Blue&#125;let c: Color = Color.Green; any可以指定任何类型的值，在编程阶段还不清楚类型的变量指定一个类型，不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查，这时候可以使用any类型 使用any类型允许被赋值为任意类型，甚至可以调用其属性、方法 123let num:any = 123;num = &#x27;str&#x27;;num = true; 定义存储各种类型数据的数组时，示例代码如下： 12let arrayList: any[] = [1, false, &#x27;fine&#x27;];arrayList[1] = 100; null 和 和 undefined在JavaScript 中 null表示 “什么都没有”，是一个只有一个值的特殊类型，表示一个空对象引用，而undefined表示一个没有设置值的变量 默认情况下null和undefined是所有类型的子类型， 就是说你可以把 null和 undefined赋值给 number类型的变量 1234let num:number | undefined; // 数值类型 或者 undefinedconsole.log(num); // 正确num = 123;console.log(num); // 正确 但是ts配置了--strictNullChecks标记，null和undefined只能赋值给void和它们各自 void用于标识方法返回值的类型，表示该方法没有返回值。 123function hello(): void &#123; alert(&quot;Hello Runoob&quot;);&#125; nevernever是其他类型 （包括null和 undefined）的子类型，可以赋值给任何类型，代表从不会出现的值 但是没有类型是 never 的子类型，这意味着声明 never 的变量只能被 never类型所赋值。 never 类型一般用来指定那些总是会抛出异常、无限循环 1234567891011let a:never;a = 123; // 错误的写法a = (() =&gt; &#123; // 正确的写法 throw new Error(&#x27;错误&#x27;);&#125;)()// 返回never的函数必须存在无法达到的终点function error(message: string): never &#123; throw new Error(message);&#125; object对象类型，非原始类型，常见的形式通过&#123;&#125;进行包裹 12let obj:object;obj = &#123;name: &#x27;Wang&#x27;, age: 25&#125;; 三、总结和javascript基本一致，也分成： 基本类型 引用类型 在基础类型上，typescript增添了void、any、emum等原始类型","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你对 TypeScript 的理解？与 JavaScript 的区别？","slug":"ts.说说你对 TypeScript 的理解？与 JavaScript 的区别？","date":"2022-08-05T03:16:40.132Z","updated":"2022-08-05T03:19:48.106Z","comments":true,"path":"2022/08/05/ts.说说你对 TypeScript 的理解？与 JavaScript 的区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/ts.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20TypeScript%20%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E4%B8%8E%20JavaScript%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说你对 TypeScript 的理解？与 JavaScript 的区别？ 一、是什么TypeScript 是 JavaScript 的类型的超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等 超集，不得不说另外一个概念，子集，怎么理解这两个呢，举个例子，如果一个集合A里面的的所有元素集合B里面都存在，那么我们可以理解集合B是集合A的超集，集合A为集合B的子集 其是一种静态类型检查的语言，提供了类型注解，在代码编译阶段就可以检查出数据类型的错误 同时扩展了JavaScript 的语法，所以任何现有的JavaScript 程序可以不加改变的在 TypeScript 下工作 为了保证兼容性，typescript在编译阶段需要编译器编译成纯Javascript来运行，是为大型应用之开发而设计的语言，如下： tsx文件如下： 12const hello : string = &quot;Hello World!&quot;console.log(hello) 编译文件后： 12const hello = &quot;Hello World!&quot;console.log(hello) 二、特性typescript的特性主要有如下： 「类型批注和编译时类型检查」 ：在编译时批注变量类型 「类型推断」：ts中没有批注变量类型会自动推断变量的类型 「类型擦除」：在编译过程中批注的内容和接口会在运行时利用工具擦除 「接口」：ts中用接口来定义对象类型 「枚举」：用于取值被限定在一定范围内的场景 「Mixin」：可以接受任意类型的值 「泛型编程」：写代码时使用一些以后才指定的类型 「名字空间」：名字只在该区域内有效，其他区域可重复使用该名字而不冲突 「元组」：元组合并了不同类型的对象，相当于一个可以装不同类型数据的数组 … 类型批注通过类型批注提供在编译时启动类型检查的静态类型，这是可选的，而且可以忽略而使用JavaScript常规的动态类型 123function Add(left: number, right: number): number &#123; return left + right;&#125; 对于基本类型的批注是number、bool和string，而弱或动态类型的结构则是any类型 类型推断当类型没有给出时，TypeScript编译器利用类型推断来推断类型，如下： 1let str = &#x27;string&#x27; 变量str被推断为字符串类型，这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时 如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态any类型 接口接口简单来说就是用来描述对象的类型 数据的类型有number、null、string等数据格式，对象的类型就是用接口来描述的 123456789interface Person &#123; name: string; age: number;&#125;let tom: Person = &#123; name: &#x27;Tom&#x27;, age: 25&#125;; 三、区别 TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法 TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译 TypeScript 文件的后缀名 .ts （.ts，.tsx，.dts），JavaScript 文件是 .js 在编写 TypeScript 的文件的时候就会自动编译成 js 文件 更多的区别如下图所示：","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"}],"tags":[]},{"title":"说说你在使用React 过程中遇到的常见问题？解决方案?","slug":"React.说说你在使用React 过程中遇到的常见问题？解决方案_","date":"2022-08-05T02:37:09.819Z","updated":"2022-08-05T03:14:34.167Z","comments":true,"path":"2022/08/05/React.说说你在使用React 过程中遇到的常见问题？解决方案_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%9C%A8%E4%BD%BF%E7%94%A8React%20%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_/","excerpt":"","text":"说说你在使用React 过程中遇到的常见问题？解决方案? 一、前言在使用react开发项目过程中，每个人或多或少都会遇到一些”奇怪”的问题，本质上都是我们对其理解的不够透彻 react 系列，33个工作日，33次凌晨还在亮起的台灯，到今天就圆满画上句号了，比心 在系列中我们列出了很多比较经典的考题，工作中遇到的问题也往往就藏中其中，只是以不同的表现形式存在罢了 今天的题解不算题解，准确来说是对整个系列的一次贯穿，总结 目录: react 有什么特性 生命周期有哪些不同阶段？每个阶段对应的方法是？ state 和 props有什么区别？ super()和super(props)有什么区别？ setState执行机制？ React的事件机制？ 事件绑定的方式有哪些？ 构建组件的方式有哪些？区别？ 组件之间如何通信？ key有什么作用？ refs 的理解？应用场景？ Hooks的理解？解决了什么问题？ 如何引入css？ redux工作原理？ redux中间件有哪些？ react-router组件有哪些？ render触发时机？ 如何减少render？ JSX转化DOM过程？ 性能优化手段有哪些 如何做服务端渲染？ react 有什么特性主要的特性分为： JSX语法 单向数据绑定 虚拟DOM 声明式编程 Component 借助这些特性，react整体使用起来更加简单高效，组件式开发提高了代码的复用率 生命周期有哪些不同阶段？每个阶段对应的方法是？主要分成了新的生命周期和旧的生命周期： 新版生命周期整体流程如下图所示： 旧的生命周期流程图如下： state 和 props有什么区别？两者相同点： 两者都是 JavaScript 对象 两者都是用于保存信息 props 和 state 都能触发渲染更新 区别： props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化 props 在组件内部是不可修改的，但 state 在组件内部可以进行修改 state 是多变的、可以修改 super()和super(props)有什么区别？在React中，类组件基于ES6，所以在constructor中必须使用super 在调用super过程，无论是否传入props，React内部都会将porps赋值给组件实例porps属性中 如果只调用了super()，那么this.props在super()和构造函数结束之间仍是undefined setState执行机制？在react类组件的状态需要通过setState进行更改，在不同场景下对应不同的执行顺序： 在组件生命周期或React合成事件中，setState是异步 在setTimeout或者原生dom事件中，setState是同步 当我们批量更改state的值的时候，react内部会将其进行覆盖，只取最后一次的执行结果 当需要下一个state依赖当前state的时候，则可以在setState中传递一个回调函数进行下次更新 React的事件机制？React基于浏览器的事件机制自身实现了一套事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等 组件注册的事件最终会绑定在document这个 DOM上，而不是 React组件对应的 DOM，从而节省内存开销 自身实现了一套事件冒泡机制，阻止不同时间段的冒泡行为，需要对应使用不同的方法 事件绑定的方式有哪些？react常见的绑定方式有如下： render方法中使用bind render方法中使用箭头函数 constructor中bind 定义阶段使用箭头函数绑定 前两种方式在每次组件render的时候都会生成新的方法实例，性能问题欠缺 构建组件的方式有哪些？区别？组件的创建主要分成了三种方式： 函数式创建 继承 React.Component 创建 通过 React.createClass 方法创建 如今一般都是前两种方式，对于一些无状态的组件创建，建议使用函数式创建的方式，再比如hooks的机制下，函数式组件能做类组件对应的事情，所以建议都使用函数式的方式来创建组件 组件之间如何通信？组件间通信可以通过props、传递回调函数、context、redux等形式进行组件之间通讯 key有什么作用？使用key是react性能优化的手段，在一系列数据最前面插入元素，如果没有key的值，则所有的元素都需要进行更换，而有key的情况只需要将最新元素插入到前面，不涉及删除操作 在使用key的时候应保证： key 应该是唯一的 key不要使用随机值（随机数在下一次 render 时，会重新生成一个数字） 避免使用 index 作为 key refs 的理解？应用场景？Refs允许我们访问 DOM节点或在 render方法中创建的 React元素 下面的场景使用refs非常有用： 对Dom元素的焦点控制、内容选择、控制 对Dom元素的内容设置及媒体播放 对Dom元素的操作和对组件实例的操作 集成第三方 DOM 库 Hooks的理解？解决了什么问题？Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性 解决问题如下： 难以重用和共享组件中的与状态相关的逻辑 逻辑复杂的组件难以开发与维护，当我们的组件需要处理多个互不相关的 local state 时，每个生命周期函数中可能会包含着各种互不相关的逻辑在里面 类组件中的this增加学习成本，类组件在基于现有工具的优化上存在些许问题 由于业务变动，函数组件不得不改为类组件等等 如何引入css？常见的CSS引入方式有以下： 在组件内直接使用 组件中引入 .css 文件 组件中引入 .module.css 文件 CSS in JS 组件内直接使用css会导致大量的代码，而文件中直接引入css文件是全局作用域，发生层叠 引入.module.css文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写 css in js这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等 redux工作原理？redux要求我们把数据都放在 store公共存储空间 一个组件改变了 store 里的数据内容，其他组件就能感知到 store的变化，再来取数据，从而间接的实现了这些数据传递的功能 工作流程图如下所示： redux中间件有哪些？市面上有很多优秀的redux中间件，如： redux-thunk：用于异步操作 redux-logger：用于日志记录 react-router组件有哪些？常见的组件有： BrowserRouter、HashRouter Route Link、NavLink switch redirect render触发时机？在React 中，类组件只要执行了 setState 方法，就一定会触发 render 函数执行 函数组件useState 会判断当前值有无发生改变确定是否执行render方法，一旦父组件发生渲染，子组件也会渲染 如何减少render？父组件渲染导致子组件渲染，子组件并没有发生任何改变，这时候就可以从避免无谓的渲染，具体实现的方式有如下： shouldComponentUpdate PureComponent React.memo JSX转化DOM过程？1jsx`首先会转化成`React.createElement`这种形式，`React.createElement`作用是生成一个虚拟`Dom`对象，然后会通过`ReactDOM.render`进行渲染成真实`DOM 性能优化手段有哪些除了减少render的渲染之外，还可以通过以下手段进行优化： 除此之外， 常见性能优化常见的手段有如下： 避免使用内联函数 使用 React Fragments 避免额外标记 使用 Immutable 懒加载组件 事件绑定方式 服务端渲染 如何做服务端渲染？node server 接收客户端请求，得到当前的请求url 路径，然后在已有的路由表内查找到对应的组件，拿到需要请求的数据，将数据作为 props、context或者store 形式传入组件 然后基于 react 内置的服务端渲染方法 renderToString()把组件渲染为 html字符串在把最终的 html进行输出前需要将数据注入到浏览器端 浏览器开始进行渲染和节点对比，然后执行完成组件内事件绑定和一些交互，浏览器重用了服务端输出的 html 节点，整个流程结束","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说React服务端渲染怎么做？原理是什么？","slug":"React.说说React服务端渲染怎么做？原理是什么？","date":"2022-08-05T02:37:09.818Z","updated":"2022-08-05T03:15:06.954Z","comments":true,"path":"2022/08/05/React.说说React服务端渲染怎么做？原理是什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4React%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"说说React服务端渲染怎么做？原理是什么？ 一、是什么在SSR中，我们了解到Server-Side Rendering ，简称SSR，意为服务端渲染 指由服务侧完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程 其解决的问题主要有两个： SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面 加速首屏加载，解决首屏白屏问题 二、如何做在react中，实现SSR主要有两种形式： 手动搭建一个 SSR 框架 使用成熟的SSR 框架，如 Next.JS 这里主要以手动搭建一个SSR框架进行实现 首先通过express启动一个app.js文件，用于监听3000端口的请求，当请求根目录时，返回HTML，如下： 1234567891011121314const express = require(&#x27;express&#x27;)const app = express()app.get(&#x27;/&#x27;, (req,res) =&gt; res.send(`&lt;html&gt; &lt;head&gt; &lt;title&gt;ssr demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; Hello world &lt;/body&gt;&lt;/html&gt;`))app.listen(3000, () =&gt; console.log(&#x27;Exampleapp listening on port 3000!&#x27;)) 然后再服务器中编写react代码，在app.js中进行应引用 123456789import React from &#x27;react&#x27;const Home = () =&gt;&#123; return &lt;div&gt;home&lt;/div&gt;&#125;export default Home 为了让服务器能够识别JSX，这里需要使用webpakc对项目进行打包转换，创建一个配置文件webpack.server.js并进行相关配置，如下： 12345678910111213141516171819202122232425262728const path = require(&#x27;path&#x27;) //node的path模块const nodeExternals = require(&#x27;webpack-node-externals&#x27;)module.exports = &#123; target:&#x27;node&#x27;, mode:&#x27;development&#x27;, //开发模式 entry:&#x27;./app.js&#x27;, //入口 output: &#123; //打包出口 filename:&#x27;bundle.js&#x27;, //打包后的文件名 path:path.resolve(__dirname,&#x27;build&#x27;) //存放到根目录的build文件夹 &#125;, externals: [nodeExternals()], //保持node中require的引用方式 module: &#123; rules: [&#123; //打包规则 test: /\\.js?$/, //对所有js文件进行打包 loader:&#x27;babel-loader&#x27;, //使用babel-loader进行打包 exclude: /node_modules/,//不打包node_modules中的js文件 options: &#123; presets: [&#x27;react&#x27;,&#x27;stage-0&#x27;,[&#x27;env&#x27;, &#123; //loader时额外的打包规则,对react,JSX，ES6进行转换 targets: &#123; browsers: [&#x27;last 2versions&#x27;] //对主流浏览器最近两个版本进行兼容 &#125; &#125;]] &#125; &#125;] &#125;&#125; 接着借助react-dom提供了服务端渲染的 renderToString方法，负责把React组件解析成html 12345678910111213141516171819import express from &#x27;express&#x27;import React from &#x27;react&#x27;//引入React以支持JSX的语法import &#123; renderToString &#125; from &#x27;react-dom/server&#x27;//引入renderToString方法import Home from&#x27;./src/containers/Home&#x27;const app= express()const content = renderToString(&lt;Home/&gt;)app.get(&#x27;/&#x27;,(req,res) =&gt; res.send(`&lt;html&gt; &lt;head&gt; &lt;title&gt;ssr demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; $&#123;content&#125; &lt;/body&gt;&lt;/html&gt;`))app.listen(3001, () =&gt; console.log(&#x27;Exampleapp listening on port 3001!&#x27;)) 上面的过程中，已经能够成功将组件渲染到了页面上 但是像一些事件处理的方法，是无法在服务端完成，因此需要将组件代码在浏览器中再执行一遍，这种服务器端和客户端共用一套代码的方式就称之为「同构」 重构通俗讲就是一套React代码在服务器上运行一遍，到达浏览器又运行一遍： 服务端渲染完成页面结构 浏览器端渲染完成事件绑定 浏览器实现事件绑定的方式为让浏览器去拉取JS文件执行，让JS代码来控制，因此需要引入script标签 通过script标签为页面引入客户端执行的react代码，并通过express的static中间件为js文件配置路由，修改如下： 1234567891011121314151617181920212223import express from &#x27;express&#x27;import React from &#x27;react&#x27;//引入React以支持JSX的语法import &#123; renderToString &#125; from&#x27;react-dom/server&#x27;//引入renderToString方法import Home from &#x27;./src/containers/Home&#x27; const app = express()app.use(express.static(&#x27;public&#x27;));//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹 const content = renderToString(&lt;Home/&gt;) app.get(&#x27;/&#x27;,(req,res)=&gt;res.send(`&lt;html&gt; &lt;head&gt; &lt;title&gt;ssr demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; $&#123;content&#125; &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;`)) app.listen(3001, () =&gt;console.log(&#x27;Example app listening on port 3001!&#x27;)) 然后再客户端执行以下react代码，新建webpack.client.js作为客户端React代码的webpack配置文件如下： 12345678910111213141516171819202122232425const path = require(&#x27;path&#x27;) //node的path模块module.exports = &#123; mode:&#x27;development&#x27;, //开发模式 entry:&#x27;./src/client/index.js&#x27;, //入口 output: &#123; //打包出口 filename:&#x27;index.js&#x27;, //打包后的文件名 path:path.resolve(__dirname,&#x27;public&#x27;) //存放到根目录的build文件夹 &#125;, module: &#123; rules: [&#123; //打包规则 test: /\\.js?$/, //对所有js文件进行打包 loader:&#x27;babel-loader&#x27;, //使用babel-loader进行打包 exclude: /node_modules/, //不打包node_modules中的js文件 options: &#123; presets: [&#x27;react&#x27;,&#x27;stage-0&#x27;,[&#x27;env&#x27;, &#123; //loader时额外的打包规则,这里对react,JSX进行转换 targets: &#123; browsers: [&#x27;last 2versions&#x27;] //对主流浏览器最近两个版本进行兼容 &#125; &#125;]] &#125; &#125;] &#125;&#125; 这种方法就能够简单实现首页的react服务端渲染，过程对应如下图： 在做完初始渲染的时候，一个应用会存在路由的情况，配置信息如下： 123456789import React from &#x27;react&#x27; //引入React以支持JSXimport &#123; Route &#125; from &#x27;react-router-dom&#x27; //引入路由import Home from &#x27;./containers/Home&#x27; //引入Home组件export default ( &lt;div&gt; &lt;Route path=&quot;/&quot; exact component=&#123;Home&#125;&gt;&lt;/Route&gt; &lt;/div&gt;) 然后可以通过index.js引用路由信息，如下： 1234567891011121314import React from &#x27;react&#x27;import ReactDom from &#x27;react-dom&#x27;import &#123; BrowserRouter &#125; from&#x27;react-router-dom&#x27;import Router from&#x27;../Routers&#x27;const App= () =&gt; &#123; return ( &lt;BrowserRouter&gt; &#123;Router&#125; &lt;/BrowserRouter&gt; )&#125;ReactDom.hydrate(&lt;App/&gt;, document.getElementById(&#x27;root&#x27;)) 这时候控制台会存在报错信息，原因在于每个Route组件外面包裹着一层div，但服务端返回的代码中并没有这个div 解决方法只需要将路由信息在服务端执行一遍，使用使用StaticRouter来替代BrowserRouter，通过context进行参数传递 123456789101112131415161718192021222324252627282930313233import express from &#x27;express&#x27;import React from &#x27;react&#x27;//引入React以支持JSX的语法import &#123; renderToString &#125; from &#x27;react-dom/server&#x27;//引入renderToString方法import &#123; StaticRouter &#125; from &#x27;react-router-dom&#x27;import Router from &#x27;../Routers&#x27; const app = express()app.use(express.static(&#x27;public&#x27;));//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹app.get(&#x27;/&#x27;,(req,res)=&gt;&#123; const content = renderToString(( //传入当前path //context为必填参数,用于服务端渲染参数传递 &lt;StaticRouter location=&#123;req.path&#125; context=&#123;&#123;&#125;&#125;&gt; &#123;Router&#125; &lt;/StaticRouter&gt; )) res.send(` &lt;html&gt; &lt;head&gt; &lt;title&gt;ssr demo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;root&quot;&gt;$&#123;content&#125;&lt;/div&gt; &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; `)&#125;)app.listen(3001, () =&gt; console.log(&#x27;Exampleapp listening on port 3001!&#x27;)) 这样也就完成了路由的服务端渲染 三、原理整体react服务端渲染原理并不复杂，具体如下： node server 接收客户端请求，得到当前的请求url 路径，然后在已有的路由表内查找到对应的组件，拿到需要请求的数据，将数据作为 props、context或者store 形式传入组件 然后基于 react 内置的服务端渲染方法 renderToString()把组件渲染为 html字符串在把最终的 html进行输出前需要将数据注入到浏览器端 浏览器开始进行渲染和节点对比，然后执行完成组件内事件绑定和一些交互，浏览器重用了服务端输出的 html 节点，整个流程结束","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你在React项目是如何捕获错误的？","slug":"React.说说你在React项目是如何捕获错误的？","date":"2022-08-05T02:37:09.817Z","updated":"2022-08-05T03:14:44.329Z","comments":true,"path":"2022/08/05/React.说说你在React项目是如何捕获错误的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%9C%A8React%E9%A1%B9%E7%9B%AE%E6%98%AF%E5%A6%82%E4%BD%95%E6%8D%95%E8%8E%B7%E9%94%99%E8%AF%AF%E7%9A%84%EF%BC%9F/","excerpt":"","text":"说说你在React项目是如何捕获错误的？ 一、是什么错误在我们日常编写代码是非常常见的 举个例子，在react项目中去编写组件内JavaScript代码错误会导致 React的内部状态被破坏，导致整个应用崩溃，这是不应该出现的现象 作为一个框架，react也有自身对于错误的处理的解决方案 二、如何做为了解决出现的错误导致整个应用崩溃的问题，react16引用了「错误边界」新的概念 错误边界是一种 React 组件，这种组件可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI，而并不会渲染那些发生崩溃的子组件树 错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误 形成错误边界组件的两个条件： 使用了 static getDerivedStateFromError() 使用了 componentDidCatch() 抛出错误后，请使用 static getDerivedStateFromError() 渲染备用 UI ，使用 componentDidCatch() 打印错误信息，如下： 12345678910111213141516171819202122232425class ErrorBoundary extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; hasError: false &#125;; &#125; static getDerivedStateFromError(error) &#123; // 更新 state 使下一次渲染能够显示降级后的 UI return &#123; hasError: true &#125;; &#125; componentDidCatch(error, errorInfo) &#123; // 你同样可以将错误日志上报给服务器 logErrorToMyService(error, errorInfo); &#125; render() &#123; if (this.state.hasError) &#123; // 你可以自定义降级后的 UI 并渲染 return &lt;h1&gt;Something went wrong.&lt;/h1&gt;; &#125; return this.props.children; &#125;&#125; 然后就可以把自身组件的作为错误边界的子组件，如下： 123&lt;ErrorBoundary&gt; &lt;MyWidget /&gt;&lt;/ErrorBoundary&gt; 下面这些情况无法捕获到异常： 事件处理 异步代码 服务端渲染 自身抛出来的错误 在react 16版本之后，会把渲染期间发生的所有错误打印到控制台 除了错误信息和 JavaScript 栈外，React 16 还提供了组件栈追踪。现在你可以准确地查看发生在组件树内的错误信息： 可以看到在错误信息下方文字中存在一个组件栈，便于我们追踪错误 对于错误边界无法捕获的异常，如事件处理过程中发生问题并不会捕获到，是因为其不会在渲染期间触发，并不会导致渲染时候问题 这种情况可以使用js的try...catch...语法，如下： 12345678910111213141516171819202122class MyComponent extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; error: null &#125;; this.handleClick = this.handleClick.bind(this); &#125; handleClick() &#123; try &#123; // 执行操作，如有错误则会抛出 &#125; catch (error) &#123; this.setState(&#123; error &#125;); &#125; &#125; render() &#123; if (this.state.error) &#123; return &lt;h1&gt;Caught an error.&lt;/h1&gt; &#125; return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt; &#125;&#125; 除此之外还可以通过监听onerror事件 1window.addEventListener(&#x27;error&#x27;, function(event) &#123; ... &#125;)","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说 React 性能优化的手段有哪些？","slug":"React.说说 React 性能优化的手段有哪些？","date":"2022-08-05T02:37:09.816Z","updated":"2022-08-05T02:47:52.210Z","comments":true,"path":"2022/08/05/React.说说 React 性能优化的手段有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%20React%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%89%8B%E6%AE%B5%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说 React 性能优化的手段有哪些？ 一、是什么React凭借virtual DOM和diff算法拥有高效的性能，但是某些情况下，性能明显可以进一步提高 在前面文章中，我们了解到类组件通过调用setState方法， 就会导致render，父组件一旦发生render渲染，子组件一定也会执行render渲染 当我们想要更新一个子组件的时候，如下图绿色部分： 理想状态只调用该路径下的组件render： 但是react的默认做法是调用所有组件的render，再对生成的虚拟DOM进行对比（黄色部分），如不变则不进行更新 从上图可见，黄色部分diff算法对比是明显的性能浪费的情况 二、如何做在React中如何避免不必要的render中，我们了解到如何避免不必要的render来应付上面的问题，主要手段是通过shouldComponentUpdate、PureComponent、React.memo，这三种形式这里就不再复述 除此之外， 常见性能优化常见的手段有如下： 避免使用内联函数 使用 React Fragments 避免额外标记 使用 Immutable 懒加载组件 事件绑定方式 服务端渲染 避免使用内联函数如果我们使用内联函数，则每次调用render函数时都会创建一个新的函数实例，如下： 123456789101112import React from &quot;react&quot;;export default class InlineFunctionComponent extends React.Component &#123; render() &#123; return ( &lt;div&gt; &lt;h1&gt;Welcome Guest&lt;/h1&gt; &lt;input type=&quot;button&quot; onClick=&#123;(e) =&gt; &#123; this.setState(&#123;inputValue: e.target.value&#125;) &#125;&#125; value=&quot;Click For Inline Function&quot; /&gt; &lt;/div&gt; ) &#125;&#125; 我们应该在组件内部创建一个函数，并将事件绑定到该函数本身。这样每次调用 render 时就不会创建单独的函数实例，如下： 12345678910111213141516171819import React from &quot;react&quot;;export default class InlineFunctionComponent extends React.Component &#123; setNewStateData = (event) =&gt; &#123; this.setState(&#123; inputValue: e.target.value &#125;) &#125; render() &#123; return ( &lt;div&gt; &lt;h1&gt;Welcome Guest&lt;/h1&gt; &lt;input type=&quot;button&quot; onClick=&#123;this.setNewStateData&#125; value=&quot;Click For Inline Function&quot; /&gt; &lt;/div&gt; ) &#125;&#125; 使用 React Fragments 避免额外标记用户创建新组件时，每个组件应具有单个父标签。父级不能有两个标签，所以顶部要有一个公共标签，所以我们经常在组件顶部添加额外标签div 这个额外标签除了充当父标签之外，并没有其他作用，这时候则可以使用fragement 其不会向组件引入任何额外标记，但它可以作为父级标签的作用，如下所示： 12345678910export default class NestedRoutingComponent extends React.Component &#123; render() &#123; return ( &lt;&gt; &lt;h1&gt;This is the Header Component&lt;/h1&gt; &lt;h2&gt;Welcome To Demo Page&lt;/h2&gt; &lt;/&gt; ) &#125;&#125; 事件绑定方式在事件绑定方式中，我们了解到四种事件绑定的方式 从性能方面考虑，在render方法中使用bind和render方法中使用箭头函数这两种形式在每次组件render的时候都会生成新的方法实例，性能欠缺 而constructor中bind事件与定义阶段使用箭头函数绑定这两种形式只会生成一个方法实例，性能方面会有所改善 使用 Immutable在理解Immutable中，我们了解到使用 Immutable可以给 React 应用带来性能的优化，主要体现在减少渲染的次数 在做react性能优化的时候，为了避免重复渲染，我们会在shouldComponentUpdate()中做对比，当返回true执行render方法 Immutable通过is方法则可以完成对比，而无需像一样通过深度比较的方式比较 懒加载组件从工程方面考虑，webpack存在代码拆分能力，可以为应用创建多个包，并在运行时动态加载，减少初始包的大小 而在react中使用到了Suspense和 lazy组件实现代码拆分功能，基本使用如下： 1234567const johanComponent = React.lazy(() =&gt; import(/* webpackChunkName: &quot;johanComponent&quot; */ &#x27;./myAwesome.component&#x27;)); export const johanAsyncComponent = props =&gt; ( &lt;React.Suspense fallback=&#123;&lt;Spinner /&gt;&#125;&gt; &lt;johanComponent &#123;...props&#125; /&gt; &lt;/React.Suspense&gt;); 服务端渲染采用服务端渲染端方式，可以使用户更快的看到渲染完成的页面 服务端渲染，需要起一个node服务，可以使用express、koa等，调用react的renderToString方法，将根组件渲染成字符串，再输出到响应中 例如： 123456789import &#123; renderToString &#125; from &quot;react-dom/server&quot;;import MyPage from &quot;./MyPage&quot;;app.get(&quot;/&quot;, (req, res) =&gt; &#123; res.write(&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;My Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;); res.write(&quot;&lt;div id=&#x27;content&#x27;&gt;&quot;); res.write(renderToString(&lt;MyPage/&gt;)); res.write(&quot;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;); res.end();&#125;); 客户端使用render方法来生成HTML 123import ReactDOM from &#x27;react-dom&#x27;;import MyPage from &quot;./MyPage&quot;;ReactDOM.render(&lt;MyPage /&gt;, document.getElementById(&#x27;app&#x27;)); 其他除此之外，还存在的优化手段有组件拆分、合理使用hooks等性能优化手段… 三、总结通过上面初步学习，我们了解到react常见的性能优化可以分成三个层面： 代码层面 工程层面 框架机制层面 通过这三个层面的优化结合，能够使基于react项目的性能更上一层楼","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说React Jsx转换成真实DOM过程？","slug":"React.说说React Jsx转换成真实DOM过程？","date":"2022-08-05T02:37:09.815Z","updated":"2022-08-05T03:14:50.261Z","comments":true,"path":"2022/08/05/React.说说React Jsx转换成真实DOM过程？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4React%20Jsx%E8%BD%AC%E6%8D%A2%E6%88%90%E7%9C%9F%E5%AE%9EDOM%E8%BF%87%E7%A8%8B%EF%BC%9F/","excerpt":"","text":"说说React Jsx转换成真实DOM过程？ 一、是什么react通过将组件编写的JSX映射到屏幕，以及组件中的状态发生了变化之后 React会将这些「变化」更新到屏幕上 在前面文章了解中，JSX通过babel最终转化成React.createElement这种形式，例如： 1234&lt;div&gt; &lt;img src=&quot;avatar.png&quot; className=&quot;profile&quot; /&gt; &lt;Hello /&gt;&lt;/div&gt; 会被bebel转化成如下： 123456789React.createElement( &quot;div&quot;, null, React.createElement(&quot;img&quot;, &#123; src: &quot;avatar.png&quot;, className: &quot;profile&quot; &#125;), React.createElement(Hello, null)); 在转化过程中，babel在编译时会判断 JSX 中组件的首字母： 当首字母为小写时，其被认定为原生 DOM 标签，createElement 的第一个变量被编译为字符串 当首字母为大写时，其被认定为自定义组件，createElement 的第一个变量被编译为对象 最终都会通过RenderDOM.render(...)方法进行挂载，如下： 1ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;)); 二、过程在react中，节点大致可以分成四个类别： 原生标签节点 文本节点 函数组件 类组件 如下所示： 12345678910111213141516171819202122232425262728293031class ClassComponent extends Component &#123; static defaultProps = &#123; color: &quot;pink&quot; &#125;; render() &#123; return ( &lt;div className=&quot;border&quot;&gt; &lt;h3&gt;ClassComponent&lt;/h3&gt; &lt;p className=&#123;this.props.color&#125;&gt;&#123;this.props.name&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;function FunctionComponent(props) &#123; return ( &lt;div className=&quot;border&quot;&gt; FunctionComponent &lt;p&gt;&#123;props.name&#125;&lt;/p&gt; &lt;/div&gt; );&#125;const jsx = ( &lt;div className=&quot;border&quot;&gt; &lt;p&gt;xx&lt;/p&gt; &lt;a href=&quot;https://www.xxx.com/&quot;&gt;xxx&lt;/a&gt; &lt;FunctionComponent name=&quot;函数组件&quot; /&gt; &lt;ClassComponent name=&quot;类组件&quot; color=&quot;red&quot; /&gt; &lt;/div&gt;); 这些类别最终都会被转化成React.createElement这种形式 React.createElement其被调用时会传⼊标签类型type，标签属性props及若干子元素children，作用是生成一个虚拟Dom对象，如下所示： 1234567891011121314151617181920212223242526272829function createElement(type, config, ...children) &#123; if (config) &#123; delete config.__self; delete config.__source; &#125; // ! 源码中做了详细处理，⽐如过滤掉key、ref等 const props = &#123; ...config, children: children.map(child =&gt; typeof child === &quot;object&quot; ? child : createTextNode(child) ) &#125;; return &#123; type, props &#125;;&#125;function createTextNode(text) &#123; return &#123; type: TEXT, props: &#123; children: [], nodeValue: text &#125; &#125;;&#125;export default &#123; createElement&#125;; createElement会根据传入的节点信息进行一个判断： 如果是原生标签节点， type 是字符串，如div、span 如果是文本节点， type就没有，这里是 TEXT 如果是函数组件，type 是函数名 如果是类组件，type 是类名 虚拟DOM会通过ReactDOM.render进行渲染成真实DOM，使用方法如下： 1ReactDOM.render(element, container[, callback]) 当首次调用时，容器节点里的所有 DOM 元素都会被替换，后续的调用则会使用 React 的 diff算法进行高效的更新 如果提供了可选的回调函数callback，该回调将在组件被渲染或更新之后被执行 render大致实现方法如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374function render(vnode, container) &#123; console.log(&quot;vnode&quot;, vnode); // 虚拟DOM对象 // vnode _&gt; node const node = createNode(vnode, container); container.appendChild(node);&#125;// 创建真实DOM节点function createNode(vnode, parentNode) &#123; let node = null; const &#123;type, props&#125; = vnode; if (type === TEXT) &#123; node = document.createTextNode(&quot;&quot;); &#125; else if (typeof type === &quot;string&quot;) &#123; node = document.createElement(type); &#125; else if (typeof type === &quot;function&quot;) &#123; node = type.isReactComponent ? updateClassComponent(vnode, parentNode) : updateFunctionComponent(vnode, parentNode); &#125; else &#123; node = document.createDocumentFragment(); &#125; reconcileChildren(props.children, node); updateNode(node, props); return node;&#125;// 遍历下子vnode，然后把子vnode-&gt;真实DOM节点，再插入父node中function reconcileChildren(children, node) &#123; for (let i = 0; i &lt; children.length; i++) &#123; let child = children[i]; if (Array.isArray(child)) &#123; for (let j = 0; j &lt; child.length; j++) &#123; render(child[j], node); &#125; &#125; else &#123; render(child, node); &#125; &#125;&#125;function updateNode(node, nextVal) &#123; Object.keys(nextVal) .filter(k =&gt; k !== &quot;children&quot;) .forEach(k =&gt; &#123; if (k.slice(0, 2) === &quot;on&quot;) &#123; let eventName = k.slice(2).toLocaleLowerCase(); node.addEventListener(eventName, nextVal[k]); &#125; else &#123; node[k] = nextVal[k]; &#125; &#125;);&#125;// 返回真实dom节点// 执行函数function updateFunctionComponent(vnode, parentNode) &#123; const &#123;type, props&#125; = vnode; let vvnode = type(props); const node = createNode(vvnode, parentNode); return node;&#125;// 返回真实dom节点// 先实例化，再执行render函数function updateClassComponent(vnode, parentNode) &#123; const &#123;type, props&#125; = vnode; let cmp = new type(props); const vvnode = cmp.render(); const node = createNode(vvnode, parentNode); return node;&#125;export default &#123; render&#125;; 三、总结在react源码中，虚拟Dom转化成真实Dom整体流程如下图所示： 其渲染流程如下所示： 使用React.createElement或JSX编写React组件，实际上所有的 JSX 代码最后都会转换成React.createElement(…) ，Babel帮助我们完成了这个转换的过程。 createElement函数对key和ref等特殊的props进行处理，并获取defaultProps对默认props进行赋值，并且对传入的孩子节点进行处理，最终构造成一个虚拟DOM对象 ReactDOM.render将生成好的虚拟DOM渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实DOM","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React Fiber架构的理解？解决了什么问题？","slug":"React.说说对React Fiber架构的理解？解决了什么问题？","date":"2022-08-05T02:37:09.813Z","updated":"2022-08-05T02:48:16.753Z","comments":true,"path":"2022/08/05/React.说说对React Fiber架构的理解？解决了什么问题？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%20Fiber%E6%9E%B6%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/","excerpt":"","text":"说说对React Fiber架构的理解？解决了什么问题？ 一、问题JavaScript引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待 如果 JavaScript 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿 而这也正是 React 15 的 Stack Reconciler所面临的问题，当 React在渲染组件时，从开始到渲染完成整个过程是一气呵成的，无法中断 如果组件较大，那么js线程会一直执行，然后等到整棵VDOM树计算完成后，才会交给渲染的线程 这就会导致一些用户交互、动画等任务无法立即得到处理，导致卡顿的情况 二、是什么React Fiber 是 Facebook 花费两年余时间对 React 做出的一个重大改变与优化，是对 React 核心算法的一次重新实现。从Facebook在 React Conf 2017 会议上确认，React Fiber 在React 16 版本发布 在react中，主要做了以下的操作： 为每个增加了优先级，优先级高的任务可以中断低优先级的任务。然后再重新，注意是重新执行优先级低的任务 增加了异步任务，调用requestIdleCallback api，浏览器空闲的时候执行 dom diff树变成了链表，一个dom对应两个fiber（一个链表），对应两个队列，这都是为找到被中断的任务，重新执行 从架构角度来看，Fiber 是对 React核心算法（即调和过程）的重写 从编码角度来看，Fiber是 React内部所定义的一种数据结构，它是 Fiber树结构的节点单位，也就是 React 16 新架构下的虚拟DOM 一个 fiber就是一个 JavaScript对象，包含了元素的信息、该元素的更新操作队列、类型，其数据结构如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960type Fiber = &#123; // 用于标记fiber的WorkTag类型，主要表示当前fiber代表的组件类型如FunctionComponent、ClassComponent等 tag: WorkTag, // ReactElement里面的key key: null | string, // ReactElement.type，调用`createElement`的第一个参数 elementType: any, // The resolved function/class/ associated with this fiber. // 表示当前代表的节点类型 type: any, // 表示当前FiberNode对应的element组件实例 stateNode: any, // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回 return: Fiber | null, // 指向自己的第一个子节点 child: Fiber | null, // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点 sibling: Fiber | null, index: number, ref: null | (((handle: mixed) =&gt; void) &amp; &#123; _stringRef: ?string &#125;) | RefObject, // 当前处理过程中的组件props对象 pendingProps: any, // 上一次渲染完成之后的props memoizedProps: any, // 该Fiber对应的组件产生的Update会存放在这个队列里面 updateQueue: UpdateQueue&lt;any&gt; | null, // 上一次渲染的时候的state memoizedState: any, // 一个列表，存放这个Fiber依赖的context firstContextDependency: ContextDependency&lt;mixed&gt; | null, mode: TypeOfMode, // Effect // 用来记录Side Effect effectTag: SideEffectTag, // 单链表用来快速查找下一个side effect nextEffect: Fiber | null, // 子树中第一个side effect firstEffect: Fiber | null, // 子树中最后一个side effect lastEffect: Fiber | null, // 代表任务在未来的哪个时间点应该被完成，之后版本改名为 lanes expirationTime: ExpirationTime, // 快速确定子树中是否有不在等待的变化 childExpirationTime: ExpirationTime, // fiber的版本池，即记录fiber更新过程，便于恢复 alternate: Fiber | null,&#125; 三、如何解决Fiber把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行 即可以中断与恢复，恢复后也可以复用之前的中间状态，并给不同的任务赋予不同的优先级，其中每个任务更新单元为 React Element 对应的 Fiber节点 实现的上述方式的是requestIdleCallback方法 window.requestIdleCallback()方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应 首先 React 中任务切割为多个步骤，分批完成。在完成一部分任务之后，将控制权交回给浏览器，让浏览器有时间再进行页面的渲染。等浏览器忙完之后有剩余时间，再继续之前 React 未完成的任务，是一种合作式调度。 该实现过程是基于 Fiber节点实现，作为静态的数据结构来说，每个 Fiber 节点对应一个 React element，保存了该组件的类型（函数组件/类组件/原生组件等等）、对应的 DOM 节点等信息。 作为动态的工作单元来说，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作。 每个 Fiber 节点有个对应的 React element，多个 Fiber节点根据如下三个属性构建一颗树： 123456// 指向父级Fiber节点this.return = null// 指向子Fiber节点this.child = null// 指向右边第一个兄弟Fiber节点this.sibling = null 通过这些属性就能找到下一个执行目标","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你对 React diff的理解？原理是什么？","slug":"React.说说你对 React diff的理解？原理是什么？","date":"2022-08-05T02:37:09.812Z","updated":"2022-08-05T03:07:17.976Z","comments":true,"path":"2022/08/05/React.说说你对 React diff的理解？原理是什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20React%20diff%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"说说你对 React diff的理解？原理是什么？ 一、是什么跟Vue一致，React通过引入Virtual DOM的概念，极大地避免无效的Dom操作，使我们的页面的构建效率提到了极大的提升 而diff算法就是更高效地通过对比新旧Virtual DOM来找出真正的Dom变化之处 传统diff算法通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，react将算法进行一个优化，复杂度降为O(n)，两者效率差距如下图： 二、原理react中diff算法主要遵循三个层级的策略： tree层级 conponent 层级 element 层级 tree层级DOM节点跨层级的操作不做优化，只会对相同层级的节点进行比较 只有删除、创建操作，没有移动操作，如下图： react发现新树中，R节点下没有了A，那么直接删除A，在D节点下创建A以及下属节点 上述操作中，只有删除和创建操作 conponent层级如果是同一个类的组件，则会继续往下diff运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的 当component D换成了component G 后，即使两者的结构非常类似，也会将D删除再重新创建G element层级对于比较同一层级的节点们，每个节点在对应的层级用唯一的key作为标识 提供了 3 种节点操作，分别为 INSERT_MARKUP(插入)、MOVE_EXISTING (移动)和 REMOVE_NODE (删除) 如下场景： 通过key可以准确地发现新旧集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将旧集合中节点的位置进行移动，更新为新集合中节点的位置 流程如下表： index：新集合的遍历下标。 oldIndex：当前节点在老集合中的下标 maxIndex：在新集合访问过的节点中，其在老集合的最大下标 如果当前节点在新集合中的位置比老集合中的位置靠前的话，是不会影响后续节点操作的，这里这时候被动字节不用动 操作过程中只比较oldIndex和maxIndex，规则如下： 当oldIndex&gt;maxIndex时，将oldIndex的值赋值给maxIndex 当oldIndex=maxIndex时，不操作 当oldIndex&lt;maxIndex时，将当前节点移动到index的位置 diff过程如下： 节点B：此时 maxIndex=0，oldIndex=1；满足 maxIndex&lt; oldIndex，因此B节点不动，此时maxIndex= Math.max(oldIndex, maxIndex)，就是1 节点A：此时maxIndex=1，oldIndex=0；不满足maxIndex&lt; oldIndex，因此A节点进行移动操作，此时maxIndex= Math.max(oldIndex, maxIndex)，还是1 节点D：此时maxIndex=1, oldIndex=3；满足maxIndex&lt; oldIndex，因此D节点不动，此时maxIndex= Math.max(oldIndex, maxIndex)，就是3 节点C：此时maxIndex=3，oldIndex=2；不满足maxIndex&lt; oldIndex，因此C节点进行移动操作，当前已经比较完了 当ABCD节点比较完成后，diff过程还没完，还会整体遍历老集合中节点，看有没有没用到的节点，有的话，就删除 三、注意事项对于简单列表渲染而言，不使用key比使用key的性能，例如： 将一个[1,2,3,4,5]，渲染成如下的样子： 12345&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;&lt;div&gt;4&lt;/div&gt;&lt;div&gt;5&lt;/div&gt; 后续更改成[1,3,2,5,4]，使用key与不使用key作用如下： 1234567891011121314151.加key&lt;div key=&#x27;1&#x27;&gt;1&lt;/div&gt; &lt;div key=&#x27;1&#x27;&gt;1&lt;/div&gt; &lt;div key=&#x27;2&#x27;&gt;2&lt;/div&gt; &lt;div key=&#x27;3&#x27;&gt;3&lt;/div&gt; &lt;div key=&#x27;3&#x27;&gt;3&lt;/div&gt; ========&gt; &lt;div key=&#x27;2&#x27;&gt;2&lt;/div&gt; &lt;div key=&#x27;4&#x27;&gt;4&lt;/div&gt; &lt;div key=&#x27;5&#x27;&gt;5&lt;/div&gt; &lt;div key=&#x27;5&#x27;&gt;5&lt;/div&gt; &lt;div key=&#x27;4&#x27;&gt;4&lt;/div&gt; 操作：节点2移动至下标为2的位置，节点4移动至下标为4的位置。2.不加key&lt;div&gt;1&lt;/div&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; ========&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; 操作：修改第1个到第5个节点的innerText 如果我们对这个集合进行增删的操作改成[1,3,2,5,6] 1234567891011121314151.加key&lt;div key=&#x27;1&#x27;&gt;1&lt;/div&gt; &lt;div key=&#x27;1&#x27;&gt;1&lt;/div&gt; &lt;div key=&#x27;2&#x27;&gt;2&lt;/div&gt; &lt;div key=&#x27;3&#x27;&gt;3&lt;/div&gt; &lt;div key=&#x27;3&#x27;&gt;3&lt;/div&gt; ========&gt; &lt;div key=&#x27;2&#x27;&gt;2&lt;/div&gt; &lt;div key=&#x27;4&#x27;&gt;4&lt;/div&gt; &lt;div key=&#x27;5&#x27;&gt;5&lt;/div&gt; &lt;div key=&#x27;5&#x27;&gt;5&lt;/div&gt; &lt;div key=&#x27;6&#x27;&gt;6&lt;/div&gt; 操作：节点2移动至下标为2的位置，新增节点6至下标为4的位置，删除节点4。2.不加key&lt;div&gt;1&lt;/div&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; ========&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt; 操作：修改第1个到第5个节点的innerText 由于dom节点的移动操作开销是比较昂贵的，没有key的情况下要比有key的性能更好","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你是如何提高组件的渲染效率的？在React中如何避免不必要的render？","slug":"React.说说你是如何提高组件的渲染效率的？在React中如何避免不必要的render？","date":"2022-08-05T02:37:09.811Z","updated":"2022-08-05T03:07:39.511Z","comments":true,"path":"2022/08/05/React.说说你是如何提高组件的渲染效率的？在React中如何避免不必要的render？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E6%98%AF%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E7%BB%84%E4%BB%B6%E7%9A%84%E6%B8%B2%E6%9F%93%E6%95%88%E7%8E%87%E7%9A%84%EF%BC%9F%E5%9C%A8React%E4%B8%AD%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84render%EF%BC%9F/","excerpt":"","text":"说说你是如何提高组件的渲染效率的？在React中如何避免不必要的render？ 一、是什么react 基于虚拟 DOM 和高效 Diff算法的完美配合，实现了对 DOM最小粒度的更新，大多数情况下，React对 DOM的渲染效率足以我们的业务日常 复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，避免不必要的渲染则是业务中常见的优化手段之一 二、如何做在之前文章中，我们了解到render的触发时机，简单来讲就是类组件通过调用setState方法， 就会导致render，父组件一旦发生render渲染，子组件一定也会执行render渲染 从上面可以看到，父组件渲染导致子组件渲染，子组件并没有发生任何改变，这时候就可以从避免无谓的渲染，具体实现的方式有如下： shouldComponentUpdate PureComponent React.memo shouldComponentUpdate通过shouldComponentUpdate生命周期函数来比对 state和 props，确定是否要重新渲染 默认情况下返回true表示重新渲染，如果不希望组件重新渲染，返回 false 即可 PureComponent跟shouldComponentUpdate原理基本一致，通过对 props 和 state的浅比较结果来实现 shouldComponentUpdate，源码大致如下： 123if (this._compositeType === CompositeTypes.PureClass) &#123; shouldUpdate = !shallowEqual(prevProps, nextProps) || ! shallowEqual(inst.state, nextState);&#125; shallowEqual对应方法大致如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445const hasOwnProperty = Object.prototype.hasOwnProperty;/** * is 方法来判断两个值是否是相等的值，为何这么写可以移步 MDN 的文档 * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is */function is(x: mixed, y: mixed): boolean &#123; if (x === y) &#123; return x !== 0 || y !== 0 || 1 / x === 1 / y; &#125; else &#123; return x !== x &amp;&amp; y !== y; &#125;&#125;function shallowEqual(objA: mixed, objB: mixed): boolean &#123; // 首先对基本类型进行比较 if (is(objA, objB)) &#123; return true; &#125; if (typeof objA !== &#x27;object&#x27; || objA === null || typeof objB !== &#x27;object&#x27; || objB === null) &#123; return false; &#125; const keysA = Object.keys(objA); const keysB = Object.keys(objB); // 长度不相等直接返回false if (keysA.length !== keysB.length) &#123; return false; &#125; // key相等的情况下，再去循环比较 for (let i = 0; i &lt; keysA.length; i++) &#123; if ( !hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]]) ) &#123; return false; &#125; &#125; return true;&#125; 当对象包含复杂的数据结构时，对象深层的数据已改变却没有触发 render 注意：在react中，是不建议使用深层次结构的数据 React.memoReact.memo用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似。但不同的是， React.memo 只能用于函数组件 1234567import &#123; memo &#125; from &#x27;react&#x27;;function Button(props) &#123; // Component code&#125;export default memo(Button); 如果需要深层次比较，这时候可以给memo第二个参数传递比较函数 123456function arePropsEqual(prevProps, nextProps) &#123; // your code return prevProps === nextProps;&#125;export default memo(Button, arePropsEqual); 三、总结在实际开发过程中，前端性能问题是一个必须考虑的问题，随着业务的复杂，遇到性能问题的概率也在增高 除此之外，建议将页面进行更小的颗粒化，如果一个过大，当状态发生修改的时候，就会导致整个大组件的渲染，而对组件进行拆分后，粒度变小了，也能够减少子组件不必要的渲染","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说React render方法的原理？在什么时候会被触发？","slug":"React.说说React render方法的原理？在什么时候会被触发？","date":"2022-08-05T02:37:09.810Z","updated":"2022-08-05T03:14:55.098Z","comments":true,"path":"2022/08/05/React.说说React render方法的原理？在什么时候会被触发？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4React%20render%E6%96%B9%E6%B3%95%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E8%A2%AB%E8%A7%A6%E5%8F%91%EF%BC%9F/","excerpt":"","text":"说说React render方法的原理？在什么时候会被触发？ 一、原理首先，render函数在react中有两种形式： 在类组件中，指的是render方法： 12345class Foo extends React.Component &#123; render() &#123; return &lt;h1&gt; Foo &lt;/h1&gt;; &#125;&#125; 在函数组件中，指的是函数组件本身： 123function Foo() &#123; return &lt;h1&gt; Foo &lt;/h1&gt;;&#125; 在render中，我们会编写jsx，jsx通过babel编译后就会转化成我们熟悉的js格式，如下： 1234567return ( &lt;div className=&#x27;cn&#x27;&gt; &lt;Header&gt; hello &lt;/Header&gt; &lt;div&gt; start &lt;/div&gt; Right Reserve &lt;/div&gt;) babel编译后： 12345678910111213141516171819return ( React.createElement( &#x27;div&#x27;, &#123; className : &#x27;cn&#x27; &#125;, React.createElement( Header, null, &#x27;hello&#x27; ), React.createElement( &#x27;div&#x27;, null, &#x27;start&#x27; ), &#x27;Right Reserve&#x27; )) 从名字上来看，createElement方法用来元素的 在react中，这个元素就是虚拟DOM树的节点，接收三个参数： type：标签 attributes：标签属性，若无则为null children：标签的子节点 这些虚拟DOM树最终会渲染成真实DOM 在render过程中，React 将新调用的 render函数返回的树与旧版本的树进行比较，这一步是决定如何更新 DOM 的必要步骤，然后进行 diff 比较，更新 DOM树 二、触发时机render的执行时机主要分成了两部分： 类组件调用 setState 修改状态 1234567891011121314151617181920212223class Foo extends React.Component &#123; state = &#123; count: 0 &#125;; increment = () =&gt; &#123; const &#123; count &#125; = this.state; const newCount = count &lt; 10 ? count + 1 : count; this.setState(&#123; count: newCount &#125;); &#125;; render() &#123; const &#123; count &#125; = this.state; console.log(&quot;Foo render&quot;); return ( &lt;div&gt; &lt;h1&gt; &#123;count&#125; &lt;/h1&gt; &lt;button onClick=&#123;this.increment&#125;&gt;Increment&lt;/button&gt; &lt;/div&gt; ); &#125;&#125; 点击按钮，则调用setState方法，无论count发生变化与否，控制台都会输出Foo render，证明render执行了 函数组件通过useState hook修改状态 1234567891011121314151617function Foo() &#123; const [count, setCount] = useState(0); function increment() &#123; const newCount = count &lt; 10 ? count + 1 : count; setCount(newCount); &#125; console.log(&quot;Foo render&quot;); return ( &lt;div&gt; &lt;h1&gt; &#123;count&#125; &lt;/h1&gt; &lt;button onClick=&#123;increment&#125;&gt;Increment&lt;/button&gt; &lt;/div&gt; );&#125; 函数组件通过useState这种形式更新数据，当数组的值不发生改变了，就不会触发render 类组件重新渲染 1234567891011121314151617181920212223class App extends React.Component &#123; state = &#123; name: &quot;App&quot; &#125;; render() &#123; return ( &lt;div className=&quot;App&quot;&gt; &lt;Foo /&gt; &lt;button onClick=&#123;() =&gt; this.setState(&#123; name: &quot;App&quot; &#125;)&#125;&gt; Change name &lt;/button&gt; &lt;/div&gt; ); &#125;&#125;function Foo() &#123; console.log(&quot;Foo render&quot;); return ( &lt;div&gt; &lt;h1&gt; Foo &lt;/h1&gt; &lt;/div&gt; );&#125; 只要点击了 App 组件内的 Change name 按钮，不管 Foo 具体实现是什么，都会被重新render渲染 函数组件重新渲染 12345678910111213141516171819202122function App()&#123; const [name,setName] = useState(&#x27;App&#x27;) return ( &lt;div className=&quot;App&quot;&gt; &lt;Foo /&gt; &lt;button onClick=&#123;() =&gt; setName(&quot;aaa&quot;)&#125;&gt; &#123; name &#125; &lt;/button&gt; &lt;/div&gt; )&#125;function Foo() &#123; console.log(&quot;Foo render&quot;); return ( &lt;div&gt; &lt;h1&gt; Foo &lt;/h1&gt; &lt;/div&gt; );&#125; 可以发现，使用useState来更新状态的时候，只有首次会触发Foo render，后面并不会导致Foo render 三、总结render函数里面可以编写JSX，转化成createElement这种形式，用于生成虚拟DOM，最终转化成真实DOM，在React 中，类组件只要执行了 setState 方法，就一定会触发 render 函数执行，函数组件使用useState更改状态不一定导致重新render 组件的props 改变了，不一定触发 render 函数的执行，但是如果 props 的值来自于父组件或者祖先组件的 state 在这种情况下，父组件或者祖先组件的 state 发生了改变，就会导致子组件的重新渲染 所以，一旦执行了setState就会执行render方法，useState 会判断当前值有无发生改变确定是否执行render方法，一旦父组件发生渲染，子组件也会渲染","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你对 Immutable Data的理解？如何应用在React项目中？","slug":"React.说说你对 Immutable Data的理解？如何应用在React项目中？","date":"2022-08-05T02:37:09.809Z","updated":"2022-08-05T02:50:21.825Z","comments":true,"path":"2022/08/05/React.说说你对 Immutable Data的理解？如何应用在React项目中？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%20Immutable%20Data%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%9C%A8React%E9%A1%B9%E7%9B%AE%E4%B8%AD%EF%BC%9F/","excerpt":"","text":"说说你对 Immutable Data的理解？如何应用在React项目中？ 一、是什么Immutable，不可改变的，在计算机中，即指一旦创建，就不能再被更改的数据 对 Immutable对象的任何修改或添加删除操作都会返回一个新的 Immutable对象 Immutable 实现的原理是 Persistent Data Structure（持久化数据结构）: 用一种数据结构来保存数据 当数据被修改时，会返回一个对象，但是新的对象会尽可能的利用之前的数据结构而不会对内存造成浪费 也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变，同时为了避免 deepCopy把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享） 如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享 如下图所示： 二、如何使用使用Immutable对象最主要的库是immutable.js immutable.js 是一个完全独立的库，无论基于什么框架都可以用它 其出现场景在于弥补 Javascript 没有不可变数据结构的问题，通过 structural sharing来解决的性能问题 内部提供了一套完整的 Persistent Data Structure，还有很多易用的数据类型，如Collection、List、Map、Set、Record、Seq，其中： List: 有序索引集，类似 JavaScript 中的 Array Map: 无序索引集，类似 JavaScript 中的 Object Set: 没有重复值的集合 主要的方法如下： fromJS()：将一个js数据转换为Immutable类型的数据 1const obj = Immutable.fromJS(&#123;a:&#x27;123&#x27;,b:&#x27;234&#x27;&#125;) toJS()：将一个Immutable数据转换为JS类型的数据 is()：对两个对象进行比较 123456import &#123; Map, is &#125; from &#x27;immutable&#x27;const map1 = Map(&#123; a: 1, b: 1, c: 1 &#125;)const map2 = Map(&#123; a: 1, b: 1, c: 1 &#125;)map1 === map2 //falseObject.is(map1, map2) // falseis(map1, map2) // true get(key)：对数据或对象取值 getIn([]) ：对嵌套对象或数组取值，传参为数组，表示位置 1234567let abs = Immutable.fromJS(&#123;a: &#123;b:2&#125;&#125;);abs.getIn([&#x27;a&#x27;, &#x27;b&#x27;]) // 2abs.getIn([&#x27;a&#x27;, &#x27;c&#x27;]) // 子级没有值let arr = Immutable.fromJS([1 ,2, 3, &#123;a: 5&#125;]);arr.getIn([3, &#x27;a&#x27;]); // 5arr.getIn([3, &#x27;c&#x27;]); // 子级没有值 如下例子：使用方法如下： 12345import Immutable from &#x27;immutable&#x27;;foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);bar = foo.setIn([&#x27;a&#x27;, &#x27;b&#x27;], 2); // 使用 setIn 赋值console.log(foo.getIn([&#x27;a&#x27;, &#x27;b&#x27;])); // 使用 getIn 取值，打印 1console.log(foo === bar); // 打印 false 如果换到原生的js，则对应如下： 12345let foo = &#123;a: &#123;b: 1&#125;&#125;;let bar = foo;bar.a.b = 2;console.log(foo.a.b); // 打印 2console.log(foo === bar); // 打印 true 三、在React中应用使用 Immutable可以给 React 应用带来性能的优化，主要体现在减少渲染的次数 在做react性能优化的时候，为了避免重复渲染，我们会在shouldComponentUpdate()中做对比，当返回true执行render方法 Immutable通过is方法则可以完成对比，而无需像一样通过深度比较的方式比较 在使用redux过程中也可以结合Immutable，不使用Immutable前修改一个数据需要做一个深拷贝 1234567891011121314import &#x27;_&#x27; from &#x27;lodash&#x27;;const Component = React.createClass(&#123; getInitialState() &#123; return &#123; data: &#123; times: 0 &#125; &#125; &#125;, handleAdd() &#123; let data = _.cloneDeep(this.state.data); data.times = data.times + 1; this.setState(&#123; data: data &#125;); &#125;&#125; 使用 Immutable 后： 12345678910getInitialState() &#123; return &#123; data: Map(&#123; times: 0 &#125;) &#125;&#125;, handleAdd() &#123; this.setState(&#123; data: this.state.data.update(&#x27;times&#x27;, v =&gt; v + 1) &#125;); // 这时的 times 并不会改变 console.log(this.state.data.get(&#x27;times&#x27;)); &#125; 同理，在redux中也可以将数据进行fromJS处理 1234567891011121314151617181920212223242526272829303132333435import * as constants from &#x27;./constants&#x27;import &#123;fromJS&#125; from &#x27;immutable&#x27;const defaultState = fromJS(&#123; //将数据转化成immutable数据 home:true, focused:false, mouseIn:false, list:[], page:1, totalPage:1&#125;)export default(state=defaultState,action)=&gt;&#123; switch(action.type)&#123; case constants.SEARCH_FOCUS: return state.set(&#x27;focused&#x27;,true) //更改immutable数据 case constants.CHANGE_HOME_ACTIVE: return state.set(&#x27;home&#x27;,action.value) case constants.SEARCH_BLUR: return state.set(&#x27;focused&#x27;,false) case constants.CHANGE_LIST: // return state.set(&#x27;list&#x27;,action.data).set(&#x27;totalPage&#x27;,action.totalPage) //merge效率更高，执行一次改变多个数据 return state.merge(&#123; list:action.data, totalPage:action.totalPage &#125;) case constants.MOUSE_ENTER: return state.set(&#x27;mouseIn&#x27;,true) case constants.MOUSE_LEAVE: return state.set(&#x27;mouseIn&#x27;,false) case constants.CHANGE_PAGE: return state.set(&#x27;page&#x27;,action.page) default: return state &#125;&#125;","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说React Router有几种模式？实现原理？","slug":"React.说说React Router有几种模式？实现原理？","date":"2022-08-05T02:37:09.808Z","updated":"2022-08-05T03:14:59.643Z","comments":true,"path":"2022/08/05/React.说说React Router有几种模式？实现原理？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4React%20Router%E6%9C%89%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%BC%8F%EF%BC%9F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/","excerpt":"","text":"说说React Router有几种模式？实现原理？ 一、是什么在单页应用中，一个web项目只有一个html页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下： 改变 url 且不让浏览器像服务器发送请求 在不刷新页面的前提下动态改变浏览器地址栏中的URL地址 其中主要分成了两种模式： hash 模式：在url后面加上#，如http://127.0.0.1:5500/home/#/page1 history 模式：允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录 二、使用React Router对应的hash模式和history模式对应的组件为： HashRouter BrowserRouter 这两个组件的使用都十分的简单，作为最顶层组件包裹其他组件，如下所示 12345678910111213141516171819202122232425262728// 1.import &#123; BrowserRouter as Router &#125; from &quot;react-router-dom&quot;;// 2.import &#123; HashRouter as Router &#125; from &quot;react-router-dom&quot;;import React from &#x27;react&#x27;;import &#123; BrowserRouter as Router, // HashRouter as Router Switch, Route,&#125; from &quot;react-router-dom&quot;;import Home from &#x27;./pages/Home&#x27;;import Login from &#x27;./pages/Login&#x27;;import Backend from &#x27;./pages/Backend&#x27;;import Admin from &#x27;./pages/Admin&#x27;;function App() &#123; return ( &lt;Router&gt; &lt;Route path=&quot;/login&quot; component=&#123;Login&#125;/&gt; &lt;Route path=&quot;/backend&quot; component=&#123;Backend&#125;/&gt; &lt;Route path=&quot;/admin&quot; component=&#123;Admin&#125;/&gt; &lt;Route path=&quot;/&quot; component=&#123;Home&#125;/&gt; &lt;/Router&gt; );&#125;export default App; 三、实现原理路由描述了 URL 与 UI之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面） 下面以hash模式为例子，改变hash值并不会导致浏览器向服务器发送请求，浏览器不发出请求，也就不会刷新页面 hash 值改变，触发全局 window 对象上的 hashchange 事件。所以 hash 模式路由就是利用 hashchange 事件监听 URL 的变化，从而进行 DOM 操作来模拟页面跳转 react-router也是基于这个特性实现路由的跳转 下面以HashRouter组件分析进行展开： HashRouterHashRouter包裹了整应用， 通过window.addEventListener(&#39;hashChange&#39;,callback)监听hash值的变化，并传递给其嵌套的组件 然后通过context将location数据往后代组件传递，如下： 123456789101112131415161718192021222324252627282930313233343536373839import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Provider &#125; from &#x27;./context&#x27;// 该组件下Api提供给子组件使用class HashRouter extends Component &#123; constructor() &#123; super() this.state = &#123; location: &#123; pathname: window.location.hash.slice(1) || &#x27;/&#x27; &#125; &#125; &#125; // url路径变化 改变location componentDidMount() &#123; window.location.hash = window.location.hash || &#x27;/&#x27; window.addEventListener(&#x27;hashchange&#x27;, () =&gt; &#123; this.setState(&#123; location: &#123; ...this.state.location, pathname: window.location.hash.slice(1) || &#x27;/&#x27; &#125; &#125;, () =&gt; console.log(this.state.location)) &#125;) &#125; render() &#123; let value = &#123; location: this.state.location &#125; return ( &lt;Provider value=&#123;value&#125;&gt; &#123; this.props.children &#125; &lt;/Provider&gt; ); &#125;&#125;export default HashRouter; RouterRouter组件主要做的是通过BrowserRouter传过来的当前值，通过props传进来的path与context传进来的pathname进行匹配，然后决定是否执行渲染组件 12345678910111213141516171819202122232425import React, &#123; Component &#125; from &#x27;react&#x27;;import &#123; Consumer &#125; from &#x27;./context&#x27;const &#123; pathToRegexp &#125; = require(&quot;path-to-regexp&quot;);class Route extends Component &#123; render() &#123; return ( &lt;Consumer&gt; &#123; state =&gt; &#123; console.log(state) let &#123;path, component: Component&#125; = this.props let pathname = state.location.pathname let reg = pathToRegexp(path, [], &#123;end: false&#125;) // 判断当前path是否包含pathname if(pathname.match(reg)) &#123; return &lt;Component&gt;&lt;/Component&gt; &#125; return null &#125; &#125; &lt;/Consumer&gt; ); &#125;&#125;export default Route;","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你对React Router的理解？常用的Router组件有哪些？","slug":"React.说说你对React Router的理解？常用的Router组件有哪些？","date":"2022-08-05T02:37:09.806Z","updated":"2022-08-05T03:07:26.725Z","comments":true,"path":"2022/08/05/React.说说你对React Router的理解？常用的Router组件有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9React%20Router%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%B8%B8%E7%94%A8%E7%9A%84Router%E7%BB%84%E4%BB%B6%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对React Router的理解？常用的Router组件有哪些？ 一、是什么react-router等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面 路由的本质就是页面的URL发生改变时，页面的显示结果可以根据URL的变化而变化，但是页面不会刷新 因此，可以通过前端路由可以实现单页(SPA)应用 react-router主要分成了几个不同的包： react-router: 实现了路由的核心功能 react-router-dom：基于 react-router，加入了在浏览器运行环境下的一些功能 react-router-native：基于 react-router，加入了 react-native 运行环境下的一些功能 react-router-config: 用于配置静态路由的工具库 二、有哪些这里主要讲述的是react-router-dom的常用API，主要是提供了一些组件： BrowserRouter、HashRouter Route Link、NavLink switch redirect BrowserRouter、HashRouterRouter中包含了对路径改变的监听，并且会将相应的路径传递给子组件 BrowserRouter是history模式，HashRouter模式 使用两者作为最顶层组件包裹其他组件 1234567891011121314151617181920212223import &#123; BrowserRouter as Router &#125; from &quot;react-router-dom&quot;;export default function App() &#123; return ( &lt;Router&gt; &lt;main&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/contact&quot;&gt;Contact&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/main&gt; &lt;/Router&gt; );&#125; RouteRoute用于路径的匹配，然后进行组件的渲染，对应的属性如下： path 属性：用于设置匹配到的路径 component 属性：设置匹配到路径后，渲染的组件 render 属性：设置匹配到路径后，渲染的内容 exact 属性：开启精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件 123456789101112131415161718192021222324import &#123; BrowserRouter as Router, Route &#125; from &quot;react-router-dom&quot;;export default function App() &#123; return ( &lt;Router&gt; &lt;main&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;/contact&quot;&gt;Contact&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;Route path=&quot;/&quot; render=&#123;() =&gt; &lt;h1&gt;Welcome!&lt;/h1&gt;&#125; /&gt; &lt;/main&gt; &lt;/Router&gt; );&#125; Link、NavLink通常路径的跳转是使用Link组件，最终会被渲染成a元素，其中属性to代替a标题的href属性 NavLink是在Link基础之上增加了一些样式属性，例如组件被选中时，发生样式变化，则可以设置NavLink的以下属性： activeStyle：活跃时（匹配时）的样式 activeClassName：活跃时添加的class 如下： 123&lt;NavLink to=&quot;/&quot; exact activeStyle=&#123;&#123;color: &quot;red&quot;&#125;&#125;&gt;首页&lt;/NavLink&gt;&lt;NavLink to=&quot;/about&quot; activeStyle=&#123;&#123;color: &quot;red&quot;&#125;&#125;&gt;关于&lt;/NavLink&gt;&lt;NavLink to=&quot;/profile&quot; activeStyle=&#123;&#123;color: &quot;red&quot;&#125;&#125;&gt;我的&lt;/NavLink&gt; 如果需要实现js实现页面的跳转，那么可以通过下面的形式： 通过Route作为顶层组件包裹其他组件后,页面组件就可以接收到一些路由相关的东西，比如props.history 1234567const Contact = (&#123; history &#125;) =&gt; ( &lt;Fragment&gt; &lt;h1&gt;Contact&lt;/h1&gt; &lt;button onClick=&#123;() =&gt; history.push(&quot;/&quot;)&#125;&gt;Go to home&lt;/button&gt; &lt;FakeText /&gt; &lt;/Fragment&gt;); props中接收到的history对象具有一些方便的方法，如goBack，goForward,push redirect用于路由的重定向，当这个组件出现时，就会执行跳转到对应的to路径中，如下例子： 123456789101112const About = (&#123; match: &#123; params: &#123; name &#125;, &#125;,&#125;) =&gt; ( // props.match.params.name &lt;Fragment&gt; &#123;name !== &quot;tom&quot; ? &lt;Redirect to=&quot;/&quot; /&gt; : null&#125; &lt;h1&gt;About &#123;name&#125;&lt;/h1&gt; &lt;FakeText /&gt; &lt;/Fragment&gt;) 上述组件当接收到的路由参数name 不等于 tom 的时候，将会自动重定向到首页 switchswich组件的作用适用于当匹配到第一个组件的时候，后面的组件就不应该继续匹配 如下例子： 1234567&lt;Switch&gt; &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125; /&gt; &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt; &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125; /&gt; &lt;Route path=&quot;/:userid&quot; component=&#123;User&#125; /&gt; &lt;Route component=&#123;NoMatch&#125; /&gt;&lt;/Switch&gt; 如果不使用switch组件进行包裹 除了一些路由相关的组件之外，react-router还提供一些hooks，如下： useHistory useParams useLocation useHistoryuseHistory可以让组件内部直接访问history，无须通过props获取 1234567891011import &#123; useHistory &#125; from &quot;react-router-dom&quot;;const Contact = () =&gt; &#123; const history = useHistory(); return ( &lt;Fragment&gt; &lt;h1&gt;Contact&lt;/h1&gt; &lt;button onClick=&#123;() =&gt; history.push(&quot;/&quot;)&#125;&gt;Go to home&lt;/button&gt; &lt;/Fragment&gt; );&#125;; useParams1234567891011const About = () =&gt; &#123; const &#123; name &#125; = useParams(); return ( // props.match.params.name &lt;Fragment&gt; &#123;name !== &quot;John Doe&quot; ? &lt;Redirect to=&quot;/&quot; /&gt; : null&#125; &lt;h1&gt;About &#123;name&#125;&lt;/h1&gt; &lt;Route component=&#123;Contact&#125; /&gt; &lt;/Fragment&gt; );&#125;; useLocationuseLocation 会返回当前 URL的 location对象 123456789101112import &#123; useLocation &#125; from &quot;react-router-dom&quot;;const Contact = () =&gt; &#123; const &#123; pathname &#125; = useLocation(); return ( &lt;Fragment&gt; &lt;h1&gt;Contact&lt;/h1&gt; &lt;p&gt;Current URL: &#123;pathname&#125;&lt;/p&gt; &lt;/Fragment&gt; );&#125;; 三、参数传递这些路由传递参数主要分成了三种形式： 动态路由的方式 search传递参数 to传入对象 动态路由动态路由的概念指的是路由中的路径并不会固定 例如将path在Route匹配时写成/detail/:id，那么 /detail/abc、/detail/123都可以匹配到该Route 1234567&lt;NavLink to=&quot;/detail/abc123&quot;&gt;详情&lt;/NavLink&gt;&lt;Switch&gt; ... 其他Route &lt;Route path=&quot;/detail/:id&quot; component=&#123;Detail&#125;/&gt; &lt;Route component=&#123;NoMatch&#125; /&gt;&lt;/Switch&gt; 获取参数方式如下： 1console.log(props.match.params.xxx) search传递参数在跳转的路径中添加了一些query参数； 12345&lt;NavLink to=&quot;/detail2?name=why&amp;age=18&quot;&gt;详情2&lt;/NavLink&gt;&lt;Switch&gt; &lt;Route path=&quot;/detail2&quot; component=&#123;Detail2&#125;/&gt;&lt;/Switch&gt; 获取形式如下： 1console.log(props.location.search) to传入对象传递方式如下： 12345678&lt;NavLink to=&#123;&#123; pathname: &quot;/detail2&quot;, query: &#123;name: &quot;kobe&quot;, age: 30&#125;, state: &#123;height: 1.98, address: &quot;洛杉矶&quot;&#125;, search: &quot;?apikey=123&quot; &#125;&#125;&gt; 详情2&lt;/NavLink&gt; 获取参数的形式如下： 1console.log(props.location) 参考文献 http://react-guide.github.io/react-router-cn/docs/API.html#route","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"你在React项目中是如何使用Redux的? 项目结构是如何划分的？","slug":"React.你在React项目中是如何使用Redux的_ 项目结构是如何划分的？","date":"2022-08-05T02:37:09.805Z","updated":"2022-08-05T02:47:41.178Z","comments":true,"path":"2022/08/05/React.你在React项目中是如何使用Redux的_ 项目结构是如何划分的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E4%BD%A0%E5%9C%A8React%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Redux%E7%9A%84_%20%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%92%E5%88%86%E7%9A%84%EF%BC%9F/","excerpt":"","text":"你在React项目中是如何使用Redux的? 项目结构是如何划分的？ 一、背景在Redux介绍中，我们了解到redux是用于数据状态管理，而react是一个视图层面的库 如果将两者连接在一起，可以使用官方推荐react-redux库，其具有高效且灵活的特性 react-redux将组件分成： 容器组件：存在逻辑处理 UI 组件：只负责现显示和交互，内部不处理逻辑，状态由外部控制 通过redux将整个应用状态存储到store中，组件可以派发dispatch行为action给store 其他组件通过订阅store中的状态state来更新自身的视图 二、如何做使用react-redux分成了两大核心： Provider connection Provider在redux中存在一个store用于存储state，如果将这个store存放在顶层元素中，其他组件都被包裹在顶层元素之上 那么所有的组件都能够受到redux的控制，都能够获取到redux中的数据 使用方式如下： 123&lt;Provider store = &#123;store&#125;&gt; &lt;App /&gt;&lt;Provider&gt; connectionconnect方法将store上的getState和 dispatch包装成组件的props 导入conect如下： 1import &#123; connect &#125; from &quot;react-redux&quot;; 用法如下： 1connect(mapStateToProps, mapDispatchToProps)(MyComponent) 可以传递两个参数： mapStateToProps mapDispatchToProps mapStateToProps把redux中的数据映射到react中的props中去 如下： 123456const mapStateToProps = (state) =&gt; &#123; return &#123; // prop : state.xxx | 意思是将state中的某个数据映射到props中 foo: state.bar &#125;&#125; 组件内部就能够通过props获取到store中的数据 12345678910111213class Foo extends Component &#123; constructor(props)&#123; super(props); &#125; render()&#123; return( // 这样子渲染的其实就是state.bar的数据了 &lt;div&gt;this.props.foo&lt;/div&gt; ) &#125;&#125;Foo = connect()(Foo)export default Foo mapDispatchToProps将redux中的dispatch映射到组件内部的props中 12345678910111213141516171819202122const mapDispatchToProps = (dispatch) =&gt; &#123; // 默认传递参数就是dispatch return &#123; onClick: () =&gt; &#123; dispatch(&#123; type: &#x27;increatment&#x27; &#125;); &#125; &#125;;&#125;class Foo extends Component &#123; constructor(props)&#123; super(props); &#125; render()&#123; return( &lt;button onClick = &#123;this.props.onClick&#125;&gt;点击increase&lt;/button&gt; ) &#125;&#125;Foo = connect()(Foo);export default Foo; 小结整体流程图大致如下所示： 三、项目结构可以根据项目具体情况进行选择，以下列出两种常见的组织结构 按角色组织（MVC）角色如下： reducers actions components containers 参考如下： 1234567891011121314reducers/ todoReducer.js filterReducer.jsactions/ todoAction.js filterActions.jscomponents/ todoList.js todoItem.js filter.jscontainers/ todoListContainer.js todoItemContainer.js filterContainer.js 按功能组织使用redux使用功能组织项目，也就是把完成同一应用功能的代码放在一个目录下，一个应用功能包含多个角色的代码 Redux中，不同的角色就是reducer、actions和视图，而应用功能对应的就是用户界面的交互模块 参考如下： 12345678910111213141516todoList/ actions.js actionTypes.js index.js reducer.js views/ components.js containers.jsfilter/ actions.js actionTypes.js index.js reducer.js views/ components.js container.js 每个功能模块对应一个目录，每个目录下包含同样的角色文件： actionTypes.js 定义action类型 actions.js 定义action构造函数 reducer.js 定义这个功能模块如果响应actions.js定义的动作 views 包含功能模块中所有的React组件，包括展示组件和容器组件 index.js 把所有的角色导入，统一导出 其中index模块用于导出对外的接口 12345import * as actions from &#x27;./actions.js&#x27;;import reducer from &#x27;./reducer.js&#x27;;import view from &#x27;./views/container.js&#x27;;export &#123; actions, reducer, view &#125;; 导入方法如下： 1import &#123; actions, reducer, view as TodoList &#125; from &#x27;./xxxx&#x27; 参考文献 https://www.redux.org.cn/docs/basics/UsageWithReact.html","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对Redux中间件的理解？常用的中间件有哪些？实现原理？","slug":"React.说说对Redux中间件的理解？常用的中间件有哪些？实现原理？","date":"2022-08-05T02:37:09.804Z","updated":"2022-08-05T02:50:15.898Z","comments":true,"path":"2022/08/05/React.说说对Redux中间件的理解？常用的中间件有哪些？实现原理？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9Redux%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/","excerpt":"","text":"说说对Redux中间件的理解？常用的中间件有哪些？实现原理？ 一、是什么中间件（Middleware）在计算机中，是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的 在这篇文章中，了解到了Redux整个工作流程，当action发出之后，reducer立即算出state，整个过程是一个同步的操作 那么如果需要支持异步操作，或者支持错误处理、日志监控，这个过程就可以用上中间件 Redux中，中间件就是放在就是在dispatch过程，在分发action进行拦截处理，如下图： 其本质上一个函数，对store.dispatch方法进行了改造，在发出 Action和执行 Reducer这两步之间，添加了其他功能 二、常用的中间件有很多优秀的redux中间件，这里我们例举两个： redux-thunk：用于异步操作 redux-logger：用于日志记录 上述的中间件都需要通过applyMiddlewares进行注册，作用是将所有的中间件组成一个数组，依次执行 然后作为第二个参数传入到createStore中 1234const store = createStore( reducer, applyMiddleware(thunk, logger)); redux-thunkredux-thunk是官网推荐的异步处理中间件 默认情况下的dispatch(action)，action需要是一个JavaScript的对象 redux-thunk中间件会判断你当前传进来的数据类型，如果是一个函数，将会给函数传入参数值（dispatch，getState） dispatch函数用于我们之后再次派发action getState函数考虑到我们之后的一些操作需要依赖原来的状态，用于让我们可以获取之前的一些状态 所以dispatch可以写成下述函数的形式： 123456789const getHomeMultidataAction = () =&gt; &#123; return (dispatch) =&gt; &#123; axios.get(&quot;http://xxx.xx.xx.xx/test&quot;).then(res =&gt; &#123; const data = res.data.data; dispatch(changeBannersAction(data.banner.list)); dispatch(changeRecommendsAction(data.recommend.list)); &#125;) &#125;&#125; redux-logger如果想要实现一个日志功能，则可以使用现成的redux-logger 12345678import &#123; applyMiddleware, createStore &#125; from &#x27;redux&#x27;;import createLogger from &#x27;redux-logger&#x27;;const logger = createLogger();const store = createStore( reducer, applyMiddleware(logger)); 这样我们就能简单通过中间件函数实现日志记录的信息 三、实现原理首先看看applyMiddlewares的源码 12345678910111213141516export default function applyMiddleware(...middlewares) &#123; return (createStore) =&gt; (reducer, preloadedState, enhancer) =&gt; &#123; var store = createStore(reducer, preloadedState, enhancer); var dispatch = store.dispatch; var chain = []; var middlewareAPI = &#123; getState: store.getState, dispatch: (action) =&gt; dispatch(action) &#125;; chain = middlewares.map(middleware =&gt; middleware(middlewareAPI)); dispatch = compose(...chain)(store.dispatch); return &#123;...store, dispatch&#125; &#125;&#125; 所有中间件被放进了一个数组chain，然后嵌套执行，最后执行store.dispatch。可以看到，中间件内部（middlewareAPI）可以拿到getState和dispatch这两个方法 在上面的学习中，我们了解到了redux-thunk的基本使用 内部会将dispatch进行一个判断，然后执行对应操作，原理如下： 12345678910111213function patchThunk(store) &#123; let next = store.dispatch; function dispatchAndThunk(action) &#123; if (typeof action === &quot;function&quot;) &#123; action(store.dispatch, store.getState); &#125; else &#123; next(action); &#125; &#125; store.dispatch = dispatchAndThunk;&#125; 实现一个日志输出的原理也非常简单，如下： 123456789let next = store.dispatch;function dispatchAndLog(action) &#123; console.log(&quot;dispatching:&quot;, addAction(10)); next(addAction(5)); console.log(&quot;新的state:&quot;, store.getState());&#125;store.dispatch = dispatchAndLog; 参考文献 http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你对Redux的理解？其工作原理？","slug":"React.说说你对Redux的理解？其工作原理？","date":"2022-08-05T02:37:09.803Z","updated":"2022-08-05T03:07:32.643Z","comments":true,"path":"2022/08/05/React.说说你对Redux的理解？其工作原理？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9Redux%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%9F/","excerpt":"","text":"说说你对Redux的理解？其工作原理？ 一、是什么React是用于构建用户界面的，帮助我们解决渲染DOM的过程 而在整个应用中会存在很多个组件，每个组件的state是由自身进行管理，包括组件定义自身的state、组件之间的通信通过props传递、使用Context实现数据共享 如果让每个组件都存储自身相关的状态，理论上来讲不会影响应用的运行，但在开发及后续维护阶段，我们将花费大量精力去查询状态的变化过程 这种情况下，如果将所有的状态进行集中管理，当需要更新状态的时候，仅需要对这个管理集中处理，而不用去关心状态是如何分发到每一个组件内部的 redux就是一个实现上述集中管理的容器，遵循三大基本原则： 单一数据源 state 是只读的 使用纯函数来执行修改 注意的是，redux并不是只应用在react中，还与其他界面库一起使用，如Vue 二、工作原理redux要求我们把数据都放在 store公共存储空间 一个组件改变了 store 里的数据内容，其他组件就能感知到 store的变化，再来取数据，从而间接的实现了这些数据传递的功能 工作流程图如下所示： 根据流程图，可以想象，React Components 是借书的用户， Action Creactor 是借书时说的话(借什么书)， Store 是图书馆管理员，Reducer 是记录本(借什么书，还什么书，在哪儿，需要查一下)， state 是书籍信息 整个流程就是借书的用户需要先存在，然后需要借书，需要一句话来描述借什么书，图书馆管理员听到后需要查一下记录本，了解图书的位置，最后图书馆管理员会把这本书给到这个借书人 转换为代码是，React Components 需要获取一些数据, 然后它就告知 Store需要获取数据，这就是就是 Action Creactor , Store 接收到之后去 Reducer 查一下， Reducer 会告诉 Store 应该给这个组件什么数据 三、如何使用创建一个store的公共数据区域 12import &#123; createStore &#125; from &#x27;redux&#x27; // 引入一个第三方的方法const store = createStore() // 创建数据的公共存储区域（管理员） 还需要创建一个记录本去辅助管理数据，也就是reduecer，本质就是一个函数，接收两个参数state，action，返回state 1234567// 设置默认值const initialState = &#123; counter: 0&#125;const reducer = (state = initialState, action) =&gt; &#123;&#125; 然后就可以将记录本传递给store，两者建立连接。如下： 1const store = createStore(reducer) 如果想要获取store里面的数据，则通过store.getState()来获取当前state 1console.log(store.getState()); 下面再看看如何更改store里面数据，是通过dispatch来派发action，通常action中都会有type属性，也可以携带其他的数据 123456789101112store.dispatch(&#123; type: &quot;INCREMENT&quot;&#125;)store.dispath(&#123; type: &quot;DECREMENT&quot;&#125;)store.dispatch(&#123; type: &quot;ADD_NUMBER&quot;, number: 5&#125;) 下面再来看看修改reducer中的处理逻辑： 123456789101112const reducer = (state = initialState, action) =&gt; &#123; switch (action.type) &#123; case &quot;INCREMENT&quot;: return &#123;...state, counter: state.counter + 1&#125;; case &quot;DECREMENT&quot;: return &#123;...state, counter: state.counter - 1&#125;; case &quot;ADD_NUMBER&quot;: return &#123;...state, counter: state.counter + action.number&#125; default: return state; &#125;&#125; 注意，reducer是一个纯函数，不需要直接修改state 这样派发action之后，既可以通过store.subscribe监听store的变化，如下： 123store.subscribe(() =&gt; &#123; console.log(store.getState());&#125;) 在React项目中，会搭配react-redux进行使用 完整代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243const redux = require(&#x27;redux&#x27;);const initialState = &#123; counter: 0&#125;// 创建reducerconst reducer = (state = initialState, action) =&gt; &#123; switch (action.type) &#123; case &quot;INCREMENT&quot;: return &#123;...state, counter: state.counter + 1&#125;; case &quot;DECREMENT&quot;: return &#123;...state, counter: state.counter - 1&#125;; case &quot;ADD_NUMBER&quot;: return &#123;...state, counter: state.counter + action.number&#125; default: return state; &#125;&#125;// 根据reducer创建storeconst store = redux.createStore(reducer);store.subscribe(() =&gt; &#123; console.log(store.getState());&#125;)// 修改store中的statestore.dispatch(&#123; type: &quot;INCREMENT&quot;&#125;)// console.log(store.getState());store.dispatch(&#123; type: &quot;DECREMENT&quot;&#125;)// console.log(store.getState());store.dispatch(&#123; type: &quot;ADD_NUMBER&quot;, number: 5&#125;)// console.log(store.getState()); 小结 createStore可以帮助创建 store store.dispatch 帮助派发 action , action 会传递给 store store.getState 这个方法可以帮助获取 store 里边所有的数据内容 store.subscrible 方法订阅 store 的改变，只要 store 发生改变， store.subscrible 这个函数接收的这个回调函数就会被执行 参考文献 https://cn.redux.js.org/docs/introduction/","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"在React中组件间过渡动画如何实现？","slug":"React.在React中组件间过渡动画如何实现？","date":"2022-08-05T02:37:09.802Z","updated":"2022-08-05T03:15:20.433Z","comments":true,"path":"2022/08/05/React.在React中组件间过渡动画如何实现？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E5%9C%A8React%E4%B8%AD%E7%BB%84%E4%BB%B6%E9%97%B4%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/","excerpt":"","text":"在React中组件间过渡动画如何实现？ 一、是什么在日常开发中，页面切换时的转场动画是比较基础的一个场景 当一个组件在显示与消失过程中存在过渡动画，可以很好的增加用户的体验 在react中实现过渡动画效果会有很多种选择，如react-transition-group，react-motion，Animated，以及原生的CSS都能完成切换动画 二、如何实现在react中，react-transition-group是一种很好的解决方案，其为元素添加enter，enter-active，exit，exit-active这一系列勾子 可以帮助我们方便的实现组件的入场和离场动画 其主要提供了三个主要的组件： CSSTransition：在前端开发中，结合 CSS 来完成过渡动画效果 SwitchTransition：两个组件显示和隐藏切换时，使用该组件 TransitionGroup：将多个动画组件包裹在其中，一般用于列表中元素的动画 CSSTransition其实现动画的原理在于，当CSSTransition的in属性置为true时，CSSTransition首先会给其子组件加上xxx-enter、xxx-enter-active的class执行动画 当动画执行结束后，会移除两个class，并且添加-enter-done的class 所以可以利用这一点，通过css的transition属性，让元素在两个状态之间平滑过渡，从而得到相应的动画效果 当in属性置为false时，CSSTransition会给子组件加上xxx-exit和xxx-exit-active的class，然后开始执行动画，当动画结束后，移除两个class，然后添加-enter-done的class 如下例子： 12345678910111213141516171819202122232425export default class App2 extends React.PureComponent &#123; state = &#123;show: true&#125;; onToggle = () =&gt; this.setState(&#123;show: !this.state.show&#125;); render() &#123; const &#123;show&#125; = this.state; return ( &lt;div className=&#123;&#x27;container&#x27;&#125;&gt; &lt;div className=&#123;&#x27;square-wrapper&#x27;&#125;&gt; &lt;CSSTransition in=&#123;show&#125; timeout=&#123;500&#125; classNames=&#123;&#x27;fade&#x27;&#125; unmountOnExit=&#123;true&#125; &gt; &lt;div className=&#123;&#x27;square&#x27;&#125; /&gt; &lt;/CSSTransition&gt; &lt;/div&gt; &lt;Button onClick=&#123;this.onToggle&#125;&gt;toggle&lt;/Button&gt; &lt;/div&gt; ); &#125;&#125; 对应css样式如下： 123456789101112131415161718192021.fade-enter &#123; opacity: 0; transform: translateX(100%);&#125;.fade-enter-active &#123; opacity: 1; transform: translateX(0); transition: all 500ms;&#125;.fade-exit &#123; opacity: 1; transform: translateX(0);&#125;.fade-exit-active &#123; opacity: 0; transform: translateX(-100%); transition: all 500ms;&#125; SwitchTransitionSwitchTransition可以完成两个组件之间切换的炫酷动画 比如有一个按钮需要在on和off之间切换，我们希望看到on先从左侧退出，off再从右侧进入 SwitchTransition中主要有一个属性mode，对应两个值： in-out：表示新组件先进入，旧组件再移除； out-in：表示就组件先移除，新组建再进入 SwitchTransition组件里面要有CSSTransition，不能直接包裹你想要切换的组件 里面的CSSTransition组件不再像以前那样接受in属性来判断元素是何种状态，取而代之的是key属性 下面给出一个按钮入场和出场的示例，如下： 123456789101112131415161718192021222324252627282930313233import &#123; SwitchTransition, CSSTransition &#125; from &quot;react-transition-group&quot;;export default class SwitchAnimation extends PureComponent &#123; constructor(props) &#123; super(props); this.state = &#123; isOn: true &#125; &#125; render() &#123; const &#123;isOn&#125; = this.state; return ( &lt;SwitchTransition mode=&quot;out-in&quot;&gt; &lt;CSSTransition classNames=&quot;btn&quot; timeout=&#123;500&#125; key=&#123;isOn ? &quot;on&quot; : &quot;off&quot;&#125;&gt; &#123; &lt;button onClick=&#123;this.btnClick.bind(this)&#125;&gt; &#123;isOn ? &quot;on&quot;: &quot;off&quot;&#125; &lt;/button&gt; &#125; &lt;/CSSTransition&gt; &lt;/SwitchTransition&gt; ) &#125; btnClick() &#123; this.setState(&#123;isOn: !this.state.isOn&#125;) &#125;&#125; css文件对应如下： 123456789101112131415161718192021.btn-enter &#123; transform: translate(100%, 0); opacity: 0;&#125;.btn-enter-active &#123; transform: translate(0, 0); opacity: 1; transition: all 500ms;&#125;.btn-exit &#123; transform: translate(0, 0); opacity: 1;&#125;.btn-exit-active &#123; transform: translate(-100%, 0); opacity: 0; transition: all 500ms;&#125; TransitionGroup当有一组动画的时候，就可将这些CSSTransition放入到一个TransitionGroup中来完成动画 同样CSSTransition里面没有in属性，用到了key属性 TransitionGroup在感知children发生变化的时候，先保存移除的节点，当动画结束后才真正移除 其处理方式如下： 插入的节点，先渲染dom，然后再做动画 删除的节点，先做动画，然后再删除dom 如下： 12345678910111213141516171819202122232425262728293031323334353637import React, &#123; PureComponent &#125; from &#x27;react&#x27;import &#123; CSSTransition, TransitionGroup &#125; from &#x27;react-transition-group&#x27;;export default class GroupAnimation extends PureComponent &#123; constructor(props) &#123; super(props); this.state = &#123; friends: [] &#125; &#125; render() &#123; return ( &lt;div&gt; &lt;TransitionGroup&gt; &#123; this.state.friends.map((item, index) =&gt; &#123; return ( &lt;CSSTransition classNames=&quot;friend&quot; timeout=&#123;300&#125; key=&#123;index&#125;&gt; &lt;div&gt;&#123;item&#125;&lt;/div&gt; &lt;/CSSTransition&gt; ) &#125;) &#125; &lt;/TransitionGroup&gt; &lt;button onClick=&#123;e =&gt; this.addFriend()&#125;&gt;+friend&lt;/button&gt; &lt;/div&gt; ) &#125; addFriend() &#123; this.setState(&#123; friends: [...this.state.friends, &quot;coderwhy&quot;] &#125;) &#125;&#125; 对应css如下： 123456789101112131415161718192021.friend-enter &#123; transform: translate(100%, 0); opacity: 0;&#125;.friend-enter-active &#123; transform: translate(0, 0); opacity: 1; transition: all 500ms;&#125;.friend-exit &#123; transform: translate(0, 0); opacity: 1;&#125;.friend-exit-active &#123; transform: translate(-100%, 0); opacity: 0; transition: all 500ms;&#125;","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说react中引入css的方式有哪几种？区别？","slug":"React.说说react中引入css的方式有哪几种？区别？","date":"2022-08-05T02:37:09.800Z","updated":"2022-08-05T03:15:13.094Z","comments":true,"path":"2022/08/05/React.说说react中引入css的方式有哪几种？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4react%E4%B8%AD%E5%BC%95%E5%85%A5css%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说react中引入css的方式有哪几种？区别？ 一、是什么组件式开发选择合适的css解决方案尤为重要 通常会遵循以下规则： 可以编写局部css，不会随意污染其他组件内的原生； 可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式； 支持所有的css特性：伪类、动画、媒体查询等； 编写起来简洁方便、最好符合一贯的css风格特点 在这一方面，vue使用css起来更为简洁： 通过 style 标签编写样式 scoped 属性决定编写的样式是否局部有效 lang 属性设置预处理器 内联样式风格的方式来根据最新状态设置和改变css 而在react中，引入CSS就不如Vue方便简洁，其引入css的方式有很多种，各有利弊 二、方式常见的CSS引入方式有以下： 在组件内直接使用 组件中引入 .css 文件 组件中引入 .module.css 文件 CSS in JS 在组件内直接使用直接在组件中书写css样式，通过style属性直接引入，如下： 1234567891011121314151617181920212223242526import React, &#123; Component &#125; from &quot;react&quot;;const div1 = &#123; width: &quot;300px&quot;, margin: &quot;30px auto&quot;, backgroundColor: &quot;#44014C&quot;, //驼峰法 minHeight: &quot;200px&quot;, boxSizing: &quot;border-box&quot;&#125;;class Test extends Component &#123; constructor(props, context) &#123; super(props); &#125; render() &#123; return ( &lt;div&gt; &lt;div style=&#123;div1&#125;&gt;123&lt;/div&gt; &lt;div style=&#123;&#123;backgroundColor:&quot;red&quot;&#125;&#125;&gt; &lt;/div&gt; ); &#125;&#125;export default Test; 上面可以看到，css属性需要转换成驼峰写法 这种方式优点： 内联样式, 样式之间不会有冲突 可以动态获取当前state中的状态 缺点： 写法上都需要使用驼峰标识 某些样式没有提示 大量的样式, 代码混乱 某些样式无法编写(比如伪类/伪元素) 组件中引入css文件将css单独写在一个css文件中，然后在组件中直接引入 App.css文件： 123456789.title &#123; color: red; font-size: 20px;&#125;.desc &#123; color: green; text-decoration: underline;&#125; 组件中引入： 1234567891011121314151617import React, &#123; PureComponent &#125; from &#x27;react&#x27;;import Home from &#x27;./Home&#x27;;import &#x27;./App.css&#x27;;export default class App extends PureComponent &#123; render() &#123; return ( &lt;div className=&quot;app&quot;&gt; &lt;h2 className=&quot;title&quot;&gt;我是App的标题&lt;/h2&gt; &lt;p className=&quot;desc&quot;&gt;我是App中的一段文字描述&lt;/p&gt; &lt;Home/&gt; &lt;/div&gt; ) &#125;&#125; 这种方式存在不好的地方在于样式是全局生效，样式之间会互相影响 组件中引入 .module.css 文件将css文件作为一个模块引入，这个模块中的所有css，只作用于当前组件。不会影响当前组件的后代组件 这种方式是webpack特工的方案，只需要配置webpack配置文件中modules:true即可 1234567891011121314151617import React, &#123; PureComponent &#125; from &#x27;react&#x27;;import Home from &#x27;./Home&#x27;;import &#x27;./App.module.css&#x27;;export default class App extends PureComponent &#123; render() &#123; return ( &lt;div className=&quot;app&quot;&gt; &lt;h2 className=&quot;title&quot;&gt;我是App的标题&lt;/h2&gt; &lt;p className=&quot;desc&quot;&gt;我是App中的一段文字描述&lt;/p&gt; &lt;Home/&gt; &lt;/div&gt; ) &#125;&#125; 这种方式能够解决局部作用域问题，但也有一定的缺陷： 引用的类名，不能使用连接符(.xxx-xx)，在 JavaScript 中是不识别的 所有的 className 都必须使用 {style.className} 的形式来编写 不方便动态来修改某些样式，依然需要使用内联样式的方式； CSS in JSCSS-in-JS， 是指一种模式，其中CSS由 JavaScript生成而不是在外部文件中定义 此功能并不是 React 的一部分，而是由第三方库提供，例如： styled-components emotion glamorous 下面主要看看styled-components的基本使用 本质是通过函数的调用，最终创建出一个组件： 这个组件会被自动添加上一个不重复的class styled-components会给该class添加相关的样式 基本使用如下： 创建一个style.js文件用于存放样式组件： 12345678910111213export const SelfLink = styled.div` height: 50px; border: 1px solid red; color: yellow;`;export const SelfButton = styled.div` height: 150px; width: 150px; color: $&#123;props =&gt; props.color&#125;; background-image: url($&#123;props =&gt; props.src&#125;); background-size: 150px 150px;`; 引入样式组件也很简单： 12345678910111213141516171819202122import React, &#123; Component &#125; from &quot;react&quot;;import &#123; SelfLink, SelfButton &#125; from &quot;./style&quot;;class Test extends Component &#123; constructor(props, context) &#123; super(props); &#125; render() &#123; return ( &lt;div&gt; &lt;SelfLink title=&quot;People&#x27;s Republic of China&quot;&gt;app.js&lt;/SelfLink&gt; &lt;SelfButton color=&quot;palevioletred&quot; style=&#123;&#123; color: &quot;pink&quot; &#125;&#125; src=&#123;fist&#125;&gt; SelfButton &lt;/SelfButton&gt; &lt;/div&gt; ); &#125;&#125;export default Test; 三、区别通过上面四种样式的引入，可以看到： 在组件内直接使用css该方式编写方便，容易能够根据状态修改样式属性，但是大量的演示编写容易导致代码混乱 组件中引入 .css 文件符合我们日常的编写习惯，但是作用域是全局的，样式之间会层叠 引入.module.css 文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写 通过css in js 这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等 至于使用react用哪种方案引入css，并没有一个绝对的答案，可以根据各自情况选择合适的方案 参考文献 https://zh-hans.reactjs.org/docs/faq-styling.html#gatsby-focus-wrapper","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React Hooks的理解？解决了什么问题？","slug":"React.说说对React Hooks的理解？解决了什么问题？","date":"2022-08-05T02:37:09.799Z","updated":"2022-08-05T02:48:24.266Z","comments":true,"path":"2022/08/05/React.说说对React Hooks的理解？解决了什么问题？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%20Hooks%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/","excerpt":"","text":"说说对React Hooks的理解？解决了什么问题？ 一、是什么Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性 至于为什么引入hook，官方给出的动机是解决长时间使用和维护react过程中常遇到的问题，例如： 难以重用和共享组件中的与状态相关的逻辑 逻辑复杂的组件难以开发与维护，当我们的组件需要处理多个互不相关的 local state 时，每个生命周期函数中可能会包含着各种互不相关的逻辑在里面 类组件中的this增加学习成本，类组件在基于现有工具的优化上存在些许问题 由于业务变动，函数组件不得不改为类组件等等 在以前，函数组件也被称为无状态的组件，只负责渲染的一些工作 因此，现在的函数组件也可以是有状态的组件，内部也可以维护自身的状态以及做一些逻辑方面的处理 二、有哪些上面讲到，Hooks让我们的函数组件拥有了类组件的特性，例如组件内的状态、生命周期 最常见的hooks有如下： useState useEffect 其他 useState首先给出一个例子，如下： 123456789101112131415import React, &#123; useState &#125; from &#x27;react&#x27;;function Example() &#123; // 声明一个叫 &quot;count&quot; 的 state 变量 const [count, setCount] = useState(0); return ( &lt;div&gt; &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/button&gt; &lt;/div&gt; );&#125; 在函数组件中通过useState实现函数内部维护state，参数为state默认的值，返回值是一个数组，第一个值为当前的state，第二个值为更新state的函数 该函数组件等价于的类组件如下： 12345678910111213141516171819class Example extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0 &#125;; &#125; render() &#123; return ( &lt;div&gt; &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt; Click me &lt;/button&gt; &lt;/div&gt; ); &#125;&#125; 从上述两种代码分析，可以看出两者区别： state声明方式：在函数组件中通过 useState 直接获取，类组件通过constructor 构造函数中设置 state读取方式：在函数组件中直接使用变量，类组件通过this.state.count的方式获取 state更新方式：在函数组件中通过 setCount 更新，类组件通过this.setState() 总的来讲，useState 使用起来更为简洁，减少了this指向不明确的情况 useEffectuseEffect可以让我们在函数组件中进行一些带有副作用的操作 同样给出一个计时器示例： 1234567891011121314151617181920212223242526class Example extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0 &#125;; &#125; componentDidMount() &#123; document.title = `You clicked $&#123;this.state.count&#125; times`; &#125; componentDidUpdate() &#123; document.title = `You clicked $&#123;this.state.count&#125; times`; &#125; render() &#123; return ( &lt;div&gt; &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt; Click me &lt;/button&gt; &lt;/div&gt; ); &#125;&#125; 从上面可以看见，组件在加载和更新阶段都执行同样操作 而如果使用useEffect后，则能够将相同的逻辑抽离出来，这是类组件不具备的方法 对应的useEffect示例如下： 1234567891011121314import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;function Example() &#123; const [count, setCount] = useState(0); useEffect(() =&gt; &#123; document.title = `You clicked $&#123;count&#125; times`; &#125;); return ( &lt;div&gt; &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt; Click me &lt;/button&gt; &lt;/div&gt; );&#125; useEffect第一个参数接受一个回调函数，默认情况下，useEffect会在第一次渲染和更新之后都会执行，相当于在componentDidMount和componentDidUpdate两个生命周期函数中执行回调 如果某些特定值在两次重渲染之间没有发生变化，你可以跳过对 effect 的调用，这时候只需要传入第二个参数，如下： 123useEffect(() =&gt; &#123; document.title = `You clicked $&#123;count&#125; times`;&#125;, [count]); // 仅在 count 更改时更新 上述传入第二个参数后，如果 count 的值是 5，而且我们的组件重渲染的时候 count 还是等于 5，React 将对前一次渲染的 [5] 和后一次渲染的 [5] 进行比较，如果是相等则跳过effects执行 回调函数中可以返回一个清除函数，这是effect可选的清除机制，相当于类组件中componentwillUnmount生命周期函数，可做一些清除副作用的操作，如下： 12345678910useEffect(() =&gt; &#123; function handleStatusChange(status) &#123; setIsOnline(status.isOnline); &#125; ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () =&gt; &#123; ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); &#125;;&#125;); 所以， useEffect相当于componentDidMount，componentDidUpdate和 componentWillUnmount 这三个生命周期函数的组合 其它 hooks在组件通信过程中可以使用useContext，refs学习中我们也用到了useRef获取DOM结构…… 还有很多额外的hooks，如： useReducer useCallback useMemo useRef 三、解决什么通过对上面的初步认识，可以看到hooks能够更容易解决状态相关的重用的问题： 每调用useHook一次都会生成一份独立的状态 通过自定义hook能够更好的封装我们的功能 编写hooks为函数式编程，每个功能都包裹在函数中，整体风格更清爽，更优雅 hooks的出现，使函数组件的功能得到了扩充，拥有了类组件相似的功能，在我们日常使用中，使用hooks能够解决大多数问题，并且还拥有代码复用机制，因此优先考虑hooks 参考文献 https://zh-hans.reactjs.org/docs/hooks-state.html https://zh-hans.reactjs.org/docs/hooks-effect.html","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对高阶组件的理解？应用场景?","slug":"React.说说对高阶组件的理解？应用场景_","date":"2022-08-05T02:37:09.798Z","updated":"2022-08-05T02:48:08.183Z","comments":true,"path":"2022/08/05/React.说说对高阶组件的理解？应用场景_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF_/","excerpt":"","text":"说说对高阶组件的理解？应用场景? 一、是什么高阶函数（Higher-order function），至少满足下列一个条件的函数 接受一个或多个函数作为输入 输出一个函数 在React中，高阶组件即接受一个或多个组件作为参数并且返回一个组件，本质也就是一个函数，并不是一个组件 1const EnhancedComponent = highOrderComponent(WrappedComponent); 上述代码中，该函数接受一个组件WrappedComponent作为参数，返回加工过的新组件EnhancedComponent 高阶组件的这种实现方式，本质上是一个装饰者设计模式 二、如何编写最基本的高阶组件的编写模板如下： 12345678910import React, &#123; Component &#125; from &#x27;react&#x27;;export default (WrappedComponent) =&gt; &#123; return class EnhancedComponent extends Component &#123; // do something render() &#123; return &lt;WrappedComponent /&gt;; &#125; &#125;&#125; 通过对传入的原始组件 WrappedComponent 做一些你想要的操作（比如操作 props，提取 state，给原始组件包裹其他元素等），从而加工出想要的组件 EnhancedComponent 把通用的逻辑放在高阶组件中，对组件实现一致的处理，从而实现代码的复用 所以，高阶组件的主要功能是封装并分离组件的通用逻辑，让通用逻辑在组件间更好地被复用 但在使用高阶组件的同时，一般遵循一些约定，如下： props 保持一致 你不能在函数式（无状态）组件上使用 ref 属性，因为它没有实例 不要以任何方式改变原始组件 WrappedComponent 透传不相关 props 属性给被包裹的组件 WrappedComponent 不要再 render() 方法中使用高阶组件 使用 compose 组合高阶组件 包装显示名字以便于调试 这里需要注意的是，高阶组件可以传递所有的props，但是不能传递ref 如果向一个高阶组件添加refe引用，那么ref 指向的是最外层容器组件实例的，而不是被包裹的组件，如果需要传递refs的话，则使用React.forwardRef，如下： 12345678910111213141516171819202122function withLogging(WrappedComponent) &#123; class Enhance extends WrappedComponent &#123; componentWillReceiveProps() &#123; console.log(&#x27;Current props&#x27;, this.props); console.log(&#x27;Next props&#x27;, nextProps); &#125; render() &#123; const &#123;forwardedRef, ...rest&#125; = this.props; // 把 forwardedRef 赋值给 ref return &lt;WrappedComponent &#123;...rest&#125; ref=&#123;forwardedRef&#125; /&gt;; &#125; &#125;; // React.forwardRef 方法会传入 props 和 ref 两个参数给其回调函数 // 所以这边的 ref 是由 React.forwardRef 提供的 function forwardRef(props, ref) &#123; return &lt;Enhance &#123;...props&#125; forwardRef=&#123;ref&#125; /&gt; &#125; return React.forwardRef(forwardRef);&#125;const EnhancedComponent = withLogging(SomeComponent); 三、应用场景通过上面的了解，高阶组件能够提高代码的复用性和灵活性，在实际应用中，常常用于与核心业务无关但又在多个模块使用的功能，如权限控制、日志记录、数据校验、异常处理、统计上报等 举个例子，存在一个组件，需要从缓存中获取数据，然后渲染。一般情况，我们会如下编写： 12345678910111213import React, &#123; Component &#125; from &#x27;react&#x27;class MyComponent extends Component &#123; componentWillMount() &#123; let data = localStorage.getItem(&#x27;data&#x27;); this.setState(&#123;data&#125;); &#125; render() &#123; return &lt;div&gt;&#123;this.state.data&#125;&lt;/div&gt; &#125;&#125; 上述代码当然可以实现该功能，但是如果还有其他组件也有类似功能的时候，每个组件都需要重复写componentWillMount中的代码，这明显是冗杂的 下面就可以通过高价组件来进行改写，如下： 1234567891011121314151617181920212223import React, &#123; Component &#125; from &#x27;react&#x27;function withPersistentData(WrappedComponent) &#123; return class extends Component &#123; componentWillMount() &#123; let data = localStorage.getItem(&#x27;data&#x27;); this.setState(&#123;data&#125;); &#125; render() &#123; // 通过&#123;...this.props&#125; 把传递给当前组件的属性继续传递给被包装的组件WrappedComponent return &lt;WrappedComponent data=&#123;this.state.data&#125; &#123;...this.props&#125; /&gt; &#125; &#125;&#125;class MyComponent2 extends Component &#123; render() &#123; return &lt;div&gt;&#123;this.props.data&#125;&lt;/div&gt; &#125;&#125;const MyComponentWithPersistentData = withPersistentData(MyComponent2) 再比如组件渲染性能监控，如下： 12345678910111213141516171819202122232425262728class Home extends React.Component &#123; render() &#123; return (&lt;h1&gt;Hello World.&lt;/h1&gt;); &#125;&#125;function withTiming(WrappedComponent) &#123; return class extends WrappedComponent &#123; constructor(props) &#123; super(props); this.start = 0; this.end = 0; &#125; componentWillMount() &#123; super.componentWillMount &amp;&amp; super.componentWillMount(); this.start = Date.now(); &#125; componentDidMount() &#123; super.componentDidMount &amp;&amp; super.componentDidMount(); this.end = Date.now(); console.log(`$&#123;WrappedComponent.name&#125; 组件渲染时间为 $&#123;this.end - this.start&#125; ms`); &#125; render() &#123; return super.render(); &#125; &#125;;&#125;export default withTiming(Home); 参考文献 https://zh-hans.reactjs.org/docs/higher-order-components.html#gatsby-focus-wrapper","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React中受控组件和非受控组件的理解？应用场景？","slug":"React.说说对React中受控组件和非受控组件的理解？应用场景？","date":"2022-08-05T02:37:09.797Z","updated":"2022-08-05T02:48:55.896Z","comments":true,"path":"2022/08/05/React.说说对React中受控组件和非受控组件的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%E4%B8%AD%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说对React中受控组件和非受控组件的理解？应用场景？ 一、受控组件受控组件，简单来讲，就是受我们控制的组件，组件的状态全程响应外部数据 举个简单的例子： 123456789class TestComponent extends React.Component &#123; constructor (props) &#123; super(props); this.state = &#123; username: &#x27;lindaidai&#x27; &#125;; &#125; render () &#123; return &lt;input name=&quot;username&quot; value=&#123;this.state.username&#125; /&gt; &#125;&#125; 这时候当我们在输入框输入内容的时候，会发现输入的内容并无法显示出来，也就是input标签是一个可读的状态 这是因为value被this.state.username所控制住。当用户输入新的内容时，this.state.username并不会自动更新，这样的话input内的内容也就不会变了 如果想要解除被控制，可以为input标签设置onChange事件，输入的时候触发事件函数，在函数内部实现state的更新，从而导致input框的内容页发现改变 因此，受控组件我们一般需要初始状态和一个状态更新事件函数 二、非受控组件非受控组件，简单来讲，就是不受我们控制的组件 一般情况是在初始化的时候接受外部数据，然后自己在内部存储其自身状态 当需要时，可以使用ref 查询 DOM并查找其当前值，如下： 1234567891011121314151617181920import React, &#123; Component &#125; from &#x27;react&#x27;;export class UnControll extends Component &#123; constructor (props) &#123; super(props); this.inputRef = React.createRef(); &#125; handleSubmit = (e) =&gt; &#123; console.log(&#x27;我们可以获得input内的值为&#x27;, this.inputRef.current.value); e.preventDefault(); &#125; render () &#123; return ( &lt;form onSubmit=&#123;e =&gt; this.handleSubmit(e)&#125;&gt; &lt;input defaultValue=&quot;lindaidai&quot; ref=&#123;this.inputRef&#125; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt; &lt;/form&gt; ) &#125;&#125; 关于refs的详情使用可以参考之前文章 三、应用场景大部分时候推荐使用受控组件来实现表单，因为在受控组件中，表单数据由React组件负责处理 如果选择非受控组件的话，控制能力较弱，表单数据就由DOM本身处理，但更加方便快捷，代码量少 针对两者的区别，其应用场景如下图所示：","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React中类组件和函数组件的理解？有什么区别？","slug":"React.说说对React中类组件和函数组件的理解？有什么区别？","date":"2022-08-05T02:37:09.795Z","updated":"2022-08-05T02:48:48.405Z","comments":true,"path":"2022/08/05/React.说说对React中类组件和函数组件的理解？有什么区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%E4%B8%AD%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%92%8C%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说对React中类组件和函数组件的理解？有什么区别？ 一、类组件类组件，顾名思义，也就是通过使用ES6类的编写形式去编写组件，该类必须继承React.Component 如果想要访问父组件传递过来的参数，可通过this.props的方式去访问 在组件中必须实现render方法，在return中返回React对象，如下： 12345678class Welcome extends React.Component &#123; constructor(props) &#123; super(props) &#125; render() &#123; return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt; &#125;&#125; 二、函数组件函数组件，顾名思义，就是通过函数编写的形式去实现一个React组件，是React中定义组件最简单的方式 123function Welcome(props) &#123; return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;&#125; 函数第一个参数为props用于接收父组件传递过来的参数 三、区别针对两种React组件，其区别主要分成以下几大方向： 编写形式 状态管理 生命周期 调用方式 获取渲染的值 编写形式两者最明显的区别在于编写形式的不同，同一种功能的实现可以分别对应类组件和函数组件的编写形式 函数组件： 123function Welcome(props) &#123; return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;&#125; 类组件： 12345678class Welcome extends React.Component &#123; constructor(props) &#123; super(props) &#125; render() &#123; return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt; &#125;&#125; 状态管理在hooks出来之前，函数组件就是无状态组件，不能保管组件的状态，不像类组件中调用setState 如果想要管理state状态，可以使用useState，如下： 12345678910const FunctionalComponent = () =&gt; &#123; const [count, setCount] = React.useState(0); return ( &lt;div&gt; &lt;p&gt;count: &#123;count&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click&lt;/button&gt; &lt;/div&gt; );&#125;; 在使用hooks情况下，一般如果函数组件调用state，则需要创建一个类组件或者state提升到你的父组件中，然后通过props对象传递到子组件 生命周期在函数组件中，并不存在生命周期，这是因为这些生命周期钩子都来自于继承的React.Component 所以，如果用到生命周期，就只能使用类组件 但是函数组件使用useEffect也能够完成替代生命周期的作用，这里给出一个简单的例子： 123456const FunctionalComponent = () =&gt; &#123; useEffect(() =&gt; &#123; console.log(&quot;Hello&quot;); &#125;, []); return &lt;h1&gt;Hello, World&lt;/h1&gt;;&#125;; 上述简单的例子对应类组件中的componentDidMount生命周期 如果在useEffect回调函数中return一个函数，则return函数会在组件卸载的时候执行，正如componentWillUnmount 12345678const FunctionalComponent = () =&gt; &#123; React.useEffect(() =&gt; &#123; return () =&gt; &#123; console.log(&quot;Bye&quot;); &#125;; &#125;, []); return &lt;h1&gt;Bye, World&lt;/h1&gt;;&#125;; 调用方式如果是一个函数组件，调用则是执行函数即可： 123456// 你的代码 function SayHi() &#123; return &lt;p&gt;Hello, React&lt;/p&gt; &#125; // React内部 const result = SayHi(props) // » &lt;p&gt;Hello, React&lt;/p&gt; 如果是一个类组件，则需要将组件进行实例化，然后调用实例对象的render方法： 123456789// 你的代码 class SayHi extends React.Component &#123; render() &#123; return &lt;p&gt;Hello, React&lt;/p&gt; &#125; &#125; // React内部 const instance = new SayHi(props) // » SayHi &#123;&#125; const result = instance.render() // » &lt;p&gt;Hello, React&lt;/p&gt; 获取渲染的值首先给出一个示例 函数组件对应如下： 12345678910111213function ProfilePage(props) &#123; const showMessage = () =&gt; &#123; alert(&#x27;Followed &#x27; + props.user); &#125; const handleClick = () =&gt; &#123; setTimeout(showMessage, 3000); &#125; return ( &lt;button onClick=&#123;handleClick&#125;&gt;Follow&lt;/button&gt; )&#125; 类组件对应如下： 12345678910111213class ProfilePage extends React.Component &#123; showMessage() &#123; alert(&#x27;Followed &#x27; + this.props.user); &#125; handleClick() &#123; setTimeout(this.showMessage.bind(this), 3000); &#125; render() &#123; return &lt;button onClick=&#123;this.handleClick.bind(this)&#125;&gt;Follow&lt;/button&gt; &#125;&#125; 两者看起来实现功能是一致的，但是在类组件中，输出this.props.user，Props在 React中是不可变的所以它永远不会改变，但是 this 总是可变的，以便您可以在 render 和生命周期函数中读取新版本 因此，如果我们的组件在请求运行时更新。this.props 将会改变。showMessage方法从“最新”的 props 中读取 user 而函数组件，本身就不存在this，props并不发生改变，因此同样是点击，alert的内容仍旧是之前的内容 小结两种组件都有各自的优缺点 函数组件语法更短、更简单，这使得它更容易开发、理解和测试 而类组件也会因大量使用 this而让人感到困惑 参考文献 https://zh-hans.reactjs.org/docs/components-and-props.html#function-and-class-components","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React refs 的理解？应用场景？","slug":"React.说说对React refs 的理解？应用场景？","date":"2022-08-05T02:37:09.794Z","updated":"2022-08-05T02:48:30.330Z","comments":true,"path":"2022/08/05/React.说说对React refs 的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%20refs%20%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说对React refs 的理解？应用场景？ 一、是什么Refs 在计算机中称为弹性文件系统（英语：Resilient File System，简称ReFS） React 中的 Refs提供了一种方式，允许我们访问 DOM节点或在 render方法中创建的 React元素 本质为ReactDOM.render()返回的组件实例，如果是渲染组件则返回的是组件实例，如果渲染dom则返回的是具体的dom节点 二、如何使用创建ref的形式有三种： 传入字符串，使用时通过 this.refs.传入的字符串的格式获取对应的元素 传入对象，对象是通过 React.createRef() 方式创建出来，使用时获取到创建的对象中存在 current 属性就是对应的元素 传入函数，该函数会在 DOM 被挂载时进行回调，这个函数会传入一个 元素对象，可以自己保存，使用时，直接拿到之前保存的元素对象即可 传入hook，hook是通过 useRef() 方式创建，使用时通过生成hook对象的 current 属性就是对应的元素 传入字符串只需要在对应元素或组件中ref属性 123456789class MyComponent extends React.Component &#123; constructor(props) &#123; super(props); this.myRef = React.createRef(); &#125; render() &#123; return &lt;div ref=&quot;myref&quot; /&gt;; &#125;&#125; 访问当前节点的方式如下： 1this.refs.myref.innerHTML = &quot;hello&quot;; 传入对象refs通过React.createRef()创建，然后将ref属性添加到React元素中，如下： 123456789class MyComponent extends React.Component &#123; constructor(props) &#123; super(props); this.myRef = React.createRef(); &#125; render() &#123; return &lt;div ref=&#123;this.myRef&#125; /&gt;; &#125;&#125; 当 ref 被传递给 render 中的元素时，对该节点的引用可以在 ref 的 current 属性中访问 1const node = this.myRef.current; jsx传入函数当ref传入为一个函数的时候，在渲染过程中，回调函数参数会传入一个元素对象，然后通过实例将对象进行保存 123456789class MyComponent extends React.Component &#123; constructor(props) &#123; super(props); this.myRef = React.createRef(); &#125; render() &#123; return &lt;div ref=&#123;element =&gt; this.myref = element&#125; /&gt;; &#125;&#125; 获取ref对象只需要通过先前存储的对象即可 1const node = this.myref 传入hook通过useRef创建一个ref，整体使用方式与React.createRef一致 12345678function App(props) &#123; const myref = useRef() return ( &lt;&gt; &lt;div ref=&#123;myref&#125;&gt;&lt;/div&gt; &lt;/&gt; )&#125; 获取ref属性也是通过hook对象的current属性 1const node = myref.current; 上述三种情况都是ref属性用于原生HTML元素上，如果ref设置的组件为一个类组件的时候，ref对象接收到的是组件的挂载实例 注意的是，不能在函数组件上使用ref属性，因为他们并没有实例 三、应用场景在某些情况下，我们会通过使用refs来更新组件，但这种方式并不推荐，更多情况我们是通过props与state的方式进行去重新渲染子元素 过多使用refs，会使组件的实例或者是DOM结构暴露，违反组件封装的原则 例如，避免在 Dialog 组件里暴露 open() 和 close() 方法，最好传递 isOpen 属性 但下面的场景使用refs非常有用： 对Dom元素的焦点控制、内容选择、控制 对Dom元素的内容设置及媒体播放 对Dom元素的操作和对组件实例的操作 集成第三方 DOM 库 参考文献 https://zh-hans.reactjs.org/docs/refs-and-the-dom.html","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"React中的key有什么作用？","slug":"React.React中的key有什么作用？","date":"2022-08-05T02:37:09.793Z","updated":"2022-08-05T03:15:38.929Z","comments":true,"path":"2022/08/05/React.React中的key有什么作用？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.React%E4%B8%AD%E7%9A%84key%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F/","excerpt":"","text":"React中的key有什么作用？ 一、是什么首先，给出react组件中进行列表渲染的一个示例： 1234567891011121314151617181920const data = [ &#123; id: 0, name: &#x27;abc&#x27; &#125;, &#123; id: 1, name: &#x27;def&#x27; &#125;, &#123; id: 2, name: &#x27;ghi&#x27; &#125;, &#123; id: 3, name: &#x27;jkl&#x27; &#125;];const ListItem = (props) =&gt; &#123; return &lt;li&gt;&#123;props.name&#125;&lt;/li&gt;;&#125;;const List = () =&gt; &#123; return ( &lt;ul&gt; &#123;data.map((item) =&gt; ( &lt;ListItem name=&#123;item.name&#125;&gt;&lt;/ListItem&gt; ))&#125; &lt;/ul&gt; );&#125;; 然后在输出就可以看到react所提示的警告信息： 1Each child in a list should have a unique &quot;key&quot; prop. 根据意思就可以得到渲染列表的每一个子元素都应该需要一个唯一的key值 在这里可以使用列表的id属性作为key值以解决上面这个警告 123456789const List = () =&gt; &#123; return ( &lt;ul&gt; &#123;data.map((item) =&gt; ( &lt;ListItem name=&#123;item.name&#125; key=&#123;item.id&#125;&gt;&lt;/ListItem&gt; ))&#125; &lt;/ul&gt; );&#125;; 二、作用跟Vue一样，React 也存在diff算法，而元素key属性的作用是用于判断元素是新创建的还是被移动的元素，从而减少不必要的Diff 因此key的值需要为每一个元素赋予一个确定的标识 如果列表数据渲染中，在数据后面插入一条数据，key作用并不大，如下： 123456789101112131415161718this.state = &#123; numbers:[111,222,333]&#125;insertMovie() &#123; const newMovies = [...this.state.numbers, 444]; this.setState(&#123; movies: newMovies &#125;)&#125;&lt;ul&gt; &#123; this.state.movies.map((item, index) =&gt; &#123; return &lt;li&gt;&#123;item&#125;&lt;/li&gt; &#125;) &#125;&lt;/ul&gt; 前面的元素在diff算法中，前面的元素由于是完全相同的，并不会产生删除创建操作，在最后一个比较的时候，则需要插入到新的DOM树中 因此，在这种情况下，元素有无key属性意义并不大 下面再来看看在前面插入数据时，使用key与不使用key的区别： 123456insertMovie() &#123; const newMovies = [000 ,...this.state.numbers]; this.setState(&#123; movies: newMovies &#125;)&#125; 当拥有key的时候，react根据key属性匹配原有树上的子元素以及最新树上的子元素，像上述情况只需要将000元素插入到最前面位置 当没有key的时候，所有的li标签都需要进行修改 同样，并不是拥有key值代表性能越高，如果说只是文本内容改变了，不写key反而性能和效率更高 主要是因为不写key是将所有的文本内容替换一下，节点不会发生变化 而写key则涉及到了节点的增和删，发现旧key不存在了，则将其删除，新key在之前没有，则插入，这就增加性能的开销 三、总结良好使用key属性是性能优化的非常关键的一步，注意事项为： key 应该是唯一的 key不要使用随机值（随机数在下一次 render 时，会重新生成一个数字） 避免使用 index 作为 key react判断key的流程具体如下图： 参考文献 https://zh-hans.reactjs.org/docs/lists-and-keys.html#gatsby-focus-wrapper","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"React中组件之间通信的方式有哪些？","slug":"React.React中组件之间通信的方式有哪些？","date":"2022-08-05T02:37:09.792Z","updated":"2022-08-05T03:15:44.341Z","comments":true,"path":"2022/08/05/React.React中组件之间通信的方式有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.React%E4%B8%AD%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"React中组件之间通信的方式有哪些？ 一、是什么我们将组件间通信可以拆分为两个词： 组件 通信 回顾Vue系列的文章，组件是vue中最强大的功能之一，同样组件化是React的核心思想 相比vue，React的组件更加灵活和多样，按照不同的方式可以分成很多类型的组件 而通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的，广义上，任何信息的交通都是通信 组件间通信即指组件通过某种方式来传递信息以达到某个目的 二、如何通信组件传递的方式有很多种，根据传送者和接收者可以分为如下： 父组件向子组件传递 子组件向父组件传递 兄弟组件之间的通信 父组件向后代组件传递 非关系组件传递 父组件向子组件传递由于React的数据流动为单向的，父组件向子组件传递是最常见的方式 父组件在调用子组件的时候，只需要在子组件标签内传递参数，子组件通过props属性就能接收父组件传递过来的参数 123456789function EmailInput(props) &#123; return ( &lt;label&gt; Email: &lt;input value=&#123;props.email&#125; /&gt; &lt;/label&gt; );&#125;const element = &lt;EmailInput email=&quot;123124132@163.com&quot; /&gt;; 子组件向父组件传递子组件向父组件通信的基本思路是，父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值 父组件对应代码如下： 123456789101112131415161718192021222324class Parents extends Component &#123; constructor() &#123; super(); this.state = &#123; price: 0 &#125;; &#125; getItemPrice(e) &#123; this.setState(&#123; price: e &#125;); &#125; render() &#123; return ( &lt;div&gt; &lt;div&gt;price: &#123;this.state.price&#125;&lt;/div&gt; &#123;/* 向子组件中传入一个函数 */&#125; &lt;Child getPrice=&#123;this.getItemPrice.bind(this)&#125; /&gt; &lt;/div&gt; ); &#125;&#125; 子组件对应代码如下： 123456789101112131415class Child extends Component &#123; clickGoods(e) &#123; // 在此函数中传入值 this.props.getPrice(e); &#125; render() &#123; return ( &lt;div&gt; &lt;button onClick=&#123;this.clickGoods.bind(this, 100)&#125;&gt;goods1&lt;/button&gt; &lt;button onClick=&#123;this.clickGoods.bind(this, 1000)&#125;&gt;goods2&lt;/button&gt; &lt;/div&gt; ); &#125;&#125; 兄弟组件之间的通信如果是兄弟组件之间的传递，则父组件作为中间层来实现数据的互通，通过使用父组件传递 123456789101112131415161718192021class Parent extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123;count: 0&#125; &#125; setCount = () =&gt; &#123; this.setState(&#123;count: this.state.count + 1&#125;) &#125; render() &#123; return ( &lt;div&gt; &lt;SiblingA count=&#123;this.state.count&#125; /&gt; &lt;SiblingB onClick=&#123;this.setCount&#125; /&gt; &lt;/div&gt; ); &#125;&#125; 父组件向后代组件传递父组件向后代组件传递数据是一件最普通的事情，就像全局数据一样 使用context提供了组件之间通讯的一种方式，可以共享数据，其他数据都能读取对应的数据 通过使用React.createContext创建一个context 1const PriceContext = React.createContext(&#x27;price&#x27;) context创建成功后，其下存在Provider组件用于创建数据源，Consumer组件用于接收数据，使用实例如下： Provider组件通过value属性用于给后代组件传递数据： 12&lt;PriceContext.Provider value=&#123;100&#125;&gt;&lt;/PriceContext.Provider&gt; 如果想要获取Provider传递的数据，可以通过Consumer组件或者或者使用contextType属性接收，对应分别如下： 1234567class MyClass extends React.Component &#123; static contextType = PriceContext; render() &#123; let price = this.context; /* 基于这个值进行渲染工作 */ &#125;&#125; Consumer组件： 123456&lt;PriceContext.Consumer&gt; &#123; /*这里是一个函数*/ &#125; &#123; price =&gt; &lt;div&gt;price：&#123;price&#125;&lt;/div&gt; &#125;&lt;/PriceContext.Consumer&gt; 非关系组件传递如果组件之间关系类型比较复杂的情况，建议将数据进行一个全局资源管理，从而实现通信，例如redux。关于redux的使用后续再详细介绍 三、总结由于React是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值 因此，可以看到通信过程中，数据的存储位置都是存放在上级位置中","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"React构建组件的方式有哪些？区别？","slug":"React.React构建组件的方式有哪些？区别？","date":"2022-08-05T02:37:09.791Z","updated":"2022-08-05T03:15:26.031Z","comments":true,"path":"2022/08/05/React.React构建组件的方式有哪些？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.React%E6%9E%84%E5%BB%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"React构建组件的方式有哪些？区别？ 一、是什么组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式 在React中，一个类、一个函数都可以视为一个组件 在Vue系列中，我们了解到组件所存在的优势： 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级 二、如何构建在React目前来讲，组件的创建主要分成了三种方式： 函数式创建 通过 React.createClass 方法创建 继承 React.Component 创建 函数式创建在React Hooks出来之前，函数式组件可以视为无状态组件，只负责根据传入的props来展示视图，不涉及对state状态的操作 大多数组件可以写为无状态组件，通过简单组合构建其他组件 在React中，通过函数简单创建组件的示例如下： 123function HelloComponent(props, /* context */) &#123; return &lt;div&gt;Hello &#123;props.name&#125;&lt;/div&gt;&#125; 通过 React.createClass 方法创建React.createClass是react刚开始推荐的创建组件的方式，目前这种创建方式已经不怎么用了 像上述通过函数式创建的组件的方式，最终会通过babel转化成React.createClass这种形式，转化成如下： 12345678function HelloComponent(props) /* context */&#123; return React.createElement( &quot;div&quot;, null, &quot;Hello &quot;, props.name );&#125; 由于上述的编写方式过于冗杂，目前基本上不使用上 继承 React.Component 创建同样在react hooks出来之前，有状态的组件只能通过继承React.Component这种形式进行创建 有状态的组件也就是组件内部存在维护的数据，在类创建的方式中通过this.state进行访问 当调用this.setState修改组件的状态时，组件会再次会调用render()方法进行重新渲染 通过继承React.Component创建一个时钟示例如下： 12345678910111213141516171819202122232425262728class Timer extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; seconds: 0 &#125;; &#125; tick() &#123; this.setState(state =&gt; (&#123; seconds: state.seconds + 1 &#125;)); &#125; componentDidMount() &#123; this.interval = setInterval(() =&gt; this.tick(), 1000); &#125; componentWillUnmount() &#123; clearInterval(this.interval); &#125; render() &#123; return ( &lt;div&gt; Seconds: &#123;this.state.seconds&#125; &lt;/div&gt; ); &#125;&#125; 三、区别由于React.createClass创建的方式过于冗杂，并不建议使用 而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件： 对于一些无状态的组件创建，建议使用函数式创建的方式 由于react hooks的出现，函数式组件创建的组件通过使用hooks方法也能使之成为有状态组件，再加上目前推崇函数式编程，所以这里建议都使用函数式的方式来创建组件 在考虑组件的选择原则上，能用无状态组件则用无状态组件 参考文献 https://react.docschina.org/","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"React事件绑定的方式有哪些？区别？","slug":"React.React事件绑定的方式有哪些？区别？","date":"2022-08-05T02:37:09.789Z","updated":"2022-08-05T03:15:31.525Z","comments":true,"path":"2022/08/05/React.React事件绑定的方式有哪些？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.React%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"React事件绑定的方式有哪些？区别？ 一、是什么在react应用中，事件名都是用小驼峰格式进行书写，例如onclick要改写成onClick 最简单的事件绑定如下： 123456789class ShowAlert extends React.Component &#123; showAlert() &#123; console.log(&quot;Hi&quot;); &#125; render() &#123; return &lt;button onClick=&#123;this.showAlert&#125;&gt;show&lt;/button&gt;; &#125;&#125; 从上面可以看到，事件绑定的方法需要使用&#123;&#125;包住 上述的代码看似没有问题，但是当将处理函数输出代码换成console.log(this)的时候，点击按钮，则会发现控制台输出undefined 二、如何绑定为了解决上面正确输出this的问题，常见的绑定方式有如下： render方法中使用bind render方法中使用箭头函数 constructor中bind 定义阶段使用箭头函数绑定 render方法中使用bind如果使用一个类组件，在其中给某个组件/元素一个onClick属性，它现在并会自定绑定其this到当前组件，解决这个问题的方法是在事件函数后使用.bind(this)将this绑定到当前组件中 12345678910class App extends React.Component &#123; handleClick() &#123; console.log(&#x27;this &gt; &#x27;, this); &#125; render() &#123; return ( &lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;test&lt;/div&gt; ) &#125;&#125; 这种方式在组件每次render渲染的时候，都会重新进行bind的操作，影响性能 render方法中使用箭头函数通过ES6的上下文来将this的指向绑定给当前组件，同样在每一次render的时候都会生成新的方法，影响性能 12345678910class App extends React.Component &#123; handleClick() &#123; console.log(&#x27;this &gt; &#x27;, this); &#125; render() &#123; return ( &lt;div onClick=&#123;e =&gt; this.handleClick(e)&#125;&gt;test&lt;/div&gt; ) &#125;&#125; constructor中bind在constructor中预先bind当前组件，可以避免在render操作中重复绑定 1234567891011121314class App extends React.Component &#123; constructor(props) &#123; super(props); this.handleClick = this.handleClick.bind(this); &#125; handleClick() &#123; console.log(&#x27;this &gt; &#x27;, this); &#125; render() &#123; return ( &lt;div onClick=&#123;this.handleClick&#125;&gt;test&lt;/div&gt; ) &#125;&#125; 定义阶段使用箭头函数绑定跟上述方式三一样，能够避免在render操作中重复绑定，实现也非常的简单，如下： 12345678910111213class App extends React.Component &#123; constructor(props) &#123; super(props); &#125; handleClick = () =&gt; &#123; console.log(&#x27;this &gt; &#x27;, this); &#125; render() &#123; return ( &lt;div onClick=&#123;this.handleClick&#125;&gt;test&lt;/div&gt; ) &#125;&#125; 三、区别上述四种方法的方式，区别主要如下： 编写方面：方式一、方式二写法简单，方式三的编写过于冗杂 性能方面：方式一和方式二在每次组件render的时候都会生成新的方法实例，性能问题欠缺。若该函数作为属性值传给子组件的时候，都会导致额外的渲染。而方式三、方式四只会生成一个方法实例 综合上述，方式四是最优的事件绑定方式","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React事件机制的理解？","slug":"React.说说对React事件机制的理解？","date":"2022-08-05T02:37:09.788Z","updated":"2022-08-05T02:48:42.498Z","comments":true,"path":"2022/08/05/React.说说对React事件机制的理解？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F/","excerpt":"","text":"说说对React事件机制的理解？ 一、是什么React基于浏览器的事件机制自身实现了一套事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等 在React中这套事件机制被称之为合成事件 合成事件（SyntheticEvent）合成事件是 React模拟原生 DOM事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器 根据 W3C规范来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口，例如： 1const button = &lt;button onClick=&#123;handleClick&#125;&gt;按钮&lt;/button&gt; 如果想要获得原生DOM事件，可以通过e.nativeEvent属性获取 12const handleClick = (e) =&gt; console.log(e.nativeEvent);;const button = &lt;button onClick=&#123;handleClick&#125;&gt;按钮&lt;/button&gt; 从上面可以看到React事件和原生事件也非常的相似，但也有一定的区别： 事件名称命名方式不同 12345// 原生事件绑定方式&lt;button onclick=&quot;handleClick()&quot;&gt;按钮命名&lt;/button&gt; // React 合成事件绑定方式const button = &lt;button onClick=&#123;handleClick&#125;&gt;按钮命名&lt;/button&gt; 事件处理函数书写不同 12345// 原生事件 事件处理函数写法&lt;button onclick=&quot;handleClick()&quot;&gt;按钮命名&lt;/button&gt; // React 合成事件 事件处理函数写法const button = &lt;button onClick=&#123;handleClick&#125;&gt;按钮命名&lt;/button&gt; 虽然onclick看似绑定到DOM元素上，但实际并不会把事件代理函数直接绑定到真实的节点上，而是把所有的事件绑定到结构的最外层，使用一个统一的事件去监听 这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象 当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。这样做简化了事件处理和回收机制，效率也有很大提升 二、执行顺序关于React合成事件与原生事件执行顺序，可以看看下面一个例子： 12345678910111213141516171819202122232425262728293031323334353637import React from &#x27;react&#x27;;class App extends React.Component&#123; constructor(props) &#123; super(props); this.parentRef = React.createRef(); this.childRef = React.createRef(); &#125; componentDidMount() &#123; console.log(&quot;React componentDidMount！&quot;); this.parentRef.current?.addEventListener(&quot;click&quot;, () =&gt; &#123; console.log(&quot;原生事件：父元素 DOM 事件监听！&quot;); &#125;); this.childRef.current?.addEventListener(&quot;click&quot;, () =&gt; &#123; console.log(&quot;原生事件：子元素 DOM 事件监听！&quot;); &#125;); document.addEventListener(&quot;click&quot;, (e) =&gt; &#123; console.log(&quot;原生事件：document DOM 事件监听！&quot;); &#125;); &#125; parentClickFun = () =&gt; &#123; console.log(&quot;React 事件：父元素事件监听！&quot;); &#125;; childClickFun = () =&gt; &#123; console.log(&quot;React 事件：子元素事件监听！&quot;); &#125;; render() &#123; return ( &lt;div ref=&#123;this.parentRef&#125; onClick=&#123;this.parentClickFun&#125;&gt; &lt;div ref=&#123;this.childRef&#125; onClick=&#123;this.childClickFun&#125;&gt; 分析事件执行顺序 &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;export default App; 输出顺序为： 12345原生事件：子元素 DOM 事件监听！ 原生事件：父元素 DOM 事件监听！ React 事件：子元素事件监听！ React 事件：父元素事件监听！ 原生事件：document DOM 事件监听！ 可以得出以下结论： React 所有事件都挂载在 document 对象上 当真实 DOM 元素触发事件，会冒泡到 document 对象后，再处理 React 事件 所以会先执行原生事件，然后处理 React 事件 最后真正执行 document 上挂载的事件 对应过程如图所示： 所以想要阻止不同时间段的冒泡行为，对应使用不同的方法，对应如下： 阻止合成事件间的冒泡，用e.stopPropagation() 阻止合成事件与最外层 document 上的事件间的冒泡，用e.nativeEvent.stopImmediatePropagation() 阻止合成事件与最外层document上的原生事件上的冒泡，通过判断e.target来避免 123456document.body.addEventListener(&#x27;click&#x27;, e =&gt; &#123; if (e.target &amp;&amp; e.target.matches(&#x27;div.code&#x27;)) &#123; return; &#125; this.setState(&#123; active: false, &#125;); &#125;); &#125; 三、总结React事件机制总结如下： React 上注册的事件最终会绑定在document这个 DOM 上，而不是 React 组件对应的 DOM(减少内存开销就是因为所有的事件都绑定在 document 上，其他节点没有绑定事件) React 自身实现了一套事件冒泡机制，所以这也就是为什么我们 event.stopPropagation()无效的原因。 React 通过队列的形式，从触发的组件向父组件回溯，然后调用他们 JSX 中定义的 callback React 有一套自己的合成事件 SyntheticEvent","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说 React中的setState执行机制","slug":"React.说说 React中的setState执行机制","date":"2022-08-05T02:37:09.787Z","updated":"2022-08-05T02:47:57.288Z","comments":true,"path":"2022/08/05/React.说说 React中的setState执行机制/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%20React%E4%B8%AD%E7%9A%84setState%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/","excerpt":"","text":"说说 React中的setState执行机制 一、是什么一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state 当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用 如下例子： 1234567891011121314151617181920212223242526import React, &#123; Component &#125; from &#x27;react&#x27;export default class App extends Component &#123; constructor(props) &#123; super(props); this.state = &#123; message: &quot;Hello World&quot; &#125; &#125; render() &#123; return ( &lt;div&gt; &lt;h2&gt;&#123;this.state.message&#125;&lt;/h2&gt; &lt;button onClick=&#123;e =&gt; this.changeText()&#125;&gt;面试官系列&lt;/button&gt; &lt;/div&gt; ) &#125; changeText() &#123; this.setState(&#123; message: &quot;JS每日一题&quot; &#125;) &#125;&#125; 通过点击按钮触发onclick事件，执行this.setState方法更新state状态，然后重新执行render函数，从而导致页面的视图更新 如果直接修改state的状态，如下： 123changeText() &#123; this.state.message = &quot;JS每日一题&quot;;&#125; 我们会发现页面并不会有任何反应，但是state的状态是已经发生了改变 这是因为React并不像vue2中调用Object.defineProperty数据响应式或者Vue3调用Proxy监听数据的变化 必须通过setState方法来告知react组件state已经发生了改变 关于state方法的定义是从React.Component中继承，定义的源码如下： 12345678910Component.prototype.setState = function(partialState, callback) &#123; invariant( typeof partialState === &#x27;object&#x27; || typeof partialState === &#x27;function&#x27; || partialState == null, &#x27;setState(...): takes an object of state variables to update or a &#x27; + &#x27;function which returns an object of state variables.&#x27;, ); this.updater.enqueueSetState(this, partialState, callback, &#x27;setState&#x27;);&#125;; 从上面可以看到setState第一个参数可以是一个对象，或者是一个函数，而第二个参数是一个回调函数，用于可以实时的获取到更新之后的数据 二、更新类型在使用setState更新数据的时候，setState的更新类型分成： 异步更新 同步更新 异步更新先举出一个例子： 123456changeText() &#123; this.setState(&#123; message: &quot;你好啊&quot; &#125;) console.log(this.state.message); // Hello World&#125; 从上面可以看到，最终打印结果为Hello world，并不能在执行完setState之后立马拿到最新的state的结果 如果想要立刻获取更新后的值，在第二个参数的回调中更新后会执行 1234567changeText() &#123; this.setState(&#123; message: &quot;你好啊&quot; &#125;, () =&gt; &#123; console.log(this.state.message); // 你好啊 &#125;);&#125; 同步更新同样先给出一个在setTimeout中更新的例子： 12345678changeText() &#123; setTimeout(() =&gt; &#123; this.setState(&#123; message: &quot;你好啊 &#125;); console.log(this.state.message); // 你好啊 &#125;, 0);&#125; 上面的例子中，可以看到更新是同步 再来举一个原生DOM事件的例子： 123456789componentDidMount() &#123; const btnEl = document.getElementById(&quot;btn&quot;); btnEl.addEventListener(&#x27;click&#x27;, () =&gt; &#123; this.setState(&#123; message: &quot;你好啊&quot; &#125;); console.log(this.state.message); // 你好啊 &#125;)&#125; 小结 在组件生命周期或React合成事件中，setState是异步 在setTimeout或者原生dom事件中，setState是同步 三、批量更新同样先给出一个例子： 12345678910111213141516handleClick = () =&gt; &#123; this.setState(&#123; count: this.state.count + 1, &#125;) console.log(this.state.count) // 1 this.setState(&#123; count: this.state.count + 1, &#125;) console.log(this.state.count) // 1 this.setState(&#123; count: this.state.count + 1, &#125;) console.log(this.state.count) // 1&#125; 点击按钮触发事件，打印的都是 1，页面显示 count 的值为 2 对同一个值进行多次 setState， setState 的批量更新策略会对其进行覆盖，取最后一次的执行结果 上述的例子，实际等价于如下： 123456Object.assign( previousState, &#123;index: state.count+ 1&#125;, &#123;index: state.count+ 1&#125;, ...) 由于后面的数据会覆盖前面的更改，所以最终只加了一次 如果是下一个state依赖前一个state的话，推荐给setState一个参数传入一个function，如下： 12345678onClick = () =&gt; &#123; this.setState((prevState, props) =&gt; &#123; return &#123;count: prevState.count + 1&#125;; &#125;); this.setState((prevState, props) =&gt; &#123; return &#123;count: prevState.count + 1&#125;; &#125;);&#125; 而在setTimeout或者原生dom事件中，由于是同步的操作，所以并不会进行覆盖现象","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"super()和super(props)有什么区别？","slug":"React.super()和super(props)有什么区别？","date":"2022-08-05T02:37:09.786Z","updated":"2022-08-05T03:15:50.096Z","comments":true,"path":"2022/08/05/React.super()和super(props)有什么区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.super()%E5%92%8Csuper(props)%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"super()和super(props)有什么区别？ 一、ES6类在ES6中，通过extends关键字实现类的继承，方式如下： 12345678910111213141516171819202122232425class sup &#123; constructor(name) &#123; this.name = name &#125; printName() &#123; console.log(this.name) &#125;&#125;class sub extends sup&#123; constructor(name,age) &#123; super(name) // super代表的事父类的构造函数 this.age = age &#125; printAge() &#123; console.log(this.age) &#125;&#125;let jack = new sub(&#x27;jack&#x27;,20)jack.printName() //输出 : jackjack.printAge() //输出 : 20 在上面的例子中，可以看到通过super关键字实现调用父类，super代替的是父类的构建函数，使用super(name)相当于调用sup.prototype.constructor.call(this,name) 如果在子类中不使用super，关键字，则会引发报错，如下： 报错的原因是 子类是没有自己的this对象的，它只能继承父类的this对象，然后对其进行加工 而super()就是将父类中的this对象继承给子类的，没有super()子类就得不到this对象 如果先调用this，再初始化super()，同样是禁止的行为 123456class sub extends sup&#123; constructor(name,age) &#123; this.age = age super(name) // super代表的事父类的构造函数 &#125;&#125; 所以在子类constructor中，必须先调用super才能引用this 二、类组件在React中，类组件是基于es6的规范实现的，继承React.Component，因此如果用到constructor就必须写super()才初始化this 这时候，在调用super()的时候，我们一般都需要传入props作为参数，如果不传进去，React内部也会将其定义在组件实例中 123// React 内部const instance = new YourComponent(props);instance.props = props; 所以无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的，是可以不写的： 1234567class HelloMessage extends React.Component&#123; render ()&#123; return ( &lt;div&gt;nice to meet you! &#123;this.props.name&#125;&lt;/div&gt; ); &#125;&#125; 但是也不建议使用super()代替super(props) 因为在React会在类组件构造函数生成实例后再给this.props赋值，所以在不传递props在super的情况下，调用this.props为undefined，如下情况： 1234567class Button extends React.Component &#123; constructor(props) &#123; super(); // 没传入 props console.log(props); // &#123;&#125; console.log(this.props); // undefined // ...&#125; 而传入props的则都能正常访问，确保了 this.props 在构造函数执行完毕之前已被赋值，更符合逻辑，如下： 1234567class Button extends React.Component &#123; constructor(props) &#123; super(props); // 没传入 props console.log(props); // &#123;&#125; console.log(this.props); // &#123;&#125; // ...&#125; 三、总结在React中，类组件基于ES6，所以在constructor中必须使用super 在调用super过程，无论是否传入props，React内部都会将porps赋值给组件实例porps属性中 如果只调用了super()，那么this.props在super()和构造函数结束之间仍是undefined","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对 State 和 Props的理解，有什么区别？","slug":"React.面试官：说说对 State 和 Props的理解，有什么区别？","date":"2022-08-05T02:37:09.784Z","updated":"2022-08-05T02:43:11.879Z","comments":true,"path":"2022/08/05/React.面试官：说说对 State 和 Props的理解，有什么区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4%E5%AF%B9%20State%20%E5%92%8C%20Props%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说对 State 和 Props的理解，有什么区别？ 一、state一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state，一般在 constructor 中初始化 当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用，并且重新调用组件render方法，如下面的例子： 12345678910111213141516171819202122class Button extends React.Component &#123; constructor() &#123; super(); this.state = &#123; count: 0, &#125;; &#125; updateCount() &#123; this.setState((prevState, props) =&gt; &#123; return &#123; count: prevState.count + 1 &#125; &#125;); &#125; render() &#123; return (&lt;button onClick=&#123;() =&gt; this.updateCount()&#125; &gt; Clicked &#123;this.state.count&#125; times &lt;/button&gt;); &#125;&#125; setState还可以接受第二个参数，它是一个函数，会在setState调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成 123this.setState(&#123; name:&#x27;JS题&#x27;&#125;,()=&gt;console.log(&#x27;setState finished&#x27;)) 二、propsReact的核心思想就是组件化思想，页面会被切分成一些独立的、可复用的组件 组件从概念上看就是一个函数，可以接受一个参数作为输入值，这个参数就是props，所以可以把props理解为从外部传入组件内部的数据 react具有单向数据流的特性，所以他的主要作用是从父组件向子组件中传递数据 props除了可以传字符串，数字，还可以传递对象，数组甚至是回调函数，如下： 1234567class Welcome extends React.Component &#123; render() &#123; return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;; &#125;&#125;const element = &lt;Welcome name=&quot;Sara&quot; onNameChanged=&#123;this.handleName&#125; /&gt;; 上述name属性与onNameChanged方法都能在子组件的props变量中访问 在子组件中，props在内部不可变的，如果想要改变它看，只能通过外部组件传入新的props来重新渲染子组件，否则子组件的props和展示形式不会改变 三、区别相同点： 两者都是 JavaScript 对象 两者都是用于保存信息 props 和 state 都能触发渲染更新 区别： props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化 props 在组件内部是不可修改的，但 state 在组件内部可以进行修改 state 是多变的、可以修改","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？","slug":"React.说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？","date":"2022-08-05T02:37:09.783Z","updated":"2022-08-05T02:47:47.321Z","comments":true,"path":"2022/08/05/React.说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%20React%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E9%98%B6%E6%AE%B5%EF%BC%9F%E6%AF%8F%E4%B8%AA%E9%98%B6%E6%AE%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%EF%BC%9F/","excerpt":"","text":"说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？ 一、是什么在Vue系列中，我们了解到生命周期定义 生命周期（Life Cycle）的概念应用很广泛，特别是在经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”（Cradle-to-Grave）的整个过程 跟Vue一样，React整个组件生命周期包括从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程 二、流程这里主要讲述react16.4之后的生命周期，可以分成三个阶段： 创建阶段 更新阶段 卸载阶段 创建阶段创建阶段主要分成了以下几个生命周期方法： 构造函数（不要问我为什么用中文，因为英文会被吞掉，太难了） getDerivedStateFromProps render componentDidMount 构造函数实例过程中自动调用的方法，在方法内部通过super关键字获取来自父组件的props 在该方法中，通常的操作为初始化state状态或者在this上挂载方法 getDerivedStateFromProps该方法是新增的生命周期方法，是一个静态的方法，因此不能访问到组件的实例 执行时机：组件创建和更新阶段，不论是props变化还是state变化，也会调用 在每次render方法前调用，第一个参数为即将更新的props，第二个参数为上一个状态的state，可以比较props 和 state来加一些限制条件，防止无用的state更新 该方法需要返回一个新的对象作为新的state或者返回null表示state状态不需要更新 render类组件必须实现的方法，用于渲染DOM结构，可以访问组件state与prop属性 注意：不要在 render 里面 setState, 否则会触发死循环导致内存崩溃 componentDidMount组件挂载到真实DOM节点后执行，其在render方法之后执行 此方法多用于执行一些数据获取，事件监听等操作 更新阶段该阶段的函数主要为如下方法： getDerivedStateFromProps shouldComponentUpdate render getSnapshotBeforeUpdate componentDidUpdate getDerivedStateFromProps该方法介绍同上 shouldComponentUpdate用于告知组件本身基于当前的props和state是否需要重新渲染组件，默认情况返回true 执行时机：到新的props或者state时都会调用，通过返回true或者false告知组件更新与否 一般情况，不建议在该周期方法中进行深层比较，会影响效率 同时也不能调用setState，否则会导致无限循环调用更新 render介绍如上 getSnapshotBeforeUpdate该周期函数在render后执行，执行之时DOM元素还没有被更新 该方法返回的一个Snapshot值，作为componentDidUpdate第三个参数传入 12345678getSnapshotBeforeUpdate(prevProps, prevState) &#123; console.log(&#x27;#enter getSnapshotBeforeUpdate&#x27;); return &#x27;foo&#x27;;&#125;componentDidUpdate(prevProps, prevState, snapshot) &#123; console.log(&#x27;#enter componentDidUpdate snapshot = &#x27;, snapshot);&#125; 此方法的目的在于获取组件更新前的一些信息，比如组件的滚动位置之类的，在组件更新后可以根据这些信息恢复一些UI视觉上的状态 componentDidUpdate执行时机：组件更新结束后触发 在该方法中，可以根据前后的props和state的变化做相应的操作，如获取数据，修改DOM样式等 卸载阶段componentWillUnmount此方法用于组件卸载前，清理一些注册监听事件，或者取消订阅的网络请求等 一旦一个组件实例被卸载，其不会被再次挂载，而只可能是被重新创建 三、总结新版生命周期整体流程如下图所示： 旧的生命周期流程图如下： 通过两个图的对比，可以发现新版的生命周期减少了以下三种方法： componentWillMount componentWillReceiveProps componentWillUpdate 其实这三个方法仍然存在，只是在前者加上了UNSAFE_前缀，如UNSAFE_componentWillMount，并不像字面意思那样表示不安全，而是表示这些生命周期的代码可能在未来的 react版本可能废除 同时也新增了两个生命周期函数： getDerivedStateFromProps getSnapshotBeforeUpdate","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说 Real DOM和 Virtual DOM 的区别？优缺点？","slug":"React.说说 Real DOM和 Virtual DOM 的区别？优缺点？","date":"2022-08-05T02:37:09.781Z","updated":"2022-08-05T02:48:01.993Z","comments":true,"path":"2022/08/05/React.说说 Real DOM和 Virtual DOM 的区别？优缺点？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%20Real%20DOM%E5%92%8C%20Virtual%20DOM%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/","excerpt":"","text":"说说 Real DOM和 Virtual DOM 的区别？优缺点？ 一、是什么Real DOM，真实DOM， 意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构，如下： Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述 创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象的节点与真实DOM的属性一一照应 在React中，JSX是其一大特性，可以让你在JS中通过使用XML的方式去直接声明界面的DOM结构 123const vDom = &lt;h1&gt;Hello World&lt;/h1&gt; // 创建h1标签，右边千万不能加引号const root = document.getElementById(&#x27;root&#x27;) // 找到&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;节点ReactDOM.render(vDom, root) // 把创建的h1标签渲染到root节点上 上述中，ReactDOM.render()用于将你创建好的虚拟DOM节点插入到某个真实节点上，并渲染到页面上 JSX实际是一种语法糖，在使用过程中会被babel进行编译转化成JS代码，上述VDOM转化为如下： 12345const vDom = React.createElement( &#x27;h1&#x27;， &#123; className: &#x27;hClass&#x27;, id: &#x27;hId&#x27; &#125;, &#x27;hello world&#x27;) 可以看到，JSX就是为了简化直接调用React.createElement() 方法： 第一个参数是标签名，例如h1、span、table… 第二个参数是个对象，里面存着标签的一些属性，例如id、class等 第三个参数是节点中的文本 通过console.log(VDOM)，则能够得到虚拟VDOM消息 所以可以得到，JSX通过babel的方式转化成React.createElement执行，返回值是一个对象，也就是虚拟DOM 二、区别两者的区别如下： 虚拟DOM不会进行排版与重绘操作，而真实DOM会频繁重排与重绘 虚拟DOM的总损耗是“虚拟DOM增删改+真实DOM差异增删改+排版与重绘”，真实DOM的总损耗是“真实DOM完全增删改+排版与重绘” 拿之前文章举过的例子： 传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程 当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程 而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算 三、优缺点真实DOM的优势： 易用 缺点： 效率低，解析速度慢，内存占用量过高 性能差：频繁操作真实DOM，易于导致重绘与回流 使用虚拟DOM的优势如下： 简单方便：如果使用手动操作真实DOM来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难 性能方面：使用Virtual DOM，能够有效避免真实DOM数频繁更新，减少多次引起重绘与回流，提高性能 跨平台：React借助虚拟DOM， 带来了跨平台的能力，一套代码多端运行 缺点： 在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化 首次渲染大量DOM时，由于多了一层虚拟DOM的计算，速度比正常稍慢","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说对React的理解？有哪些特性？","slug":"React.说说对React的理解？有哪些特性？","date":"2022-08-05T02:37:09.779Z","updated":"2022-08-05T02:48:36.408Z","comments":true,"path":"2022/08/05/React.说说对React的理解？有哪些特性？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/React.%E8%AF%B4%E8%AF%B4%E5%AF%B9React%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7%EF%BC%9F/","excerpt":"","text":"说说对React的理解？有哪些特性？ 一、是什么React，用于构建用户界面的 JavaScript 库，提供了 UI 层面的解决方案 遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效 使用虚拟DOM来有效地操作DOM，遵循从高阶组件到低阶组件的单向数据流 帮助我们将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面 react 类组件使用一个名为 render() 的方法或者函数组件return，接收输入的数据并返回需要展示的内容 1234567891011121314class HelloMessage extends React.Component &#123; render() &#123; return ( &lt;div&gt; Hello &#123;this.props.name&#125; &lt;/div&gt; ); &#125;&#125;ReactDOM.render( &lt;HelloMessage name=&quot;Taylor&quot; /&gt;, document.getElementById(&#x27;hello-example&#x27;)); 上述这种类似 XML形式就是JSX，最终会被babel编译为合法的JS语句调用 被传入的数据可在组件中通过 this.props 在 render() 访问 二、特性React特性有很多，如： JSX语法 单向数据绑定 虚拟DOM 声明式编程 Component 着重介绍下声明式编程及Component 声明式编程声明式编程是一种编程范式，它关注的是你要做什么，而不是如何做 它表达逻辑而不显式地定义步骤。这意味着我们需要根据逻辑的计算来声明要显示的组件 如实现一个标记的地图： 通过命令式创建地图、创建标记、以及在地图上添加的标记的步骤如下： 1234567891011121314// 创建地图const map = new Map.map(document.getElementById(&#x27;map&#x27;), &#123; zoom: 4, center: &#123;lat,lng&#125;&#125;);// 创建标记const marker = new Map.marker(&#123; position: &#123;lat, lng&#125;, title: &#x27;Hello Marker&#x27;&#125;);// 地图上添加标记marker.setMap(map); 而用React实现上述功能则如下： 123&lt;Map zoom=&#123;4&#125; center=&#123;lat, lng&#125;&gt; &lt;Marker position=&#123;lat, lng&#125; title=&#123;&#x27;Hello Marker&#x27;&#125;/&gt;&lt;/Map&gt; 声明式编程方式使得React组件很容易使用，最终的代码简单易于维护 Component在React 中，一切皆为组件。通常将应用程序的整个逻辑分解为小的单个部分。我们将每个单独的部分称为组件 组件可以是一个函数或者是一个类，接受数据输入，处理它并返回在UI中呈现的React元素 函数式组件如下： 1234567const Header = () =&gt; &#123; return( &lt;Jumbotron style=&#123;&#123;backgroundColor:&#x27;orange&#x27;&#125;&#125;&gt; &lt;h1&gt;TODO App&lt;/h1&gt; &lt;/Jumbotron&gt; )&#125; 类组件（有状态组件）如下： 1234567891011121314151617class Dashboard extends React.Component &#123; constructor(props)&#123; super(props); this.state = &#123; &#125; &#125; render() &#123; return ( &lt;div className=&quot;dashboard&quot;&gt; &lt;ToDoForm /&gt; &lt;ToDolist /&gt; &lt;/div&gt; ); &#125;&#125; 一个组件该有的特点如下： 可组合：个组件易于和其它组件一起使用，或者嵌套在另一个组件内部 可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景 可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护 三、优势通过上面的初步了解，可以感受到React存在的优势： 高效灵活 声明式的设计，简单使用 组件式开发，提高代码复用率 单向响应的数据流会比双向绑定的更安全，速度更快","categories":[{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"}],"tags":[]},{"title":"说说你对BOM的理解，常见的BOM对象你了解哪些？","slug":"js.说说你对BOM的理解，常见的BOM对象你了解哪些？","date":"2022-08-05T01:58:06.522Z","updated":"2022-08-05T02:12:04.141Z","comments":true,"path":"2022/08/05/js.说说你对BOM的理解，常见的BOM对象你了解哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9BOM%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84BOM%E5%AF%B9%E8%B1%A1%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对BOM的理解，常见的BOM对象你了解哪些？ 一、是什么BOM (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象 其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率 浏览器的全部内容可以看成DOM，整个浏览器可以看成BOM。区别如下： 二、windowBom的核心对象是window，它表示浏览器的一个实例 在浏览器中，window对象有双重角色，即是浏览器窗口的一个接口，又是全局对象 因此所有在全局作用域中声明的变量、函数都会变成window对象的属性和方法 12345678var name = &#x27;js每日一题&#x27;;function lookName()&#123; alert(this.name);&#125;console.log(window.name); //js每日一题lookName(); //js每日一题window.lookName(); //js每日一题 关于窗口控制方法如下： moveBy(x,y)：从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，将向上移动窗体 moveTo(x,y)：移动窗体左上角到相对于屏幕左上角的(x,y)点 resizeBy(w,h)：相对窗体当前的大小，宽度调整w个像素，高度调整h个像素。如果参数为负值，将缩小窗体，反之扩大窗体 resizeTo(w,h)：把窗体宽度调整为w个像素，高度调整为h个像素 scrollTo(x,y)：如果有滚动条，将横向滚动条移动到相对于窗体宽度为x个像素的位置，将纵向滚动条移动到相对于窗体高度为y个像素的位置 scrollBy(x,y)：如果有滚动条，将横向滚动条向左移动x个像素，将纵向滚动条向下移动y个像素 window.open() 既可以导航到一个特定的url，也可以打开一个新的浏览器窗口 如果 window.open() 传递了第二个参数，且该参数是已有窗口或者框架的名称，那么就会在目标窗口加载第一个参数指定的URL 12window.open(&#x27;htttp://www.vue3js.cn&#x27;,&#x27;topFrame&#x27;)==&gt; &lt;a href=&quot;http://www.vue3js.cn&quot; target=&quot;topFrame&quot;&gt;&lt;/a&gt; window.open() 会返回新窗口的引用，也就是新窗口的 window 对象 1const myWin = window.open(&#x27;http://www.vue3js.cn&#x27;,&#x27;myWin&#x27;) window.close() 仅用于通过 window.open() 打开的窗口 新创建的 window 对象有一个 opener 属性，该属性指向打开他的原始窗口对象 三、locationurl地址如下： 1http://foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents location属性描述如下： 属性名 例子 说明 hash “#contents” utl中#后面的字符，没有则返回空串 host www.wrox.com:80 服务器名称和端口号 hostname www.wrox.com 域名，不带端口号 href http://www.wrox.com:80/WileyCDA/?q=javascript#contents 完整url pathname “/WileyCDA/“ 服务器下面的文件路径 port 80 url的端口号，没有则为空 protocol http: 使用的协议 search ?q=javascript url的查询字符串，通常为？后面的内容 除了 hash之外，只要修改location的一个属性，就会导致页面重新加载新URL location.reload()，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载 如果要强制从服务器中重新加载，传递一个参数true即可 四、navigatornavigator 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂 下表列出了navigator对象接口定义的属性和方法： 五、screen保存的纯粹是客户端能力信息，也就是浏览器窗口外面的客户端显示器的信息，比如像素宽度和像素高度 六、historyhistory对象主要用来操作浏览器URL的历史记录，可以通过参数向前，向后，或者向指定URL跳转 常用的属性如下： history.go() 接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转， 1history.go(&#x27;maixaofei.com&#x27;) 当参数为整数数字的时候，正数表示向前跳转指定的页面，负数为向后跳转指定的页面 12history.go(3) //向前跳转三个记录history.go(-1) //向后跳转一个记录 history.forward()：向前跳转一个页面 history.back()：向后跳转一个页面 history.length：获取历史记录数","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对DOM的理解，常见的操作有哪些？","slug":"js. 说说你对DOM的理解，常见的操作有哪些？","date":"2022-08-05T01:58:06.499Z","updated":"2022-08-05T02:06:31.784Z","comments":true,"path":"2022/08/05/js. 说说你对DOM的理解，常见的操作有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%20%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9DOM%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对DOM的理解，常见的操作有哪些？ 一、DOM文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口 它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容 任何 HTML或XML文档都可以用 DOM表示为一个由节点构成的层级结构 节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示： 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello World!&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; DOM像原子包含着亚原子微粒那样，也有很多类型的DOM节点包含着其他类型的节点。接下来我们先看看其中的三种： 12345&lt;div&gt; &lt;p title=&quot;title&quot;&gt; content &lt;/p&gt;&lt;/div&gt; 上述结构中，div、p就是元素节点，content就是文本节点，title就是属性节点 二、操作日常前端开发，我们都离不开DOM操作 在以前，我们使用Jquery，zepto等库来操作DOM，之后在vue，Angular，React等框架出现后，我们通过操作数据来控制DOM（绝大多数时候），越来越少的去直接操作DOM 但这并不代表原生操作不重要。相反，DOM操作才能有助于我们理解框架深层的内容 下面就来分析DOM常见的操作，主要分为： 创建节点 查询节点 更新节点 添加节点 删除节点 创建节点createElement创建新元素，接受一个参数，即要创建元素的标签名 1const divEl = document.createElement(&quot;div&quot;); createTextNode创建一个文本节点 1const textEl = document.createTextNode(&quot;content&quot;); createDocumentFragment用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到DOM中 1const fragment = document.createDocumentFragment(); 当请求把一个DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment自身，而是它的所有子孙节点 createAttribute创建属性节点，可以是自定义属性 12const dataAttribute = document.createAttribute(&#x27;custom&#x27;);consle.log(dataAttribute); 获取节点querySelector传入任何有效的css 选择器，即可选中单个 DOM元素（首个）： 12345document.querySelector(&#x27;.element&#x27;)document.querySelector(&#x27;#element&#x27;)document.querySelector(&#x27;div&#x27;)document.querySelector(&#x27;[name=&quot;username&quot;]&#x27;)document.querySelector(&#x27;div + p &gt; span&#x27;) 如果页面上没有指定的元素时，返回 null querySelectorAll返回一个包含节点子树内所有与之相匹配的Element节点列表，如果没有相匹配的，则返回一个空节点列表 1const notLive = document.querySelectorAll(&quot;p&quot;); 需要注意的是，该方法返回的是一个 NodeList的静态实例，它是一个静态的“快照”，而非“实时”的查询 关于获取DOM元素的方法还有如下，就不一一述说 123456789document.getElementById(&#x27;id属性值&#x27;);返回拥有指定id的对象的引用document.getElementsByClassName(&#x27;class属性值&#x27;);返回拥有指定class的对象集合document.getElementsByTagName(&#x27;标签名&#x27;);返回拥有指定标签名的对象集合document.getElementsByName(&#x27;name属性值&#x27;); 返回拥有指定名称的对象结合document/element.querySelector(&#x27;CSS选择器&#x27;); 仅返回第一个匹配的元素document/element.querySelectorAll(&#x27;CSS选择器&#x27;); 返回所有匹配的元素document.documentElement; 获取页面中的HTML标签document.body; 获取页面中的BODY标签document.all[&#x27;&#x27;]; 获取页面中的所有元素节点的对象集合型 除此之外，每个DOM元素还有parentNode、childNodes、firstChild、lastChild、nextSibling、previousSibling属性，关系图如下图所示 更新节点innerHTML不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树 1234567// 获取&lt;p id=&quot;p&quot;&gt;...&lt;/p&gt;var p = document.getElementById(&#x27;p&#x27;);// 设置文本为abc:p.innerHTML = &#x27;ABC&#x27;; // &lt;p id=&quot;p&quot;&gt;ABC&lt;/p&gt;// 设置HTML:p.innerHTML = &#x27;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#x27;;// &lt;p&gt;...&lt;/p&gt;的内部结构已修改 innerText、textContent自动对字符串进行HTML编码，保证无法设置任何HTML标签 123456// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;var p = document.getElementById(&#x27;p-id&#x27;);// 设置文本:p.innerText = &#x27;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#x27;;// HTML被自动编码，无法设置一个&lt;script&gt;节点:// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p&gt; 两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本 styleDOM节点的style属性对应所有的CSS，可以直接获取或设置。遇到-需要转化为驼峰命名 123456// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;const p = document.getElementById(&#x27;p-id&#x27;);// 设置CSS:p.style.color = &#x27;#ff0000&#x27;;p.style.fontSize = &#x27;20px&#x27;; // 驼峰命名p.style.paddingTop = &#x27;2em&#x27;; 添加节点innerHTML如果这个DOM节点是空的，例如，&lt;div&gt;&lt;/div&gt;，那么，直接使用innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;就可以修改DOM节点的内容，相当于添加了新的DOM节点 如果这个DOM节点不是空的，那就不能这么做，因为innerHTML会直接替换掉原来的所有子节点 appendChild把一个子节点添加到父节点的最后一个子节点 举个例子 1234567&lt;!-- HTML结构 --&gt;&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p&gt;&lt;div id=&quot;list&quot;&gt; &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt; &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt; &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt;&lt;/div&gt; 添加一个p元素 1234const js = document.getElementById(&#x27;js&#x27;)js.innerHTML = &quot;JavaScript&quot;const list = document.getElementById(&#x27;list&#x27;);list.appendChild(js); 现在HTML结构变成了下面 1234567&lt;!-- HTML结构 --&gt;&lt;div id=&quot;list&quot;&gt; &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt; &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt; &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt; &lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p&gt; &lt;!-- 添加元素 --&gt;&lt;/div&gt; 上述代码中，我们是获取DOM元素后再进行添加操作，这个js节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置 如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置 12345const list = document.getElementById(&#x27;list&#x27;),const haskell = document.createElement(&#x27;p&#x27;);haskell.id = &#x27;haskell&#x27;;haskell.innerText = &#x27;Haskell&#x27;;list.appendChild(haskell); insertBefore把子节点插入到指定的位置，使用方法如下： 1parentElement.insertBefore(newElement, referenceElement) 子节点会插入到referenceElement之前 setAttribute在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值 12const div = document.getElementById(&#x27;id&#x27;)div.setAttribute(&#x27;class&#x27;, &#x27;white&#x27;);//第一个参数属性名，第二个参数属性值。 删除节点删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉 1234567// 拿到待删除节点:const self = document.getElementById(&#x27;to-be-removed&#x27;);// 拿到父节点:const parent = self.parentElement;// 删除:const removed = parent.removeChild(self);removed === self; // true 删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置 相关链接https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对函数式编程的理解？优缺点？","slug":"js.说说你对正则表达式的理解？应用场景？","date":"2022-08-05T01:58:06.470Z","updated":"2022-08-05T02:11:26.891Z","comments":true,"path":"2022/08/05/js.说说你对正则表达式的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对正则表达式的理解？应用场景？ 一、是什么正则表达式是一种用来匹配字符串的强有力的武器 它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的 在 JavaScript中，正则表达式也是对象，构建正则表达式有两种方式： 字面量创建，其由包含在斜杠之间的模式组成 1const re = /\\d+/g; 调用RegExp对象的构造函数 1234const re = new RegExp(&quot;\\\\d+&quot;,&quot;g&quot;);const rul = &quot;\\\\d+&quot;const re1 = new RegExp(rul,&quot;g&quot;); 使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符\\需要使用\\\\进行转义 二、匹配规则常见的校验规则如下： 规则 描述 \\ 转义 ^ 匹配输入的开始 $ 匹配输入的结束 * 匹配前一个表达式 0 次或多次 + 匹配前面一个表达式 1 次或者多次。等价于 &#123;1,&#125; ? 匹配前面一个表达式 0 次或者 1 次。等价于&#123;0,1&#125; . 默认匹配除换行符之外的任何单个字符 x(?=y) 匹配’x’仅仅当’x’后面跟着’y’。这种叫做先行断言 (?&lt;=y)x 匹配’x’仅当’x’前面是’y’.这种叫做后行断言 x(?!y) 仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找 (?&lt;!y)x 仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找 x|y 匹配‘x’或者‘y’ {n} n 是一个正整数，匹配了前面一个字符刚好出现了 n 次 {n,} n是一个正整数，匹配前一个字符至少出现了n次 {n,m} n 和 m 都是整数。匹配前面的字符至少n次，最多m次 [xyz] 一个字符集合。匹配方括号中的任意字符 [^xyz] 匹配任何没有包含在方括号中的字符 \\b 匹配一个词的边界，例如在字母和空格之间 \\B 匹配一个非单词边界 \\d 匹配一个数字 \\D 匹配一个非数字字符 \\f 匹配一个换页符 \\n 匹配一个换行符 \\r 匹配一个回车符 \\s 匹配一个空白字符，包括空格、制表符、换页符和换行符 \\S 匹配一个非空白字符 \\w 匹配一个单字字符（字母、数字或者下划线） \\W 匹配一个非单字字符 正则表达式标记 标志 描述 g 全局搜索。 i 不区分大小写搜索。 m 多行搜索。 s 允许 . 匹配换行符。 u 使用unicode码的模式进行匹配。 y 执行“粘性(sticky)”搜索,匹配从目标字符串的当前位置开始。 使用方法如下： 12var re = /pattern/flags;var re = new RegExp(&quot;pattern&quot;, &quot;flags&quot;); 在了解下正则表达式基本的之外，还可以掌握几个正则表达式的特性： 贪婪模式在了解贪婪模式前，首先举个例子： 1const reg = /ab&#123;1,3&#125;c/ 在匹配过程中，尝试可能的顺序是从多往少的方向去尝试。首先会尝试bbb，然后再看整个正则是否能匹配。不能匹配时，吐出一个b，即在bb的基础上，再继续尝试，以此重复 如果多个贪婪量词挨着，则深度优先搜索 1234const string = &quot;12345&quot;;const regx = /(\\d&#123;1,3&#125;)(\\d&#123;1,3&#125;)/;console.log( string.match(reg) );// =&gt; [&quot;12345&quot;, &quot;123&quot;, &quot;45&quot;, index: 0, input: &quot;12345&quot;] 其中，前面的\\d&#123;1,3&#125;匹配的是”123”，后面的\\d&#123;1,3&#125;匹配的是”45” 懒惰模式惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配 1234var string = &quot;12345&quot;;var regex = /(\\d&#123;1,3&#125;?)(\\d&#123;1,3&#125;)/;console.log( string.match(regex) );// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;] 其中\\d&#123;1,3&#125;?只匹配到一个字符”1”，而后面的\\d&#123;1,3&#125;匹配了”234” 分组分组主要是用过()进行实现，比如beyond&#123;3&#125;，是匹配d字母3次。而(beyond)&#123;3&#125;是匹配beyond三次 在()内使用|达到或的效果，如(abc | xxx)可以匹配abc或者xxx 反向引用，巧用$分组捕获 1234let str = &quot;John Smith&quot;;// 交换名字和姓氏console.log(str.replace(/(john) (smith)/i, &#x27;$2, $1&#x27;)) // Smith, John 三、匹配方法正则表达式常被用于某些方法，我们可以分成两类： 字符串（str）方法：match、matchAll、search、replace、split 正则对象下（regexp）的方法：test、exec 方法 描述 exec 一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。 test 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。 match 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。 matchAll 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。 search 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。 replace 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。 split 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。 str.match(regexp)str.match(regexp) 方法在字符串 str 中找到匹配 regexp 的字符 如果 regexp 不带有 g 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 index（匹配项的位置）、input（输入字符串，等于 str） 1234567891011let str = &quot;I love JavaScript&quot;;let result = str.match(/Java(Script)/);console.log( result[0] ); // JavaScript（完全匹配）console.log( result[1] ); // Script（第一个分组）console.log( result.length ); // 2// 其他信息：console.log( result.index ); // 7（匹配位置）console.log( result.input ); // I love JavaScript（源字符串） 如果 regexp 带有 g 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息 123456let str = &quot;I love JavaScript&quot;;let result = str.match(/Java(Script)/g);console.log( result[0] ); // JavaScriptconsole.log( result.length ); // 1 如果没有匹配项，则无论是否带有标记 g ，都将返回 null 12345let str = &quot;I love JavaScript&quot;;let result = str.match(/HTML/);console.log(result); // null str.matchAll(regexp)返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器 12345678910const regexp = /t(e)(st(\\d?))/g;const str = &#x27;test1test2&#x27;;const array = [...str.matchAll(regexp)];console.log(array[0]);// expected output: Array [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]console.log(array[1]);// expected output: Array [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;] str.search(regexp)返回第一个匹配项的位置，如果未找到，则返回 -1 123let str = &quot;A drop of ink may make a million think&quot;;console.log( str.search( /ink/i ) ); // 10（第一个匹配位置） 这里需要注意的是，search 仅查找第一个匹配项 str.replace(regexp)替换与正则表达式匹配的子串，并返回替换后的字符串。在不设置全局匹配g的时候，只替换第一个匹配成功的字符串片段 123456const reg1=/javascript/i;const reg2=/javascript/ig;console.log(&#x27;hello Javascript Javascript Javascript&#x27;.replace(reg1,&#x27;js&#x27;));//hello js Javascript Javascriptconsole.log(&#x27;hello Javascript Javascript Javascript&#x27;.replace(reg2,&#x27;js&#x27;));//hello js js js str.split(regexp)使用正则表达式（或子字符串）作为分隔符来分割字符串 1console.log(&#x27;12, 34, 56&#x27;.split(/,\\s*/)) // 数组 [&#x27;12&#x27;, &#x27;34&#x27;, &#x27;56&#x27;] regexp.exec(str)regexp.exec(str) 方法返回字符串 str 中的 regexp 匹配项，与以前的方法不同，它是在正则表达式而不是字符串上调用的 根据正则表达式是否带有标志 g，它的行为有所不同 如果没有 g，那么 regexp.exec(str) 返回的第一个匹配与 str.match(regexp) 完全相同 如果有标记 g，调用 regexp.exec(str) 会返回第一个匹配项，并将紧随其后的位置保存在属性regexp.lastIndex 中。下一次同样的调用会从位置 regexp.lastIndex 开始搜索，返回下一个匹配项，并将其后的位置保存在 regexp.lastIndex 中 12345678910let str = &#x27;More about JavaScript at https://javascript.info&#x27;;let regexp = /javascript/ig;let result;while (result = regexp.exec(str)) &#123; console.log( `Found $&#123;result[0]&#125; at position $&#123;result.index&#125;` ); // Found JavaScript at position 11 // Found javascript at position 33&#125; regexp.test(str)查找匹配项，然后返回 true/false 表示是否存在 1234let str = &quot;I love JavaScript&quot;;// 这两个测试相同console.log( /love/i.test(str) ); // true 四、应用场景通过上面的学习，我们对正则表达式有了一定的了解 下面再来看看正则表达式一些案例场景： 验证QQ合法性（5~15位、全是数字、不以0开头）： 12const reg = /^[1-9][0-9]&#123;4,14&#125;$/const isvalid = patrn.exec(s) 校验用户账号合法性（只能输入5-20个以字母开头、可带数字、“_”、“.”的字串）： 12var patrn=/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/;const isvalid = patrn.exec(s) 将url参数解析为对象 1234567891011121314151617181920212223242526const protocol = &#x27;(?&lt;protocol&gt;https?:)&#x27;;const host = &#x27;(?&lt;host&gt;(?&lt;hostname&gt;[^/#?:]+)(?::(?&lt;port&gt;\\\\d+))?)&#x27;;const path = &#x27;(?&lt;pathname&gt;(?:\\\\/[^/#?]+)*\\\\/?)&#x27;;const search = &#x27;(?&lt;search&gt;(?:\\\\?[^#]*)?)&#x27;;const hash = &#x27;(?&lt;hash&gt;(?:#.*)?)&#x27;;const reg = new RegExp(`^$&#123;protocol&#125;\\/\\/$&#123;host&#125;$&#123;path&#125;$&#123;search&#125;$&#123;hash&#125;$`);function execURL(url)&#123; const result = reg.exec(url); if(result)&#123; result.groups.port = result.groups.port || &#x27;&#x27;; return result.groups; &#125; return &#123; protocol:&#x27;&#x27;,host:&#x27;&#x27;,hostname:&#x27;&#x27;,port:&#x27;&#x27;, pathname:&#x27;&#x27;,search:&#x27;&#x27;,hash:&#x27;&#x27;, &#125;;&#125;console.log(execURL(&#x27;https://localhost:8080/?a=b#xxxx&#x27;));protocol: &quot;https:&quot;host: &quot;localhost:8080&quot;hostname: &quot;localhost&quot;port: &quot;8080&quot;pathname: &quot;/&quot;search: &quot;?a=b&quot;hash: &quot;#xxxx&quot; 再将上面的search和hash进行解析 123456789101112131415161718function execUrlParams(str)&#123; str = str.replace(/^[#?&amp;]/,&#x27;&#x27;); const result = &#123;&#125;; if(!str)&#123; //如果正则可能配到空字符串，极有可能造成死循环，判断很重要 return result; &#125; const reg = /(?:^|&amp;)([^&amp;=]*)=?([^&amp;]*?)(?=&amp;|$)/y let exec = reg.exec(str); while(exec)&#123; result[exec[1]] = exec[2]; exec = reg.exec(str); &#125; return result;&#125;console.log(execUrlParams(&#x27;#&#x27;));// &#123;&#125;console.log(execUrlParams(&#x27;##&#x27;));//&#123;&#x27;#&#x27;:&#x27;&#x27;&#125;console.log(execUrlParams(&#x27;?q=3606&amp;src=srp&#x27;)); //&#123;q: &quot;3606&quot;, src: &quot;srp&quot;&#125;console.log(execUrlParams(&#x27;test=a=b=c&amp;&amp;==&amp;a=&#x27;));//&#123;test: &quot;a=b=c&quot;, &quot;&quot;: &quot;=&quot;, a: &quot;&quot;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对JavaScript中事件循环的理解","slug":"js.说说你对JavaScript中事件循环的理解​","date":"2022-08-05T01:58:06.440Z","updated":"2022-08-05T02:12:09.114Z","comments":true,"path":"2022/08/05/js.说说你对JavaScript中事件循环的理解​/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9JavaScript%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9A%84%E7%90%86%E8%A7%A3%E2%80%8B/","excerpt":"","text":"说说你对JavaScript中事件循环的理解 一、是什么JavaScript 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一时间只能做一件事 为什么要这么设计，跟JavaScript的应用场景有关 JavaScript 初期作为一门浏览器脚本语言，通常用于操作 DOM ，如果是多线程，一个线程进行了删除 DOM ，另一个添加 DOM，此时浏览器该如何处理？ 为了解决单线程运行阻塞问题，JavaScript用到了计算机系统的一种运行机制，这种机制就叫做事件循环（Event Loop） 事件循环（Event Loop）在JavaScript中，所有的任务都可以分为 同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行 异步任务：异步执行的任务，比如ajax网络请求，setTimeout定时函数等 同步任务与异步任务的运行流程图如下： 从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就是事件循环 二、宏任务与微任务如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子： 1234567891011121314console.log(1)setTimeout(()=&gt;&#123; console.log(2)&#125;, 0)new Promise((resolve, reject)=&gt;&#123; console.log(&#x27;new Promise&#x27;) resolve()&#125;).then(()=&gt;&#123; console.log(&#x27;then&#x27;)&#125;)console.log(3) 如果按照上面流程图来分析代码，我们会得到下面的执行步骤： console.log(1)，同步任务，主线程中执行 setTimeout() ，异步任务，放到 Event Table，0 毫秒后console.log(2)回调推入 Event Queue 中 new Promise ，同步任务，主线程直接执行 .then ，异步任务，放到 Event Table console.log(3)，同步任务，主线程执行 所以按照分析，它的结果应该是 1 =&gt; &#39;new Promise&#39; =&gt; 3 =&gt; 2 =&gt; &#39;then&#39; 但是实际结果是：1=&gt;&#39;new Promise&#39;=&gt; 3 =&gt; &#39;then&#39; =&gt; 2 出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取 例子中 setTimeout回调事件是先进入队列中的，按理说应该先于 .then 中的执行，但是结果却偏偏相反 原因在于异步任务还可以细分为微任务与宏任务 微任务一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前 常见的微任务有： Promise.then MutaionObserver Object.observe（已废弃；Proxy 对象替代） process.nextTick（Node.js） 宏任务宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合 常见的宏任务有： script (可以理解为外层同步代码) setTimeout/setInterval UI rendering/UI事件 postMessage、MessageChannel setImmediate、I/O（Node.js） 这时候，事件循环，宏任务，微任务的关系如图所示 按照这个流程，它的执行机制是： 执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中 当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完 回到上面的题目 1234567891011console.log(1)setTimeout(()=&gt;&#123; console.log(2)&#125;, 0)new Promise((resolve, reject)=&gt;&#123; console.log(&#x27;new Promise&#x27;) resolve()&#125;).then(()=&gt;&#123; console.log(&#x27;then&#x27;)&#125;)console.log(3) 流程如下 1234567// 遇到 console.log(1) ，直接打印 1// 遇到定时器，属于新的宏任务，留着后面执行// 遇到 new Promise，这个是直接执行的，打印 &#x27;new Promise&#x27;// .then 属于微任务，放入微任务队列，后面再执行// 遇到 console.log(3) 直接打印 3// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 &#x27;then&#x27;// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2 三、async与awaitasync 是异步的意思，await则可以理解为等待 放到一起可以理解async就是用来声明一个异步方法，而 await是用来等待异步方法执行 asyncasync函数返回一个promise对象，下面两种方法是等效的 12345678function f() &#123; return Promise.resolve(&#x27;TEST&#x27;);&#125;// asyncF is equivalent to f!async function asyncF() &#123; return &#x27;TEST&#x27;;&#125; await正常情况下，await命令后面是一个 Promise对象，返回该对象的结果。如果不是 Promise对象，就直接返回对应的值 123456async function f()&#123; // 等同于 // return 123 return await 123&#125;f().then(v =&gt; console.log(v)) // 123 不管await后面跟着的是什么，await都会阻塞后面的代码 123456789101112async function fn1 ()&#123; console.log(1) await fn2() console.log(2) // 阻塞&#125;async function fn2 ()&#123; console.log(&#x27;fn2&#x27;)&#125;fn1()console.log(3) 上面的例子中，await 会阻塞下面的代码（即加入微任务队列），先执行 async外面的同步代码，同步代码执行完，再回到 async 函数中，再执行之前阻塞的代码 所以上述输出结果为：1，fn2，3，2 四、流程分析通过对上面的了解，我们对JavaScript对各种场景的执行顺序有了大致的了解 这里直接上代码： 1234567891011121314151617181920async function async1() &#123; console.log(&#x27;async1 start&#x27;) await async2() console.log(&#x27;async1 end&#x27;)&#125;async function async2() &#123; console.log(&#x27;async2&#x27;)&#125;console.log(&#x27;script start&#x27;)setTimeout(function () &#123; console.log(&#x27;settimeout&#x27;)&#125;)async1()new Promise(function (resolve) &#123; console.log(&#x27;promise1&#x27;) resolve()&#125;).then(function () &#123; console.log(&#x27;promise2&#x27;)&#125;)console.log(&#x27;script end&#x27;) 分析过程： 执行整段代码，遇到 console.log(&#39;script start&#39;) 直接打印结果，输出 script start 遇到定时器了，它是宏任务，先放着不执行 遇到 async1()，执行 async1 函数，先打印 async1 start，下面遇到await怎么办？先执行 async2，打印 async2，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码 跳到 new Promise 这里，直接执行，打印 promise1，下面遇到 .then()，它是微任务，放到微任务列表等待执行 最后一行直接打印 script end，现在同步代码执行完了，开始执行微任务，即 await下面的代码，打印 async1 end 继续执行下一个微任务，即执行 then 的回调，打印 promise2 上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 settimeout 所以最后的结果是：script start、async1 start、async2、promise1、script end、async1 end、promise2、settimeout","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"bind、call、apply 区别？如何实现一个bind?","slug":"js.bind、call、apply 区别？如何实现一个bind_","date":"2022-08-05T01:58:06.413Z","updated":"2022-08-05T02:18:04.997Z","comments":true,"path":"2022/08/05/js.bind、call、apply 区别？如何实现一个bind_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.bind%E3%80%81call%E3%80%81apply%20%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAbind_/","excerpt":"","text":"bind、call、apply 区别？如何实现一个bind? 一、作用call、apply、bind作用是改变函数执行时的上下文，简而言之就是改变函数运行时的this指向 那么什么情况下需要改变this的指向呢？下面举个例子 123456789var name=&quot;lucy&quot;;const obj=&#123; name:&quot;martin&quot;, say:function () &#123; console.log(this.name); &#125;&#125;;obj.say(); //martin，this指向obj对象setTimeout(obj.say,0); //lucy，this指向window对象 从上面可以看到，正常情况say方法输出martin 但是我们把say放在setTimeout方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候this指向window，所以输出luck 我们实际需要的是this指向obj对象，这时候就需要该改变this指向了 1setTimeout(obj.say.bind(obj),0); //martin，this指向obj对象 二、区别下面再来看看apply、call、bind的使用 applyapply接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入 改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次 123456789function fn(...args)&#123; console.log(this,args);&#125;let obj = &#123; myname:&quot;张三&quot;&#125;fn.apply(obj,[1,2]); // this会变成传入的obj，传入的参数必须是一个数组；fn(1,2) // this指向window 当第一个参数为null、undefined的时候，默认指向window(在浏览器中) 12fn.apply(null,[1,2]); // this指向windowfn.apply(undefined,[1,2]); // this指向window callcall方法的第一个参数也是this的指向，后面传入的是一个参数列表 跟apply一样，改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次 123456789function fn(...args)&#123; console.log(this,args);&#125;let obj = &#123; myname:&quot;张三&quot;&#125;fn.call(obj,1,2); // this会变成传入的obj，传入的参数必须是一个数组；fn(1,2) // this指向window 同样的，当第一个参数为null、undefined的时候，默认指向window(在浏览器中) 12fn.call(null,[1,2]); // this指向windowfn.call(undefined,[1,2]); // this指向window bindbind方法和call很相似，第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入) 改变this指向后不会立即执行，而是返回一个永久改变this指向的函数 12345678910function fn(...args)&#123; console.log(this,args);&#125;let obj = &#123; myname:&quot;张三&quot;&#125;const bindFn = fn.bind(obj); // this 也会变成传入的obj ，bind不是立即执行需要执行一次bindFn(1,2) // this指向objfn(1,2) // this指向window 小结从上面可以看到，apply、call、bind三者的区别在于： 三者都可以改变函数的this对象指向 三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window 三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入 bind是返回绑定this之后的函数，apply、call 则是立即执行 三、实现实现bind的步骤，我们可以分解成为三部分： 修改this指向 动态传递参数 12345// 方式一：只在bind中传递函数参数fn.bind(obj,1,2)()// 方式二：在bind中传递函数参数，也在返回函数中传递参数fn.bind(obj,1)(2) 兼容new关键字 整体实现代码如下： 12345678910111213141516Function.prototype.myBind = function (context) &#123; // 判断调用对象是否为函数 if (typeof this !== &quot;function&quot;) &#123; throw new TypeError(&quot;Error&quot;); &#125; // 获取参数 const args = [...arguments].slice(1), fn = this; return function Fn() &#123; // 根据调用方式，传入不同绑定值 return fn.apply(this instanceof Fn ? new fn(...arguments) : context, args.concat(...arguments)); &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"Ajax 原理是什么？如何实现？","slug":"js.Ajax 原理是什么？如何实现？","date":"2022-08-05T01:58:06.378Z","updated":"2022-08-05T02:18:17.437Z","comments":true,"path":"2022/08/05/js.Ajax 原理是什么？如何实现？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.Ajax%20%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/","excerpt":"","text":"Ajax 原理是什么？如何实现？ 一、是什么AJAX全称(Async Javascript and XML) 即异步的JavaScript 和XML，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页 Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用JavaScript来操作DOM而更新页面 流程图如下： 下面举个例子： 领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作 Ajax请求数据流程与“领导想找小李汇报一下工作”类似，上述秘书就相当于XMLHttpRequest对象，领导相当于浏览器，响应数据相当于小李 浏览器可以发送HTTP请求后，接着做其他事情，等收到XHR返回来的数据再进行操作 二、实现过程实现 Ajax异步交互需要服务器逻辑进行配合，需要完成以下步骤： 创建 Ajax的核心对象 XMLHttpRequest对象 通过 XMLHttpRequest 对象的 open() 方法与服务端建立连接 构建请求所需的数据内容，并通过XMLHttpRequest 对象的 send() 方法发送给服务器端 通过 XMLHttpRequest 对象提供的 onreadystatechange 事件监听服务器端你的通信状态 接受并处理服务端向客户端响应的数据结果 将处理结果更新到 HTML页面中 创建XMLHttpRequest对象通过XMLHttpRequest() 构造函数用于初始化一个 XMLHttpRequest 实例对象 1const xhr = new XMLHttpRequest(); 与服务器建立连接通过 XMLHttpRequest 对象的 open() 方法与服务器建立连接 1xhr.open(method, url, [async][, user][, password]) 参数说明： method：表示当前的请求方式，常见的有GET、POST url：服务端地址 async：布尔值，表示是否异步执行操作，默认为true user: 可选的用户名用于认证用途；默认为`null password: 可选的密码用于认证用途，默认为`null 给服务端发送数据通过 XMLHttpRequest 对象的 send() 方法，将客户端页面的数据发送给服务端 12xhr.send([body])body`: 在 `XHR` 请求中要发送的数据体，如果不传递数据则为 `null 如果使用GET请求发送数据的时候，需要注意如下： 将请求数据添加到open()方法中的url地址中 发送请求数据中的send()方法中参数设置为null 绑定onreadystatechange事件onreadystatechange 事件用于监听服务器端的通信状态，主要监听的属性为XMLHttpRequest.readyState , 关于XMLHttpRequest.readyState属性有五个状态，如下图显示 只要 readyState属性值一变化，就会触发一次 readystatechange 事件 XMLHttpRequest.responseText属性用于接收服务器端的响应结果 举个例子： 123456789101112const request = new XMLHttpRequest()request.onreadystatechange = function(e)&#123; if(request.readyState === 4)&#123; // 整个请求过程完毕 if(request.status &gt;= 200 &amp;&amp; request.status &lt;= 300)&#123; console.log(request.responseText) // 服务端返回的结果 &#125;else if(request.status &gt;=400)&#123; console.log(&quot;错误信息：&quot; + request.status) &#125; &#125;&#125;request.open(&#x27;POST&#x27;,&#x27;http://xxxx&#x27;)request.send() 三、封装通过上面对XMLHttpRequest对象的了解，下面来封装一个简单的ajax请求 1234567891011121314151617181920212223242526272829303132//封装一个ajax请求function ajax(options) &#123; //创建XMLHttpRequest对象 const xhr = new XMLHttpRequest() //初始化参数的内容 options = options || &#123;&#125; options.type = (options.type || &#x27;GET&#x27;).toUpperCase() options.dataType = options.dataType || &#x27;json&#x27; const params = options.data //发送请求 if (options.type === &#x27;GET&#x27;) &#123; xhr.open(&#x27;GET&#x27;, options.url + &#x27;?&#x27; + params, true) xhr.send(null) &#125; else if (options.type === &#x27;POST&#x27;) &#123; xhr.open(&#x27;POST&#x27;, options.url, true) xhr.send(params) //接收请求 xhr.onreadystatechange = function () &#123; if (xhr.readyState === 4) &#123; let status = xhr.status if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123; options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML) &#125; else &#123; options.fail &amp;&amp; options.fail(status) &#125; &#125; &#125;&#125; 使用方式如下 123456789101112ajax(&#123; type: &#x27;post&#x27;, dataType: &#x27;json&#x27;, data: &#123;&#125;, url: &#x27;https://xxxx&#x27;, success: function(text,xml)&#123;//请求成功后的回调函数 console.log(text) &#125;, fail: function(status)&#123;////请求失败后的回调函数 console.log(status) &#125;&#125;)","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说new操作符具体都干了什么？","slug":"js.说说new操作符具体都干了什么？","date":"2022-08-05T01:58:06.350Z","updated":"2022-08-05T02:18:28.113Z","comments":true,"path":"2022/08/05/js.说说new操作符具体都干了什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%85%B7%E4%BD%93%E9%83%BD%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"说说new操作符具体都干了什么？ 一、是什么在JavaScript中，new操作符用于创建一个给定构造函数的实例对象 例子 12345678910function Person(name, age)&#123; this.name = name; this.age = age;&#125;Person.prototype.sayName = function () &#123; console.log(this.name)&#125;const person1 = new Person(&#x27;Tom&#x27;, 20)console.log(person1) // Person &#123;name: &quot;Tom&quot;, age: 20&#125;t.sayName() // &#x27;Tom&#x27; 从上面可以看到： new 通过构造函数 Person 创建出来的实例可以访问到构造函数中的属性 new 通过构造函数 Person 创建出来的实例可以访问到构造函数原型链中的属性（即实例与构造函数通过原型链连接了起来） 现在在构建函数中显式加上返回值，并且这个返回值是一个原始类型 123456function Test(name) &#123; this.name = name return 1&#125;const t = new Test(&#x27;xxx&#x27;)console.log(t.name) // &#x27;xxx&#x27; 可以发现，构造函数中返回一个原始值，然而这个返回值并没有作用 下面在构造函数中返回一个对象 12345678function Test(name) &#123; this.name = name console.log(this) // Test &#123; name: &#x27;xxx&#x27; &#125; return &#123; age: 26 &#125;&#125;const t = new Test(&#x27;xxx&#x27;)console.log(t) // &#123; age: 26 &#125;console.log(t.name) // &#x27;undefined&#x27; 从上面可以发现，构造函数如果返回值为一个对象，那么这个返回值会被正常使用 二、流程从上面介绍中，我们可以看到new关键字主要做了以下的工作： 创建一个新的对象obj 将对象与构建函数通过原型链连接起来 将构建函数中的this绑定到新建的对象obj上 根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理 举个例子： 1234567function Person(name, age)&#123; this.name = name; this.age = age;&#125;const person1 = new Person(&#x27;Tom&#x27;, 20)console.log(person1) // Person &#123;name: &quot;Tom&quot;, age: 20&#125;t.sayName() // &#x27;Tom&#x27; 流程图如下： 三、手写new操作符现在我们已经清楚地掌握了new的执行过程 那么我们就动手来实现一下new 12345678910function mynew(Func, ...args) &#123; // 1.创建一个新对象 const obj = &#123;&#125; // 2.新对象原型指向构造函数原型对象 obj.__proto__ = Func.prototype // 3.将构建函数的this指向新对象 let result = Func.apply(obj, args) // 4.根据返回值判断 return result instanceof Object ? result : obj&#125; 测试一下 1234567891011121314151617function mynew(func, ...args) &#123; const obj = &#123;&#125; obj.__proto__ = func.prototype let result = func.apply(obj, args) return result instanceof Object ? result : obj&#125;function Person(name, age) &#123; this.name = name; this.age = age;&#125;Person.prototype.say = function () &#123; console.log(this.name)&#125;let p = mynew(Person, &quot;huihui&quot;, 123)console.log(p) // Person &#123;name: &quot;huihui&quot;, age: 123&#125;p.say() // huihui 可以发现，代码虽然很短，但是能够模拟实现new","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"解释下什么是事件代理？应用场景？","slug":"js.解释下什么是事件代理？应用场景？","date":"2022-08-05T01:58:06.317Z","updated":"2022-08-05T02:07:38.528Z","comments":true,"path":"2022/08/05/js.解释下什么是事件代理？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%A7%A3%E9%87%8A%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"解释下什么是事件代理？应用场景？ 一、是什么事件代理，俗地来讲，就是把一个元素响应事件（click、keydown……）的函数委托到另一个元素 前面讲到，事件流的都会经过三个阶段：捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段，而事件委托就是在冒泡阶段完成 事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素 当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数 下面举个例子： 比如一个宿舍的同学同时快递到了，一种笨方法就是他们一个个去领取 较优方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一一分发给每个同学 在这里，取快递就是一个事件，每个同学指的是需要响应事件的 DOM元素，而出去统一领取快递的宿舍长就是代理的元素 所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个 二、应用场景如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件 1234567&lt;ul id=&quot;list&quot;&gt; &lt;li&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;li&gt;item 3&lt;/li&gt; ...... &lt;li&gt;item n&lt;/li&gt;&lt;/ul&gt; 如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的 12345678// 获取目标元素const lis = document.getElementsByTagName(&quot;li&quot;)// 循环遍历绑定事件for (let i = 0; i &lt; lis.length; i++) &#123; lis[i].onclick = function(e)&#123; console.log(e.target.innerHTML) &#125;&#125; 这时候就可以事件委托，把点击事件绑定在父级元素ul上面，然后执行事件的时候再去匹配目标元素 12345678910// 给父层元素绑定事件document.getElementById(&#x27;list&#x27;).addEventListener(&#x27;click&#x27;, function (e) &#123; // 兼容性处理 var event = e || window.event; var target = event.target || event.srcElement; // 判断是否匹配目标元素 if (target.nodeName.toLocaleLowerCase === &#x27;li&#x27;) &#123; console.log(&#x27;the content is: &#x27;, target.innerHTML); &#125;&#125;); 还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件 但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件 如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的 举个例子： 下面html结构中，点击input可以动态添加元素 1234567&lt;input type=&quot;button&quot; name=&quot;&quot; id=&quot;btn&quot; value=&quot;添加&quot; /&gt;&lt;ul id=&quot;ul1&quot;&gt; &lt;li&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;li&gt;item 3&lt;/li&gt; &lt;li&gt;item 4&lt;/li&gt;&lt;/ul&gt; 使用事件委托 123456789101112131415161718192021const oBtn = document.getElementById(&quot;btn&quot;);const oUl = document.getElementById(&quot;ul1&quot;);const num = 4;//事件委托，添加的子元素也有事件oUl.onclick = function (ev) &#123; ev = ev || window.event; const target = ev.target || ev.srcElement; if (target.nodeName.toLowerCase() == &#x27;li&#x27;) &#123; console.log(&#x27;the content is: &#x27;, target.innerHTML); &#125;&#125;;//添加新节点oBtn.onclick = function () &#123; num++; const oLi = document.createElement(&#x27;li&#x27;); oLi.innerHTML = `item $&#123;num&#125;`; oUl.appendChild(oLi);&#125;; 可以看到，使用事件委托，在动态绑定事件的情况下是可以减少很多重复工作的 三、总结适合事件委托的事件有：click，mousedown，mouseup，keydown，keyup，keypress 从上面应用场景中，我们就可以看到使用事件委托存在两大优点： 减少整个页面所需的内存，提升整体性能 动态绑定，减少重复工作 但是使用事件委托也是存在局限性： focus、blur这些事件没有事件冒泡机制，所以无法进行委托绑定事件 mousemove、mouseout这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说 typeof 与 instanceof 区别?","slug":"js.说说 typeof 与 instanceof 区别_","date":"2022-08-05T01:58:06.290Z","updated":"2022-08-05T02:10:29.252Z","comments":true,"path":"2022/08/05/js.说说 typeof 与 instanceof 区别_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%20typeof%20%E4%B8%8E%20instanceof%20%E5%8C%BA%E5%88%AB_/","excerpt":"","text":"说说 typeof 与 instanceof 区别? 一、typeoftypeof 操作符返回一个字符串，表示未经计算的操作数的类型 使用方法如下： 12typeof operandtypeof(operand) operand表示对象或原始值的表达式，其类型将被返回 举个例子 12345678910typeof 1 // &#x27;number&#x27;typeof &#x27;1&#x27; // &#x27;string&#x27;typeof undefined // &#x27;undefined&#x27;typeof true // &#x27;boolean&#x27;typeof Symbol() // &#x27;symbol&#x27;typeof null // &#x27;object&#x27;typeof [] // &#x27;object&#x27;typeof &#123;&#125; // &#x27;object&#x27;typeof console // &#x27;object&#x27;typeof console.log // &#x27;function&#x27; 从上面例子，前6个都是基础数据类型。虽然typeof null为object，但这只是JavaScript 存在的一个悠久 Bug，不代表null就是引用数据类型，并且null本身也不是对象 所以，null在 typeof之后返回的是有问题的结果，不能作为判断null的方法。如果你需要在 if 语句中判断是否为 null，直接通过===null来判断就好 同时，可以发现引用类型数据，用typeof来判断的话，除了function会被识别出来之外，其余的都输出object 如果我们想要判断一个变量是否存在，可以使用typeof：(不能使用if(a)， 若a未声明，则报错) 123if(typeof a != &#x27;undefined&#x27;)&#123; //变量存在&#125; 二、instanceofinstanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上 使用如下： 1object instanceof constructor object为实例对象，constructor为构造函数 构造函数通过new可以实例对象，instanceof能判断这个对象是否是之前那个构造函数生成的对象 12345678// 定义构建函数let Car = function() &#123;&#125;let benz = new Car()benz instanceof Car // truelet car = new String(&#x27;xxx&#x27;)car instanceof String // truelet str = &#x27;xxx&#x27;str instanceof String // false 关于instanceof的实现原理，可以参考下面： 1234567891011function myInstanceof(left, right) &#123; // 这里先用typeof来判断基础数据类型，如果是，直接返回false if(typeof left !== &#x27;object&#x27; || left === null) return false; // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象 let proto = Object.getPrototypeOf(left); while(true) &#123; if(proto === null) return false; if(proto === right.prototype) return true;//找到相同原型对象，返回true proto = Object.getPrototypeof(proto); &#125;&#125; 也就是顺着原型链去找，直到找到相同的原型对象，返回true，否则为false 三、区别typeof与instanceof都是判断数据类型的方法，区别如下： typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值 instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型 而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断 可以看到，上述两种方法都有弊端，并不能满足所有场景的需求 如果需要通用检测数据类型，可以采用Object.prototype.toString，调用该方法，统一返回格式“[object Xxx]”的字符串 如下 12345678910111213Object.prototype.toString(&#123;&#125;) // &quot;[object Object]&quot;Object.prototype.toString.call(&#123;&#125;) // 同上结果，加上call也okObject.prototype.toString.call(1) // &quot;[object Number]&quot;Object.prototype.toString.call(&#x27;1&#x27;) // &quot;[object String]&quot;Object.prototype.toString.call(true) // &quot;[object Boolean]&quot;Object.prototype.toString.call(function()&#123;&#125;) // &quot;[object Function]&quot;Object.prototype.toString.call(null) //&quot;[object Null]&quot;Object.prototype.toString.call(undefined) //&quot;[object Undefined]&quot;Object.prototype.toString.call(/123/g) //&quot;[object RegExp]&quot;Object.prototype.toString.call(new Date()) //&quot;[object Date]&quot;Object.prototype.toString.call([]) //&quot;[object Array]&quot;Object.prototype.toString.call(document) //&quot;[object HTMLDocument]&quot;Object.prototype.toString.call(window) //&quot;[object Window]&quot; 了解了toString的基本用法，下面就实现一个全局通用的数据类型判断方法 12345678function getType(obj)&#123; let type = typeof obj; if (type !== &quot;object&quot;) &#123; // 先进行typeof判断，如果是基础数据类型，直接返回 return type; &#125; // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果 return Object.prototype.toString.call(obj).replace(/^\\[object (\\S+)\\]$/, &#x27;$1&#x27;); &#125; 使用如下 12345678getType([]) // &quot;Array&quot; typeof []是object，因此toString返回getType(&#x27;123&#x27;) // &quot;string&quot; typeof 直接返回getType(window) // &quot;Window&quot; toString返回getType(null) // &quot;Null&quot;首字母大写，typeof null是object，需toString来判断getType(undefined) // &quot;undefined&quot; typeof 直接返回getType() // &quot;undefined&quot; typeof 直接返回getType(function()&#123;&#125;) // &quot;function&quot; typeof能判断，因此首字母小写getType(/123/g) //&quot;RegExp&quot; toString返回","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript中的事件模型如何理解?","slug":"js.avaScript中的事件模型如何理解_","date":"2022-08-05T01:58:06.263Z","updated":"2022-08-05T02:18:12.742Z","comments":true,"path":"2022/08/05/js.avaScript中的事件模型如何理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.avaScript%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3_/","excerpt":"","text":"JavaScript中的事件模型如何理解? 一、事件与事件流javascript中的事件，可以理解就是在HTML文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等 由于DOM是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念 事件流都会经历三个阶段： 事件捕获阶段(capture phase) 处于目标阶段(target phase) 事件冒泡阶段(bubbling phase) 事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是DOM中最高层的父节点 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Event Bubbling&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=&quot;clickMe&quot;&gt;Click Me&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 然后，我们给button和它的父元素，加入点击事件 1234567891011121314var button = document.getElementById(&#x27;clickMe&#x27;);button.onclick = function() &#123; console.log(&#x27;1.Button&#x27;);&#125;;document.body.onclick = function() &#123; console.log(&#x27;2.body&#x27;);&#125;;document.onclick = function() &#123; console.log(&#x27;3.document&#x27;);&#125;;window.onclick = function() &#123; console.log(&#x27;4.window&#x27;);&#125;; 点击按钮，输出如下 12341.button2.body3.document4.window 点击事件首先在button元素上发生，然后逐级向上传播 事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接收事件, 而最具体的节点（触发节点）最后接收事件 二、事件模型事件模型可以分为三种： 原始事件模型（DOM0级） 标准事件模型（DOM2级） IE事件模型（基本不用） 原始事件模型事件绑定监听函数比较简单, 有两种方式： HTML代码中直接绑定 1&lt;input type=&quot;button&quot; onclick=&quot;fun()&quot;&gt; 通过JS代码绑定 12var btn = document.getElementById(&#x27;.btn&#x27;);btn.onclick = fun; 特性 绑定速度快 DOM0级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行 只支持冒泡，不支持捕获 同一个类型的事件只能绑定一次 1234&lt;input type=&quot;button&quot; id=&quot;btn&quot; onclick=&quot;fun1()&quot;&gt;var btn = document.getElementById(&#x27;.btn&#x27;);btn.onclick = fun2; 如上，当希望为同一个元素绑定多个同类型事件的时候（上面的这个btn元素绑定2个点击事件），是不被允许的，后绑定的事件会覆盖之前的事件 删除 DOM0 级事件处理程序只要将对应事件属性置为null即可 1btn.onclick = null; 标准事件模型在该事件模型中，一次事件共有三个过程: 事件捕获阶段：事件从document一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数 事件冒泡阶段：事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行 事件绑定监听函数的方式如下: 1addEventListener(eventType, handler, useCapture) 事件移除监听函数的方式如下: 1removeEventListener(eventType, handler, useCapture) 参数如下： eventType指定事件类型(不要加on) handler是事件处理函数 useCapture是一个boolean用于指定是否在捕获阶段进行处理，一般设置为false与IE浏览器保持一致 举个例子： 123var btn = document.getElementById(&#x27;.btn&#x27;);btn.addEventListener(‘click’, showMessage, false);btn.removeEventListener(‘click’, showMessage, false); 特性 可以在一个DOM元素上绑定多个事件处理器，各自并不会冲突 123btn.addEventListener(‘click’, showMessage1, false);btn.addEventListener(‘click’, showMessage2, false);btn.addEventListener(‘click’, showMessage3, false); 执行时机 当第三个参数(useCapture)设置为true就在捕获过程中执行，反之在冒泡过程中执行处理函数 下面举个例子： 12345&lt;div id=&#x27;div&#x27;&gt; &lt;p id=&#x27;p&#x27;&gt; &lt;span id=&#x27;span&#x27;&gt;Click Me!&lt;/span&gt; &lt;/p&gt;&lt;/div&gt; 设置点击事件 1234567891011var div = document.getElementById(&#x27;div&#x27;);var p = document.getElementById(&#x27;p&#x27;);function onClickFn (event) &#123; var tagName = event.currentTarget.tagName; var phase = event.eventPhase; console.log(tagName, phase);&#125;div.addEventListener(&#x27;click&#x27;, onClickFn, false);p.addEventListener(&#x27;click&#x27;, onClickFn, false); 上述使用了eventPhase，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段 点击Click Me!，输出如下 12P 3DIV 3 可以看到，p和div都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的p率先做出响应 如果把第三个参数都改为true 12div.addEventListener(&#x27;click&#x27;, onClickFn, true);p.addEventListener(&#x27;click&#x27;, onClickFn, true); 输出如下 12DIV 1P 1 两者都是在捕获阶段响应事件，所以div比p标签先做出响应 IE事件模型IE事件模型共有两个过程: 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。 事件冒泡阶段：事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行 事件绑定监听函数的方式如下: 1attachEvent(eventType, handler) 事件移除监听函数的方式如下: 1detachEvent(eventType, handler) 举个例子： 123var btn = document.getElementById(&#x27;.btn&#x27;);btn.attachEvent(‘onclick’, showMessage);btn.detachEvent(‘onclick’, showMessage);","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript中执行上下文和执行栈是什么？","slug":"js.JavaScript中执行上下文和执行栈是什么？","date":"2022-08-05T01:58:06.232Z","updated":"2022-08-05T02:17:05.410Z","comments":true,"path":"2022/08/05/js.JavaScript中执行上下文和执行栈是什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.JavaScript%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A0%88%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"JavaScript中执行上下文和执行栈是什么？ 一、执行上下文简单的来说，执行上下文是对Javascript代码执行环境的一种抽象概念，只要有Javascript代码运行，那么它就一定是运行在执行上下文中 执行上下文的类型分为三种： 全局执行上下文：只有一个，浏览器中的全局对象就是 window对象，this 指向这个全局对象 函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文 Eval 函数执行上下文：指的是运行在 eval 函数中的代码，很少用而且不建议使用 下面给出全局上下文和函数上下文的例子： 紫色框住的部分为全局上下文，蓝色和橘色框起来的是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问 可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问 二、生命周期执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段 创建阶段创建阶段即当函数被调用，但未执行任何其内部代码之前 创建阶段做了三件事： 确定 this 的值，也被称为 This Binding LexicalEnvironment（词法环境） 组件被创建 VariableEnvironment（变量环境） 组件被创建 伪代码如下： 12345ExecutionContext = &#123; ThisBinding = &lt;this value&gt;, // 确定this LexicalEnvironment = &#123; ... &#125;, // 词法环境 VariableEnvironment = &#123; ... &#125;, // 变量环境&#125; This Binding确定this的值我们前面讲到，this的值是在执行的时候才能确认，定义的时候不能确认 词法环境词法环境有两个组成部分： 全局环境：是一个没有外部环境的词法环境，其外部环境引用为null，有一个全局对象，this 的值指向这个全局对象 函数环境：用户在函数中定义的变量被存储在环境记录中，包含了arguments对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境 伪代码如下： 1234567891011121314151617GlobalExectionContext = &#123; // 全局执行上下文 LexicalEnvironment: &#123; // 词法环境 EnvironmentRecord: &#123; // 环境记录 Type: &quot;Object&quot;, // 全局环境 // 标识符绑定在这里 outer: &lt;null&gt; // 对外部环境的引用 &#125; &#125;FunctionExectionContext = &#123; // 函数执行上下文 LexicalEnvironment: &#123; // 词法环境 EnvironmentRecord: &#123; // 环境记录 Type: &quot;Declarative&quot;, // 函数环境 // 标识符绑定在这里 // 对外部环境的引用 outer: &lt;Global or outer function environment reference&gt; &#125; &#125; 变量环境变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性 在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ let和 const ）绑定，而后者仅用于存储变量（ var ）绑定 举个例子 12345678910let a = 20; const b = 30; var c;function multiply(e, f) &#123; var g = 20; return e * f * g; &#125;c = multiply(20, 30); 执行上下文如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647GlobalExectionContext = &#123; ThisBinding: &lt;Global Object&gt;, LexicalEnvironment: &#123; // 词法环境 EnvironmentRecord: &#123; Type: &quot;Object&quot;, // 标识符绑定在这里 a: &lt; uninitialized &gt;, b: &lt; uninitialized &gt;, multiply: &lt; func &gt; &#125; outer: &lt;null&gt; &#125;, VariableEnvironment: &#123; // 变量环境 EnvironmentRecord: &#123; Type: &quot;Object&quot;, // 标识符绑定在这里 c: undefined, &#125; outer: &lt;null&gt; &#125; &#125;FunctionExectionContext = &#123; ThisBinding: &lt;Global Object&gt;, LexicalEnvironment: &#123; EnvironmentRecord: &#123; Type: &quot;Declarative&quot;, // 标识符绑定在这里 Arguments: &#123;0: 20, 1: 30, length: 2&#125;, &#125;, outer: &lt;GlobalLexicalEnvironment&gt; &#125;, VariableEnvironment: &#123; EnvironmentRecord: &#123; Type: &quot;Declarative&quot;, // 标识符绑定在这里 g: undefined &#125;, outer: &lt;GlobalLexicalEnvironment&gt; &#125; &#125; 留意上面的代码，let和const定义的变量a和b在创建阶段没有被赋值，但var声明的变量从在创建阶段被赋值为undefined 这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中 但变量会被初始化为undefined(var声明的情况下)和保持uninitialized(未初始化状态)(使用let和const声明的情况下) 这就是变量提升的实际原因 执行阶段在这阶段，执行变量赋值、代码执行 如果 Javascript 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 undefined 值 回收阶段执行上下文出栈等待虚拟机回收执行上下文 二、执行栈执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文 当Javascript引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中 每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中 引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文 举个例子： 1234567891011let a = &#x27;Hello World!&#x27;;function first() &#123; console.log(&#x27;Inside first function&#x27;); second(); console.log(&#x27;Again inside first function&#x27;);&#125;function second() &#123; console.log(&#x27;Inside second function&#x27;);&#125;first();console.log(&#x27;Inside Global Execution Context&#x27;); 转化成图的形式 简单分析一下流程： 创建全局上下文请压入执行栈 first函数被调用，创建函数执行上下文并压入栈 执行first函数过程遇到second函数，再创建一个函数执行上下文并压入栈 second函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文first函数 first函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文 所有代码执行完毕，全局上下文也会被推出栈中，程序结束","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对Javascript中this对象的理解","slug":"js.说说你对Javascript中this对象的理解","date":"2022-08-05T01:58:06.197Z","updated":"2022-08-05T02:12:18.714Z","comments":true,"path":"2022/08/05/js.说说你对Javascript中this对象的理解/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9Javascript%E4%B8%ADthis%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"说说你对Javascript中this对象的理解 一、定义函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别 在绝大多数情况下，函数的调用方式决定了 this 的值（运行时绑定） this 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象 举个例子： 123456789101112131415161718192021222324function baz() &#123; // 当前调用栈是：baz // 因此，当前调用位置是全局作用域 console.log( &quot;baz&quot; ); bar(); // &lt;-- bar的调用位置&#125;function bar() &#123; // 当前调用栈是：baz --&gt; bar // 因此，当前调用位置在baz中 console.log( &quot;bar&quot; ); foo(); // &lt;-- foo的调用位置&#125;function foo() &#123; // 当前调用栈是：baz --&gt; bar --&gt; foo // 因此，当前调用位置在bar中 console.log( &quot;foo&quot; );&#125;baz(); // &lt;-- baz的调用位置 同时，this在函数执行过程中，this一旦被确定了，就不可以再更改 1234567891011var a = 10;var obj = &#123; a: 20&#125;function fn() &#123; this = obj; // 修改this，运行后会报错 console.log(this.a);&#125;fn(); 二、绑定规则根据不同的使用场合，this有不同的值，主要分为下面几种情况： 默认绑定 隐式绑定 new绑定 显示绑定 默认绑定全局环境中定义person函数，内部使用this关键字 12345var name = &#x27;Jenny&#x27;;function person() &#123; return this.name;&#125;console.log(person()); //Jenny 上述代码输出Jenny，原因是调用函数的对象在游览器中位window，因此this指向window，所以输出Jenny 注意： 严格模式下，不能将全局对象用于默认绑定，this会绑定到undefined，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象 隐式绑定函数还可以作为某个对象的方法调用，这时this就指这个上级对象 123456789function test() &#123; console.log(this.x);&#125;var obj = &#123;&#125;;obj.x = 1;obj.m = test;obj.m(); // 1 这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象 123456789var o = &#123; a:10, b:&#123; fn:function()&#123; console.log(this.a); //undefined &#125; &#125;&#125;o.b.fn(); 上述代码中，this的上一级对象为b，b内部并没有a变量的定义，所以输出undefined 这里再举一种特殊情况 123456789101112var o = &#123; a:10, b:&#123; a:12, fn:function()&#123; console.log(this.a); //undefined console.log(this); //window &#125; &#125;&#125;var j = o.b.fn;j(); 此时this指向的是window，这里的大家需要记住，this永远指向的是最后调用它的对象，虽然fn是对象b的方法，但是fn赋值给j时候并没有执行，所以最终指向window new绑定通过构建函数new关键字生成一个实例对象，此时this指向这个实例对象 123456function test() &#123; this.x = 1;&#125;var obj = new test();obj.x // 1 上述代码之所以能过输出1，是因为new关键字改变了this的指向 这里再列举一些特殊情况： new过程遇到return一个对象，此时this指向为返回的对象 1234567function fn() &#123; this.user = &#x27;xxx&#x27;; return &#123;&#125;; &#125;var a = new fn(); console.log(a.user); //undefined 如果返回一个简单类型的时候，则this指向实例对象 1234567function fn() &#123; this.user = &#x27;xxx&#x27;; return 1;&#125;var a = new fn; console.log(a.user); //xxx 注意的是null虽然也是对象，但是此时new仍然指向实例对象 1234567function fn() &#123; this.user = &#x27;xxx&#x27;; return null;&#125;var a = new fn; console.log(a.user); //xxx 显示修改apply()、call()、bind()是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时this指的就是这第一个参数 123456789var x = 0;function test() &#123; console.log(this.x);&#125;var obj = &#123;&#125;;obj.x = 1;obj.m = test;obj.m.apply(obj) // 1 关于apply、call、bind三者的区别，我们后面再详细说 三、箭头函数在 ES6 的语法中还提供了箭头函语法，让我们在代码书写时就能确定 this 的指向（编译时绑定） 举个例子： 123456789const obj = &#123; sayThis: () =&gt; &#123; console.log(this); &#125;&#125;;obj.sayThis(); // window 因为 JavaScript 没有块作用域，所以在定义 sayThis 的时候，里面的 this 就绑到 window 上去了const globalSay = obj.sayThis;globalSay(); // window 浏览器中的 global 对象 虽然箭头函数的this能够在编译的时候就确定了this的指向，但也需要注意一些潜在的坑 下面举个例子： 绑定事件监听 12345const button = document.getElementById(&#x27;mngb&#x27;);button.addEventListener(&#x27;click&#x27;, ()=&gt; &#123; console.log(this === window) // true this.innerHTML = &#x27;clicked button&#x27;&#125;) 上述可以看到，我们其实是想要this为点击的button，但此时this指向了window 包括在原型上添加方法时候，此时this指向window 123456Cat.prototype.sayName = () =&gt; &#123; console.log(this === window) //true return this.name&#125;const cat = new Cat(&#x27;mm&#x27;);cat.sayName() 同样的，箭头函数不能作为构建函数 四、优先级隐式绑定 VS 显式绑定12345678910111213141516171819function foo() &#123; console.log( this.a );&#125;var obj1 = &#123; a: 2, foo: foo&#125;;var obj2 = &#123; a: 3, foo: foo&#125;;obj1.foo(); // 2obj2.foo(); // 3obj1.foo.call( obj2 ); // 3obj2.foo.call( obj1 ); // 2 显然，显示绑定的优先级更高 new绑定 VS 隐式绑定12345678910111213141516171819function foo(something) &#123; this.a = something;&#125;var obj1 = &#123; foo: foo&#125;;var obj2 = &#123;&#125;;obj1.foo( 2 );console.log( obj1.a ); // 2obj1.foo.call( obj2, 3 );console.log( obj2.a ); // 3var bar = new obj1.foo( 4 );console.log( obj1.a ); // 2console.log( bar.a ); // 4 可以看到，new绑定的优先级&gt;隐式绑定 new绑定 VS 显式绑定因为new和apply、call无法一起使用，但硬绑定也是显式绑定的一种，可以替换测试 1234567891011121314function foo(something) &#123; this.a = something;&#125;var obj1 = &#123;&#125;;var bar = foo.bind( obj1 );bar( 2 );console.log( obj1.a ); // 2var baz = new bar( 3 );console.log( obj1.a ); // 2console.log( baz.a ); // 3bar`被绑定到obj1上，但是`new bar(3)` 并没有像我们预计的那样把`obj1.a`修改为3。但是，`new`修改了绑定调用`bar()`中的`this 我们可认为new绑定优先级&gt;显式绑定 综上，new绑定优先级 &gt; 显示绑定优先级 &gt; 隐式绑定优先级 &gt; 默认绑定优先级 相关链接 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说Javascript中的继承？如何实现继承？","slug":"js.说说Javascript中的继承？如何实现继承？","date":"2022-08-05T01:58:06.168Z","updated":"2022-08-05T02:18:33.670Z","comments":true,"path":"2022/08/05/js.说说Javascript中的继承？如何实现继承？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4Javascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%EF%BC%9F/","excerpt":"","text":"说说Javascript中的继承？如何实现继承？ 一、是什么继承（inheritance）是面向对象软件技术当中的一个概念 如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类” 继承的优点 继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码 在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能 虽然JavaScript并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富 关于继承，我们举个形象的例子： 定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等 1234567class Car&#123; constructor(color,speed)&#123; this.color = color this.speed = speed // ... &#125;&#125; 由汽车这个类可以派生出“轿车”和“货车”两个类，在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱 1234567// 货车class Truck extends Car&#123; constructor(color,speed)&#123; super(color,speed) this.Container = true // 货箱 &#125;&#125; 这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在“轿车”中定义汽车已经有的属性 在“轿车”继承“汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与“汽车”这个父类不同的属性和方法 1234567class Truck extends Car&#123; constructor(color,speed)&#123; super(color,speed) this.color = &quot;black&quot; //覆盖 this.Container = true // 货箱 &#125;&#125; 从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系 二、实现方式下面给出JavaScripy常见的继承方式： 原型链继承 构造函数继承（借助 call） 组合继承 原型式继承 寄生式继承 寄生组合式继承 原型链继承原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针 举个例子 123456789function Parent() &#123; this.name = &#x27;parent1&#x27;; this.play = [1, 2, 3] &#125; function Child() &#123; this.type = &#x27;child2&#x27;; &#125; Child.prototype = new Parent(); console.log(new Child()) 上面代码看似没问题，实际存在潜在问题 1234var s1 = new Child();var s2 = new Child();s1.play.push(4);console.log(s1.play, s2.play); // [1,2,3,4] 改变s1的play属性，会发现s2也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的 构造函数继承借助 call调用Parent函数 12345678910111213141516function Parent()&#123; this.name = &#x27;parent1&#x27;;&#125;Parent.prototype.getName = function () &#123; return this.name;&#125;function Child()&#123; Parent1.call(this); this.type = &#x27;child&#x27;&#125;let child = new Child();console.log(child); // 没问题console.log(child.getName()); // 会报错 可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法 相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法 组合继承前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来 123456789101112131415161718192021222324function Parent3 () &#123; this.name = &#x27;parent3&#x27;; this.play = [1, 2, 3];&#125;Parent3.prototype.getName = function () &#123; return this.name;&#125;function Child3() &#123; // 第二次调用 Parent3() Parent3.call(this); this.type = &#x27;child3&#x27;;&#125;// 第一次调用 Parent3()Child3.prototype = new Parent3();// 手动挂上构造器，指向自己的构造函数Child3.prototype.constructor = Child3;var s3 = new Child3();var s4 = new Child3();s3.play.push(4);console.log(s3.play, s4.play); // 不互相影响console.log(s3.getName()); // 正常输出&#x27;parent3&#x27;console.log(s4.getName()); // 正常输出&#x27;parent3&#x27; 这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到Parent3 执行了两次，造成了多构造一次的性能开销 原型式继承这里主要借助Object.create方法实现普通对象的继承 同样举个例子 1234567891011121314151617181920let parent4 = &#123; name: &quot;parent4&quot;, friends: [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;], getName: function() &#123; return this.name; &#125; &#125;; let person4 = Object.create(parent4); person4.name = &quot;tom&quot;; person4.friends.push(&quot;jerry&quot;); let person5 = Object.create(parent4); person5.friends.push(&quot;lucy&quot;); console.log(person4.name); // tom console.log(person4.name === person4.getName()); // true console.log(person5.name); // parent4 console.log(person4.friends); // [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;] console.log(person5.friends); // [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;] 这种继承方式的缺点也很明显，因为Object.create方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能 寄生式继承寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法 1234567891011121314151617181920let parent5 = &#123; name: &quot;parent5&quot;, friends: [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;], getName: function() &#123; return this.name; &#125;&#125;;function clone(original) &#123; let clone = Object.create(original); clone.getFriends = function() &#123; return this.friends; &#125;; return clone;&#125;let person5 = clone(parent5);console.log(person5.getName()); // parent5console.log(person5.getFriends()); // [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;] 其优缺点也很明显，跟上面讲的原型式继承一样 寄生组合式继承寄生组合式继承，借助解决普通对象的继承问题的Object.create 方法，在几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式 12345678910111213141516171819202122232425262728function clone (parent, child) &#123; // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程 child.prototype = Object.create(parent.prototype); child.prototype.constructor = child;&#125;function Parent6() &#123; this.name = &#x27;parent6&#x27;; this.play = [1, 2, 3];&#125;Parent6.prototype.getName = function () &#123; return this.name;&#125;function Child6() &#123; Parent6.call(this); this.friends = &#x27;child5&#x27;;&#125;clone(Parent6, Child6);Child6.prototype.getFriends = function () &#123; return this.friends;&#125;let person6 = new Child6(); console.log(person6); //&#123;friends:&quot;child5&quot;,name:&quot;child5&quot;,play:[1,2,3],__proto__:Parent6&#125;console.log(person6.getName()); // parent6console.log(person6.getFriends()); // child5 可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题 文章一开头，我们是使用ES6 中的extends关键字直接实现 JavaScript的继承 1234567891011121314151617181920class Person &#123; constructor(name) &#123; this.name = name &#125; // 原型方法 // 即 Person.prototype.getName = function() &#123; &#125; // 下面可以简写为 getName() &#123;...&#125; getName = function () &#123; console.log(&#x27;Person:&#x27;, this.name) &#125;&#125;class Gamer extends Person &#123; constructor(name, age) &#123; // 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。 super(name) this.age = age &#125;&#125;const asuna = new Gamer(&#x27;Asuna&#x27;, 20)asuna.getName() // 成功访问到父类的方法 利用babel工具进行转换，我们会发现extends实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式 三、总结下面以一张图作为总结： 通过Object.create 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 extends 的语法糖和寄生组合继承的方式基本类似","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript原型，原型链 ? 有什么特点？","slug":"js.JavaScript原型，原型链 _ 有什么特点？","date":"2022-08-05T01:58:06.143Z","updated":"2022-08-05T02:17:25.473Z","comments":true,"path":"2022/08/05/js.JavaScript原型，原型链 _ 有什么特点？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.JavaScript%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%20_%20%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%EF%BC%9F/","excerpt":"","text":"JavaScript原型，原型链 ? 有什么特点？ 一、原型JavaScript 常被描述为一种基于原型的语言——每个对象拥有一个原型对象 当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾 准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的prototype属性上，而非实例对象本身 下面举个例子： 函数可以有属性。每个函数都有一个特殊的属性叫作原型prototype 12function doSomething()&#123;&#125;console.log( doSomething.prototype ); 控制台输出 123456789101112&#123; constructor: ƒ doSomething(), __proto__: &#123; constructor: ƒ Object(), hasOwnProperty: ƒ hasOwnProperty(), isPrototypeOf: ƒ isPrototypeOf(), propertyIsEnumerable: ƒ propertyIsEnumerable(), toLocaleString: ƒ toLocaleString(), toString: ƒ toString(), valueOf: ƒ valueOf() &#125;&#125; 上面这个对象，就是大家常说的原型对象 可以看到，原型对象有一个自有属性constructor，这个属性指向该函数，如下图关系展示 二、原型链原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法 在对象实例和它的构造器之间建立一个链接（它是__proto__属性，是从构造函数的prototype属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法 下面举个例子： 123456789function Person(name) &#123; this.name = name; this.age = 18; this.sayName = function() &#123; console.log(this.name); &#125;&#125;// 第二步 创建实例var person = new Person(&#x27;person&#x27;) 根据代码，我们可以得到下图 下面分析一下： 构造函数Person存在原型对象Person.prototype 构造函数生成实例对象person，person的__proto__指向构造函数Person原型对象 Person.prototype.__proto__ 指向内置对象，因为 Person.prototype是个对象，默认是由 Object函数作为类创建的，而 Object.prototype 为内置对象 Person.__proto__ 指向内置匿名函数 anonymous，因为 Person 是个函数对象，默认由 Function 作为类创建 Function.prototype 和 Function.__proto__同时指向内置匿名函数 anonymous，这样原型链的终点就是 null 三、总结下面首先要看几个概念： __proto__作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的 每个对象的__proto__都是指向它的构造函数的原型对象prototype的 1person1.__proto__ === Person.prototype 构造函数是一个函数对象，是通过 Function构造器产生的 1Person.__proto__ === Function.prototype 原型对象本身是一个普通对象，而普通对象的构造函数都是Object 1Person.prototype.__proto__ === Object.prototype 刚刚上面说了，所有的构造器都是函数对象，函数对象都是 Function构造产生的 1Object.__proto__ === Function.prototype Object的原型对象也有__proto__属性指向null，null是原型链的顶端 1Object.prototype.__proto__ === null 下面作出总结： 一切对象都是继承自Object对象，Object 对象直接继承根源对象null 一切的函数对象（包括 Object 对象），都是继承自 Function 对象 Object 对象直接继承自 Function 对象 Function对象的__proto__会指向自己的原型对象，最终还是继承自Object对象","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对Javascript中作用域的理解?","slug":"js.说说你对Javascript中作用域的理解_","date":"2022-08-05T01:58:06.108Z","updated":"2022-08-05T02:12:14.100Z","comments":true,"path":"2022/08/05/js.说说你对Javascript中作用域的理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说你对Javascript中作用域的理解? 一、作用域作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合 换句话说，作用域决定了代码区块中变量和其他资源的可见性 举个例子 12345function myFunction() &#123; let inVariable = &quot;函数内部变量&quot;;&#125;myFunction();//要先执行这个函数，否则根本不知道里面是啥console.log(inVariable); // Uncaught ReferenceError: inVariable is not defined 上述例子中，函数myFunction内部创建一个inVariable变量，当我们在全局访问这个变量的时候，系统会报错 这就说明我们在全局是无法获取到（闭包除外）函数内部的变量 我们一般将作用域分成： 全局作用域 函数作用域 块级作用域 全局作用域任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问 1234567// 全局变量var greeting = &#x27;Hello World!&#x27;;function greet() &#123; console.log(greeting);&#125;// 打印 &#x27;Hello World!&#x27;greet(); 函数作用域函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问 12345678function greet() &#123; var greeting = &#x27;Hello World!&#x27;; console.log(greeting);&#125;// 打印 &#x27;Hello World!&#x27;greet();// 报错：Uncaught ReferenceError: greeting is not definedconsole.log(greeting); 可见上述代码中在函数内部声明的变量或函数，在函数外部是无法访问的，这说明在函数内部定义的变量或者方法只是函数作用域 块级作用域ES6引入了let和const关键字,和var关键字不同，在大括号中使用let和const声明的变量存在于块级作用域中。在大括号之外不能访问这些变量 12345678910&#123; // 块级作用域中的变量 let greeting = &#x27;Hello World!&#x27;; var lang = &#x27;English&#x27;; console.log(greeting); // Prints &#x27;Hello World!&#x27;&#125;// 变量 &#x27;English&#x27;console.log(lang);// 报错：Uncaught ReferenceError: greeting is not definedconsole.log(greeting); 二、词法作用域词法作用域，又叫静态作用域，变量被创建时就确定好了，而非执行阶段确定的。也就是说我们写好代码时它的作用域就确定了，JavaScript 遵循的就是词法作用域 123456789var a = 2;function foo()&#123; console.log(a)&#125;function bar()&#123; var a = 3; foo();&#125;n() 上述代码改变成一张图 由于JavaScript遵循词法作用域，相同层级的 foo 和 bar 就没有办法访问到彼此块作用域中的变量，所以输出2 三、作用域链当在Javascript中使用一个变量的时候，首先Javascript引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域 如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错 这里拿《你不知道的Javascript(上)》中的一张图解释： 把作用域比喻成一个建筑，这份建筑代表程序中的嵌套作用域链，第一层代表当前的执行作用域，顶层代表全局作用域 变量的引用会顺着当前楼层进行查找，如果找不到，则会往上一层找，一旦到达顶层，查找的过程都会停止 下面代码演示下： 123456789101112var sex = &#x27;男&#x27;;function person() &#123; var name = &#x27;张三&#x27;; function student() &#123; var age = 18; console.log(name); // 张三 console.log(sex); // 男 &#125; student(); console.log(age); // Uncaught ReferenceError: age is not defined&#125;person(); 上述代码主要主要做了以下工作： student函数内部属于最内层作用域，找不到name，向上一层作用域person函数内部找，找到了输出“张三” student内部输出cat时找不到，向上一层作用域person函数找，还找不到继续向上一层找，即全局作用域，找到了输出“男” 在person函数内部输出age时找不到，向上一层作用域找，即全局作用域，还是找不到则报错","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对闭包的理解？闭包使用场景?","slug":"js.说说你对闭包的理解？闭包使用场景_","date":"2022-08-05T01:58:06.072Z","updated":"2022-08-05T02:11:04.424Z","comments":true,"path":"2022/08/05/js.说说你对闭包的理解？闭包使用场景_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF_/","excerpt":"","text":"说说你对闭包的理解？闭包使用场景? 一、是什么一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure） 也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域 在 JavaScript中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁 下面给出一个简单的例子 12345678function init() &#123; var name = &quot;Mozilla&quot;; // name 是一个被 init 创建的局部变量 function displayName() &#123; // displayName() 是内部函数，一个闭包 alert(name); // 使用了父函数中声明的变量 &#125; displayName();&#125;init(); displayName() 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量 二、使用场景任何闭包的使用场景都离不开这两点： 创建私有变量 延长变量的生命周期 ❝ 一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的 ❞ 下面举个例子： 在页面上添加一些可以调整字号的按钮 12345678910111213function makeSizer(size) &#123; return function() &#123; document.body.style.fontSize = size + &#x27;px&#x27;; &#125;;&#125;var size12 = makeSizer(12);var size14 = makeSizer(14);var size16 = makeSizer(16);document.getElementById(&#x27;size-12&#x27;).onclick = size12;document.getElementById(&#x27;size-14&#x27;).onclick = size14;document.getElementById(&#x27;size-16&#x27;).onclick = size16; 柯里化函数柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用 12345678910111213141516171819202122// 假设我们有一个求长方形面积的函数function getArea(width, height) &#123; return width * height&#125;// 如果我们碰到的长方形的宽老是10const area1 = getArea(10, 20)const area2 = getArea(10, 30)const area3 = getArea(10, 40)// 我们可以使用闭包柯里化这个计算面积的函数function getArea(width) &#123; return height =&gt; &#123; return width * height &#125;&#125;const getTenWidthArea = getArea(10)// 之后碰到宽度为10的长方形就可以这样计算面积const area1 = getTenWidthArea(20)// 而且如果遇到宽度偶尔变化也可以轻松复用const getTwentyWidthArea = getArea(20) 使用闭包模拟私有方法在JavaScript中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法 下面举个例子： 123456789101112131415161718192021222324252627var Counter = (function() &#123; var privateCounter = 0; function changeBy(val) &#123; privateCounter += val; &#125; return &#123; increment: function() &#123; changeBy(1); &#125;, decrement: function() &#123; changeBy(-1); &#125;, value: function() &#123; return privateCounter; &#125; &#125;&#125;)();var Counter1 = makeCounter();var Counter2 = makeCounter();console.log(Counter1.value()); /* logs 0 */Counter1.increment();Counter1.increment();console.log(Counter1.value()); /* logs 2 */Counter1.decrement();console.log(Counter1.value()); /* logs 1 */console.log(Counter2.value()); /* logs 0 */ 上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式 两个计数器 Counter1 和 Counter2 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量 其他例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期 三、注意事项如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响 例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。 原因在于每个对象的创建，方法都会被重新赋值 1234567891011function MyObject(name, message) &#123; this.name = name.toString(); this.message = message.toString(); this.getName = function() &#123; return this.name; &#125;; this.getMessage = function() &#123; return this.message; &#125;;&#125; 上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下： 12345678910function MyObject(name, message) &#123; this.name = name.toString(); this.message = message.toString();&#125;MyObject.prototype.getName = function() &#123; return this.name;&#125;;MyObject.prototype.getMessage = function() &#123; return this.message;&#125;;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"深拷贝浅拷贝的区别？如何实现一个深拷贝？","slug":"js.深拷贝浅拷贝的区别？如何实现一个深拷贝？","date":"2022-08-05T01:58:06.039Z","updated":"2022-08-05T02:08:24.925Z","comments":true,"path":"2022/08/05/js.深拷贝浅拷贝的区别？如何实现一个深拷贝？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D%EF%BC%9F/","excerpt":"","text":"深拷贝浅拷贝的区别？如何实现一个深拷贝？ 一、数据类型存储JavaScript中存在两大数据类型： 基本类型 引用类型 基本类型数据保存在在栈内存中 引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中 二、浅拷贝浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝 如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址 即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址 下面简单实现一个浅拷贝 123456789function shallowClone(obj) &#123; const newObj = &#123;&#125;; for(let prop in obj) &#123; if(obj.hasOwnProperty(prop))&#123; newObj[prop] = obj[prop]; &#125; &#125; return newObj;&#125; 在JavaScript中，存在浅拷贝的现象有： Object.assign Array.prototype.slice(), Array.prototype.concat() 使用拓展运算符实现的复制 Object.assign123456789101112var obj = &#123; age: 18, nature: [&#x27;smart&#x27;, &#x27;good&#x27;], names: &#123; name1: &#x27;fx&#x27;, name2: &#x27;xka&#x27; &#125;, love: function () &#123; console.log(&#x27;fx is a great girl&#x27;) &#125;&#125;var newObj = Object.assign(&#123;&#125;, fxObj); slice()12345const fxArr = [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]const fxArrs = fxArr.slice(0)fxArrs[1] = &quot;love&quot;;console.log(fxArr) // [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]console.log(fxArrs) // [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;] concat()12345const fxArr = [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]const fxArrs = fxArr.concat()fxArrs[1] = &quot;love&quot;;console.log(fxArr) // [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]console.log(fxArrs) // [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;] 拓展运算符12345const fxArr = [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]const fxArrs = [...fxArr]fxArrs[1] = &quot;love&quot;;console.log(fxArr) // [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]console.log(fxArrs) // [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;] 三、深拷贝深拷贝开辟一个新的栈，两个对象属性完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性 常见的深拷贝方式有： _.cloneDeep() jQuery.extend() JSON.stringify() 手写循环递归 _.cloneDeep()12345678const _ = require(&#x27;lodash&#x27;);const obj1 = &#123; a: 1, b: &#123; f: &#123; g: 1 &#125; &#125;, c: [1, 2, 3]&#125;;const obj2 = _.cloneDeep(obj1);console.log(obj1.b.f === obj2.b.f);// false jQuery.extend()12345678const $ = require(&#x27;jquery&#x27;);const obj1 = &#123; a: 1, b: &#123; f: &#123; g: 1 &#125; &#125;, c: [1, 2, 3]&#125;;const obj2 = $.extend(true, &#123;&#125;, obj1);console.log(obj1.b.f === obj2.b.f); // false JSON.stringify()1const obj2=JSON.parse(JSON.stringify(obj1)); 但是这种方式存在弊端，会忽略undefined、symbol和函数 12345678const obj = &#123; name: &#x27;A&#x27;, name1: undefined, name3: function() &#123;&#125;, name4: Symbol(&#x27;A&#x27;)&#125;const obj2 = JSON.parse(JSON.stringify(obj));console.log(obj2); // &#123;name: &quot;A&quot;&#125; 循环递归12345678910111213141516171819function deepClone(obj, hash = new WeakMap()) &#123; if (obj === null) return obj; // 如果是null或者undefined我就不进行拷贝操作 if (obj instanceof Date) return new Date(obj); if (obj instanceof RegExp) return new RegExp(obj); // 可能是对象或者普通的值 如果是函数的话是不需要深拷贝 if (typeof obj !== &quot;object&quot;) return obj; // 是对象的话就要进行深拷贝 if (hash.get(obj)) return hash.get(obj); let cloneObj = new obj.constructor(); // 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身 hash.set(obj, cloneObj); for (let key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; // 实现一个递归拷贝 cloneObj[key] = deepClone(obj[key], hash); &#125; &#125; return cloneObj;&#125; 四、区别下面首先借助两张图，可以更加清晰看到浅拷贝与深拷贝的区别 从上图发现，浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样 浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象 1234567891011// 浅拷贝const obj1 = &#123; name : &#x27;init&#x27;, arr : [1,[2,3],4],&#125;;const obj3=shallowClone(obj1) // 一个浅拷贝方法obj3.name = &quot;update&quot;;obj3.arr[1] = [5,6,7] ; // 新旧对象还是共享同一块内存console.log(&#x27;obj1&#x27;,obj1) // obj1 &#123; name: &#x27;init&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;console.log(&#x27;obj3&#x27;,obj3) // obj3 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125; 但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象 1234567891011// 深拷贝const obj1 = &#123; name : &#x27;init&#x27;, arr : [1,[2,3],4],&#125;;const obj4=deepClone(obj1) // 一个深拷贝方法obj4.name = &quot;update&quot;;obj4.arr[1] = [5,6,7] ; // 新对象跟原对象不共享内存console.log(&#x27;obj1&#x27;,obj1) // obj1 &#123; name: &#x27;init&#x27;, arr: [ 1, [ 2, 3 ], 4 ] &#125;console.log(&#x27;obj4&#x27;,obj4) // obj4 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125; 小结前提为拷贝类型为引用类型的情况下： 浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址 深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"== 和 ===区别，分别在什么情况使用？","slug":"js.== 和 ===区别，分别在什么情况使用？","date":"2022-08-05T01:58:06.010Z","updated":"2022-08-05T02:07:25.348Z","comments":true,"path":"2022/08/05/js.== 和 ===区别，分别在什么情况使用？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.==%20%E5%92%8C%20===%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%88%86%E5%88%AB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%BD%BF%E7%94%A8%EF%BC%9F/","excerpt":"","text":"== 和 ===区别，分别在什么情况使用？ 一、等于操作符等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 true 前面文章，我们提到在JavaScript中存在隐式转换。等于操作符（==）在比较中会先进行类型转换，再确定操作数是否相等 遵循以下规则： 如果任一操作数是布尔值，则将其转换为数值再比较是否相等 1let result1 = (true == 1); // true 如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等 1let result1 = (&quot;55&quot; == 55); // true 如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法取得其原始值，再根据前面的规则进行比较 12let obj = &#123;valueOf:function()&#123;return 1&#125;&#125;let result1 = (obj == 1); // true null和undefined相等 1let result1 = (null == undefined ); // true 如果有任一操作数是 NaN ，则相等操作符返回 false 1let result1 = (NaN == NaN ); // false 如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true 123let obj1 = &#123;name:&quot;xxx&quot;&#125;let obj2 = &#123;name:&quot;xxx&quot;&#125;let result1 = (obj1 == obj2 ); // false 下面进一步做个小结： 两个都为简单类型，字符串和布尔值都会转换成数值，再比较 简单类型与引用类型比较，对象转化成其原始类型的值，再比较 两个都为引用类型，则比较它们是否指向同一个对象 null 和 undefined 相等 存在 NaN 则返回 false 二、全等操作符全等操作符由 3 个等于号（ === ）表示，只有两个操作数在不转换的前提下相等才返回 true。即类型相同，值也需相同 12let result1 = (&quot;55&quot; === 55); // false，不相等，因为数据类型不同let result2 = (55 === 55); // true，相等，因为数据类型相同值也相同 undefined 和 null 与自身严格相等 12let result1 = (null === null) //truelet result2 = (undefined === undefined) //true 三、区别相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换 12345let result1 = (&quot;55&quot; === 55); // false，不相等，因为数据类型不同let result2 = (55 === 55); // true，相等，因为数据类型相同值也相同null` 和 `undefined` 比较，相等操作符（==）为`true`，全等为`falselet result1 = (null == undefined ); // truelet result2 = (null === undefined); // false 小结相等运算符隐藏的类型转换，会带来一些违反直觉的结果 123456789101112&#x27;&#x27; == &#x27;0&#x27; // false0 == &#x27;&#x27; // true0 == &#x27;0&#x27; // truefalse == &#x27;false&#x27; // falsefalse == &#x27;0&#x27; // truefalse == undefined // falsefalse == null // falsenull == undefined // true&#x27; \\t\\r\\n&#x27; == 0 // true 但在比较null的情况的时候，我们一般使用相等操作符== 12345const obj = &#123;&#125;;if(obj.x == null)&#123; console.log(&quot;1&quot;); //执行&#125; 等同于下面写法 123if(obj.x === null || obj.x === undefined) &#123; ...&#125; 使用相等操作符（==）的写法明显更加简洁了 所以，除了在比较对象属性为null或者undefined的情况下，我们可以使用相等操作符（==），其他情况建议一律使用全等操作符（===）","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说谈谈 JavaScript 中的类型转换机制","slug":"js.谈谈 JavaScript 中的类型转换机制","date":"2022-08-05T01:58:05.982Z","updated":"2022-08-05T02:18:22.595Z","comments":true,"path":"2022/08/05/js.谈谈 JavaScript 中的类型转换机制/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%B0%88%E8%B0%88%20JavaScript%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9C%BA%E5%88%B6/","excerpt":"","text":"谈谈 JavaScript 中的类型转换机制 一、概述1JS`中有六种简单数据类型：`undefined`、`null`、`boolean`、`string`、`number`、`symbol`，以及引用类型：`object 但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型 1let x = y ? 1 : a; 上面代码中，x的值在编译阶段是无法获取的，只有等到程序运行时才能知道 虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型与预期不符合，就会触发类型转换机制 常见的类型转换有： 强制转换（显示转换） 自动转换（隐式转换） 二、显示转换显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有： Number() parseInt() String() Boolean() Number()将任意类型的值转化为数值 先给出类型转换规则： 实践一下： 12345678910111213141516171819202122232425Number(324) // 324// 字符串：如果可以被解析为数值，则转换为相应的数值Number(&#x27;324&#x27;) // 324// 字符串：如果不可以被解析为数值，返回 NaNNumber(&#x27;324abc&#x27;) // NaN// 空字符串转为0Number(&#x27;&#x27;) // 0// 布尔值：true 转成 1，false 转成 0Number(true) // 1Number(false) // 0// undefined：转成 NaNNumber(undefined) // NaN// null：转成0Number(null) // 0// 对象：通常转换成NaN(除了只包含单个数值的数组)Number(&#123;a: 1&#125;) // NaNNumber([1, 2, 3]) // NaNNumber([5]) // 5 从上面可以看到，Number转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为NaN parseInt()parseInt相比Number，就没那么严格了，parseInt函数逐个解析字符，遇到不能转换的字符就停下来 1parseInt(&#x27;32a3&#x27;) //32 String()可以将任意类型的值转化成字符串 给出转换规则图： 实践一下： 123456789101112131415161718// 数值：转为相应的字符串String(1) // &quot;1&quot;//字符串：转换后还是原来的值String(&quot;a&quot;) // &quot;a&quot;//布尔值：true转为字符串&quot;true&quot;，false转为字符串&quot;false&quot;String(true) // &quot;true&quot;//undefined：转为字符串&quot;undefined&quot;String(undefined) // &quot;undefined&quot;//null：转为字符串&quot;null&quot;String(null) // &quot;null&quot;//对象String(&#123;a: 1&#125;) // &quot;[object Object]&quot;String([1, 2, 3]) // &quot;1,2,3&quot; Boolean()可以将任意类型的值转为布尔值，转换规则如下： 实践一下： 12345678Boolean(undefined) // falseBoolean(null) // falseBoolean(0) // falseBoolean(NaN) // falseBoolean(&#x27;&#x27;) // falseBoolean(&#123;&#125;) // trueBoolean([]) // trueBoolean(new Boolean(false)) // true 三、隐式转换在隐式转换中，我们可能最大的疑惑是 ：何时发生隐式转换？ 我们这里可以归纳为两种情况发生隐式转换的场景： 比较运算（==、!=、&gt;、&lt;）、if、while需要布尔值地方 算术运算（+、-、*、/、%） 除了上面的场景，还要求运算符两边的操作数不是同一类型 自动转换为布尔值在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用Boolean函数 可以得出个小结： undefined null false +0 -0 NaN “” 除了上面几种会被转化成false，其他都换被转化成true 自动转换成字符串遇到预期为字符串的地方，就会将非字符串的值自动转为字符串 具体规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串 常发生在+运算中，一旦存在字符串，则会进行字符串拼接操作 12345678&#x27;5&#x27; + 1 // &#x27;51&#x27;&#x27;5&#x27; + true // &quot;5true&quot;&#x27;5&#x27; + false // &quot;5false&quot;&#x27;5&#x27; + &#123;&#125; // &quot;5[object Object]&quot;&#x27;5&#x27; + [] // &quot;5&quot;&#x27;5&#x27; + function ()&#123;&#125; // &quot;5function ()&#123;&#125;&quot;&#x27;5&#x27; + undefined // &quot;5undefined&quot;&#x27;5&#x27; + null // &quot;5null&quot; 自动转换成数值除了+有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值 1234567891011&#x27;5&#x27; - &#x27;2&#x27; // 3&#x27;5&#x27; * &#x27;2&#x27; // 10true - 1 // 0false - 1 // -1&#x27;1&#x27; - 1 // 0&#x27;5&#x27; * [] // 0false / &#x27;5&#x27; // 0&#x27;abc&#x27; - 1 // NaNnull + 1 // 1undefined + 1 // NaNnull`转为数值时，值为`0` 。`undefined`转为数值时，值为`NaN","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"Javscript字符串的常用方法有哪些？","slug":"js.Javascript字符串常用的方法有哪些_","date":"2022-08-05T01:58:05.950Z","updated":"2022-08-05T02:16:59.059Z","comments":true,"path":"2022/08/05/js.Javascript字符串常用的方法有哪些_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.Javascript%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B_/","excerpt":"","text":"Javscript字符串的常用方法有哪些？ 一、操作方法我们也可将字符串常用的操作方法归纳为增、删、改、查 增这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作 除了常用+以及$&#123;&#125;进行字符串拼接之外，还可通过concat concat用于将一个或多个字符串拼接成一个新字符串 1234let stringValue = &quot;hello &quot;;let result = stringValue.concat(&quot;world&quot;);console.log(result); // &quot;hello world&quot;console.log(stringValue); // &quot;hello&quot; 删这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作 常见的有： slice() substr() substring() 这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。 1234567let stringValue = &quot;hello world&quot;;console.log(stringValue.slice(3)); // &quot;lo world&quot;console.log(stringValue.substring(3)); // &quot;lo world&quot;console.log(stringValue.substr(3)); // &quot;lo world&quot;console.log(stringValue.slice(3, 7)); // &quot;lo w&quot;console.log(stringValue.substring(3,7)); // &quot;lo w&quot;console.log(stringValue.substr(3, 7)); // &quot;lo worl&quot; 改这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作 常见的有： trim()、trimLeft()、trimRight() repeat() padStart()、padEnd() toLowerCase()、 toUpperCase() trim()、trimLeft()、trimRight()删除前、后或前后所有空格符，再返回新的字符串 1234let stringValue = &quot; hello world &quot;;let trimmedStringValue = stringValue.trim();console.log(stringValue); // &quot; hello world &quot;console.log(trimmedStringValue); // &quot;hello world&quot; repeat()接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果 12let stringValue = &quot;na &quot;;let copyResult = stringValue.repeat(2) // na na padEnd()复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件 123let stringValue = &quot;foo&quot;;console.log(stringValue.padStart(6)); // &quot; foo&quot;console.log(stringValue.padStart(9, &quot;.&quot;)); // &quot;......foo&quot; toLowerCase()、 toUpperCase()大小写转化 123let stringValue = &quot;hello world&quot;;console.log(stringValue.toUpperCase()); // &quot;HELLO WORLD&quot;console.log(stringValue.toLowerCase()); // &quot;hello world&quot; 查除了通过索引的方式获取字符串的值，还可通过： chatAt() indexOf() startWith() includes() charAt()返回给定索引位置的字符，由传给方法的整数参数指定 12let message = &quot;abcde&quot;;console.log(message.charAt(2)); // &quot;c&quot; indexOf()从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ） 12let stringValue = &quot;hello world&quot;;console.log(stringValue.indexOf(&quot;o&quot;)); // 4 startWith()、includes()从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值 12345let message = &quot;foobarbaz&quot;;console.log(message.startsWith(&quot;foo&quot;)); // trueconsole.log(message.startsWith(&quot;bar&quot;)); // falseconsole.log(message.includes(&quot;bar&quot;)); // trueconsole.log(message.includes(&quot;qux&quot;)); // false 二、转换方法split把字符串按照指定的分割符，拆分成数组中的每一项 12let str = &quot;12+23+34&quot;let arr = str.split(&quot;+&quot;) // [12,23,34] 三、模板匹配方法针对正则表达式，字符串设计了几个方法： match() search() replace() match()接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，返回数组 1234let text = &quot;cat, bat, sat, fat&quot;;let pattern = /.at/;let matches = text.match(pattern);console.log(matches[0]); // &quot;cat&quot; search()接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1 123let text = &quot;cat, bat, sat, fat&quot;;let pos = text.search(/at/);console.log(pos); // 1 replace()接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数） 123let text = &quot;cat, bat, sat, fat&quot;;let result = text.replace(&quot;at&quot;, &quot;ond&quot;);console.log(result); // &quot;cond, bat, sat, fat&quot;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"Javscript数组的常用方法有哪些？","slug":"js.Javascript数组的常用方法有哪些？","date":"2022-08-05T01:58:05.915Z","updated":"2022-08-05T02:17:34.472Z","comments":true,"path":"2022/08/05/js.Javascript数组的常用方法有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.Javascript%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"Javscript数组的常用方法有哪些？ 数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会 下面对数组常用的操作方法做一个归纳 增下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响 push() unshift() splice() concat() push()push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度 123let colors = []; // 创建一个数组let count = colors.push(&quot;red&quot;, &quot;green&quot;); // 推入两项console.log(count) // 2 unshift()unshift()在数组开头添加任意多个值，然后返回新的数组长度 123let colors = new Array(); // 创建一个数组let count = colors.unshift(&quot;red&quot;, &quot;green&quot;); // 从数组开头推入两项alert(count); // 2 splice传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组 1234let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];let removed = colors.splice(1, 0, &quot;yellow&quot;, &quot;orange&quot;)console.log(colors) // red,yellow,orange,green,blueconsole.log(removed) // [] concat()首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组 1234let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];let colors2 = colors.concat(&quot;yellow&quot;, [&quot;black&quot;, &quot;brown&quot;]);console.log(colors); // [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]console.log(colors2); // [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;] 删下面三种都会影响原数组，最后一项不影响原数组： pop() shift() splice() slice() pop()pop() 方法用于删除数组的最后一项，同时减少数组的length 值，返回被删除的项 1234let colors = [&quot;red&quot;, &quot;green&quot;]let item = colors.pop(); // 取得最后一项console.log(item) // greenconsole.log(colors.length) // 1 shift()shift()方法用于删除数组的第一项，同时减少数组的length 值，返回被删除的项 1234let colors = [&quot;red&quot;, &quot;green&quot;]let item = colors.shift(); // 取得第一项console.log(item) // redconsole.log(colors.length) // 1 splice()传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组 1234let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];let removed = colors.splice(0,1); // 删除第一项console.log(colors); // green,blueconsole.log(removed); // red，只有一个元素的数组 slice()slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组 123456let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;];let colors2 = colors.slice(1);let colors3 = colors.slice(1, 4);console.log(colors) // red,green,blue,yellow,purpleconcole.log(colors2); // green,blue,yellow,purpleconcole.log(colors3); // green,blue,yellow 改即修改原来数组的内容，常用splice splice()传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响 1234let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];let removed = colors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;); // 插入两个值，删除一个元素console.log(colors); // red,red,purple,blueconsole.log(removed); // green，只有一个元素的数组 查即查找元素，返回元素坐标或者元素值 indexOf() includes() find() indexOf()返回要查找的元素在数组中的位置，如果没找到则返回-1 12let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];numbers.indexOf(4) // 3 includes()返回要查找的元素在数组中的位置，找到返回true，否则false 12let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];numbers.includes(4) // true find()返回第一个匹配的元素 1234567891011const people = [ &#123; name: &quot;Matt&quot;, age: 27 &#125;, &#123; name: &quot;Nicholas&quot;, age: 29 &#125;];people.find((element, index, array) =&gt; element.age &lt; 28) // // &#123;name: &quot;Matt&quot;, age: 27&#125; 二、排序方法数组有两个方法可以用来对元素重新排序： reverse() sort() reverse()顾名思义，将数组元素方向排列 123let values = [1, 2, 3, 4, 5];values.reverse();alert(values); // 5,4,3,2,1 sort()sort()方法接受一个比较函数，用于判断哪个值应该排在前面 123456789101112function compare(value1, value2) &#123; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125;&#125;let values = [0, 1, 5, 10, 15];values.sort(compare);alert(values); // 0,1,5,10,15 三、转换方法常见的转换方法有： join()join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串 123let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];alert(colors.join(&quot;,&quot;)); // red,green,bluealert(colors.join(&quot;||&quot;)); // red||green||blue 四、迭代方法常用来迭代数组的方法（都不改变原数组）有如下： some() every() forEach() filter() map() some()对数组每一项都运行传入的函数，如果有一项函数返回 true ，则这个方法返回 true 123let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];let someResult = numbers.every((item, index, array) =&gt; item &gt; 2);console.log(someResult) // true every()对数组每一项都运行传入的函数，如果对每一项函数都返回 true ，则这个方法返回 true 123let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];let everyResult = numbers.every((item, index, array) =&gt; item &gt; 2);console.log(everyResult) // false forEach()对数组每一项都运行传入的函数，没有返回值 1234let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];numbers.forEach((item, index, array) =&gt; &#123; // 执行某些操作&#125;); filter()对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回 123let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];let filterResult = numbers.filter((item, index, array) =&gt; item &gt; 2);console.log(filterResult); // 3,4,5,4,3 map()对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组 123let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];let mapResult = numbers.map((item, index, array) =&gt; item * 2);console.log(mapResult) // 2,4,6,8,10,8,6,4,2","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说JavaScript中的数据类型？区别？文末彩蛋！","slug":"js.说说javascript数据类型","date":"2022-08-05T01:58:05.853Z","updated":"2022-08-05T02:12:44.834Z","comments":true,"path":"2022/08/05/js.说说javascript数据类型/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"说说JavaScript中的数据类型？区别？文末彩蛋！ 前言在JavaScript中，我们可以分成两种类型： 基本类型 复杂类型 一、基本类型基本类型主要为以下6种： Number String Boolean Undefined null symbol Number数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x开头） 123let intNum = 55 // 10进制的55let num1 = 070 // 8进制的56let hexNum1 = 0xA //16进制的10 浮点类型则在数值汇总必须包含小数点，还可通过科学计数法表示 1234let floatNum1 = 1.1;let floatNum2 = 0.1;let floatNum3 = .1; // 有效，但不推荐let floatNum = 3.125e7; // 等于 31250000 在数值类型中，存在一个特殊数值NaN，意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误） 12console.log(0/0); // NaNconsole.log(-0/+0); // NaN UndefinedUndefined 类型只有一个值，就是特殊值 undefined。当使用 var或 let声明了变量但没有初始化时，就相当于给变量赋予了 undefined值 12let message;console.log(message == undefined); // true 包含undefined 值的变量跟未定义变量是有区别的 1234let message; // 这个变量被声明了，只是值为 undefinedconsole.log(message); // &quot;undefined&quot;console.log(age); // 没有声明过这个变量，报错 String字符串可以使用双引号（”）、单引号（’）或反引号（`）标示 123let firstName = &quot;John&quot;;let lastName = &#x27;Jacob&#x27;;let lastName = `Jingleheimerschmidt` 字符串是不可变的，意思是一旦创建，它们的值就不能变了 12let lang = &quot;Java&quot;;lang = lang + &quot;Script&quot;; // 先销毁再创建 Null1Null`类型同样只有一个值，即特殊值 `null 逻辑上讲， null 值表示一个空对象指针，这也是给typeof传一个 null 会返回 &quot;object&quot; 的原因 12let car = null;console.log(typeof car); // &quot;object&quot; undefined 值是由 null值派生而来 1console.log(null == undefined); // true 只要变量要保存对象，而当时又没有那个对象可保存，就可用 null来填充该变量 Boolean1Boolean`（布尔值）类型有两个字面值：`true` 和`false 通过Boolean可以将其他类型的数据转化成布尔值 规则如下： 12345数据类型 转换为 true 的值 转换为 false 的值 String 非空字符串 &quot;&quot; Number 非零数值（包括无穷值） 0 、 NaN Object 任意对象 nullUndefined N/A （不存在） undefined SymbolSymbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险 1234567let genericSymbol = Symbol();let otherGenericSymbol = Symbol();console.log(genericSymbol == otherGenericSymbol); // falselet fooSymbol = Symbol(&#x27;foo&#x27;);let otherFooSymbol = Symbol(&#x27;foo&#x27;);console.log(fooSymbol == otherFooSymbol); // false 二、引用类型复杂类型统称为Object，我们这里主要讲述下面三种： Object Array Function Object创建object常用方式为对象字面量表示法，属性名可以是字符串或数值 12345let person = &#123; name: &quot;Nicholas&quot;, &quot;age&quot;: 29, 5: true&#125;; ArrayJavaScript数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长 12let colors = [&quot;red&quot;, 2, &#123;age: 20 &#125;]colors.push(2) Function函数实际上是对象，每个函数都是 Function类型的实例，而 Function也有属性和方法，跟其他引用类型一样 函数存在三种常见的表达方式： 函数声明 1234// 函数声明function sum (num1, num2) &#123; return num1 + num2;&#125; 函数表达式 123let sum = function(num1, num2) &#123; return num1 + num2;&#125;; 箭头函数 函数声明和函数表达式两种方式 123let sum = (num1, num2) =&gt; &#123; return num1 + num2;&#125;; 其他引用类型除了上述说的三种之外，还包括Date、RegExp、Map、Set等…… 三、存储区别基本数据类型和引用数据类型存储在内存中的位置不同： 基本数据类型存储在栈中 引用类型的对象存储于堆中 当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值 下面来举个例子 基本类型1234let a = 10;let b = a; // 赋值操作b = 20;console.log(a); // 10值 a的值为一个基本类型，是存储在栈中，将a的值赋给b，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址 下图演示了基本类型赋值的过程： 引用类型1234var obj1 = &#123;&#125;var obj2 = obj1;obj2.name = &quot;Xxx&quot;;console.log(obj1.name); // xxx 引用类型数据存放在堆内存中，每个堆内存中有一个引用地址，该引用地址存放在栈中 obj1是一个引用类型，在赋值操作过程汇总，实际是将堆内存对象在栈内存的引用地址复制了一份给了obj2，实际上他们共同指向了同一个堆内存对象，所以更改obj2会对obj1产生影响 下图演示这个引用类型赋值过程 小结 声明变量时不同的内存地址分配： 简单类型的值存放在栈中，在栈中存放的是对应的值 引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址 不同的类型数据导致赋值变量时的不同： 简单类型赋值，是生成相同的值，两个对象对应不同的地址 复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"什么是单点登录？如何实现？","slug":"js.什么是单点登录？如何实现？","date":"2022-08-05T01:58:05.820Z","updated":"2022-08-05T02:08:46.800Z","comments":true,"path":"2022/08/05/js.什么是单点登录？如何实现？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/","excerpt":"","text":"什么是单点登录？如何实现？ 一、是什么单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一 SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统 SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过passport，子系统本身将不参与登录操作 当一个系统成功登录以后，passport将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被passport授权以后，会建立一个局部会话，在一定时间内可以无需再次向passport发起认证 上图有四个系统，分别是Application1、Application2、Application3、和SSO，当Application1、Application2、Application3需要登录时，将跳到SSO系统，SSO系统完成登录，其他的应用系统也就随之登录了 举个例子淘宝、天猫都属于阿里旗下，当用户登录淘宝后，再打开天猫，系统便自动帮用户登录了天猫，这种现象就属于单点登录 二、如何实现同域名下的单点登录cookie的domin属性设置为当前域的父域，并且父域的cookie会被子域所共享。path属性默认为web应用的上下文路径 利用 Cookie 的这个特点，没错，我们只需要将Cookie的domain属性设置为父域的域名（主域名），同时将 Cookie的path属性设置为根路径，将 Session ID（或 Token）保存到父域中。这样所有的子域应用就都可以访问到这个Cookie 不过这要求应用系统的域名需建立在一个共同的主域名之下，如 tieba.baidu.com 和 map.baidu.com，它们都建立在 baidu.com这个主域名之下，那么它们就可以通过这种方式来实现单点登录 不同域名下的单点登录(一)如果是不同域的情况下，Cookie是不共享的，这里我们可以部署一个认证中心，用于专门处理登录请求的独立的 Web服务 用户统一在认证中心进行登录，登录成功后，认证中心记录用户的登录状态，并将 token 写入 Cookie（注意这个 Cookie是认证中心的，应用系统是访问不到的） 应用系统检查当前请求有没有 Token，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心 由于这个操作会将认证中心的 Cookie 自动带过去，因此，认证中心能够根据 Cookie 知道用户是否已经登录过了 如果认证中心发现用户尚未登录，则返回登录页面，等待用户登录 如果发现用户已经登录过了，就不会让用户再次登录了，而是会跳转回目标 URL，并在跳转前生成一个 Token，拼接在目标URL 的后面，回传给目标应用系统 应用系统拿到 Token之后，还需要向认证中心确认下 Token 的合法性，防止用户伪造。确认无误后，应用系统记录用户的登录状态，并将 Token写入Cookie，然后给本次访问放行。（注意这个 Cookie 是当前应用系统的）当用户再次访问当前应用系统时，就会自动带上这个 Token，应用系统验证 Token 发现用户已登录，于是就不会有认证中心什么事了 此种实现方式相对复杂，支持跨域，扩展性好，是单点登录的标准做法 不同域名下的单点登录(二)可以选择将 Session ID （或 Token ）保存到浏览器的 LocalStorage中，让前端在每次向后端发送请求时，主动将LocalStorage的数据传递给服务端 这些都是由前端来控制的，后端需要做的仅仅是在用户登录成功后，将 Session ID（或 Token）放在响应体中传递给前端 单点登录完全可以在前端实现。前端拿到 Session ID（或 Token ）后，除了将它写入自己的 LocalStorage 中之外，还可以通过特殊手段将它写入多个其他域下的 LocalStorage 中 关键代码如下： 12345678910111213141516171819// 获取 tokenvar token = result.data.token; // 动态创建一个不可见的iframe，在iframe中加载一个跨域HTMLvar iframe = document.createElement(&quot;iframe&quot;);iframe.src = &quot;http://app1.com/localstorage.html&quot;;document.body.append(iframe);// 使用postMessage()方法将token传递给iframesetTimeout(function () &#123; iframe.contentWindow.postMessage(token, &quot;http://app1.com&quot;);&#125;, 4000);setTimeout(function () &#123; iframe.remove();&#125;, 6000); // 在这个iframe所加载的HTML中绑定一个事件监听器，当事件被触发时，把接收到的token数据写入localStoragewindow.addEventListener(&#x27;message&#x27;, function (event) &#123; localStorage.setItem(&#x27;token&#x27;, event.data)&#125;, false); 前端通过 iframe+postMessage() 方式，将同一份 Token 写入到了多个域下的 LocalStorage 中，前端每次在向后端发送请求之前，都会主动从 LocalStorage 中读取Token并在请求中携带，这样就实现了同一份Token 被多个域所共享 此种实现方式完全由前端控制，几乎不需要后端参与，同样支持跨域 三、流程单点登录的流程图如下所示： 用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 sso认证中心发现用户未登录，将用户引导至登录页面 用户输入用户名密码提交登录申请 sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌 sso认证中心带着令牌跳转会最初的请求地址（系统1） 系统1拿到令牌，去sso认证中心校验令牌是否有效 sso认证中心校验令牌，返回有效，注册系统1 系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源 用户访问系统2的受保护资源 系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数 sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌 系统2拿到令牌，去sso认证中心校验令牌是否有效 sso认证中心校验令牌，返回有效，注册系统2 系统2使用该令牌创建与用户的局部会话，返回受保护资源 用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话 用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心 全局会话与局部会话有如下约束关系： 局部会话存在，全局会话一定存在 全局会话存在，局部会话不一定存在 全局会话销毁，局部会话必须销毁","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"大文件上传如何做断点续传？","slug":"js.大文件上传如何做断点续传？","date":"2022-08-05T01:58:05.791Z","updated":"2022-08-05T02:07:31.659Z","comments":true,"path":"2022/08/05/js.大文件上传如何做断点续传？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A6%82%E4%BD%95%E5%81%9A%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%EF%BC%9F/","excerpt":"","text":"大文件上传如何做断点续传？ 一、是什么不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂 文件上传简单，文件变大就复杂 上传大文件时，以下几个变量会影响我们的用户体验 服务器处理数据的能力 请求超时 网络波动 上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等 为了解决上述问题，我们需要对大文件上传单独处理 这里涉及到分片上传及断点续传两个概念 分片上传分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传 如下图 上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件 大致流程如下： 将需要上传的文件按照一定的分割规则，分割成相同大小的数据块； 初始化一个分片上传任务，返回本次分片上传唯一标识； 按照一定的策略（串行或并行）发送各个分片数据块； 发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件 断点续传断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分 每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度 一般实现方式有两种： 服务器端返回，告知从哪开始 浏览器端自行处理 上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可 如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可 二、实现思路整体思路比较简单，拿到文件，保存文件唯一性标识，切割文件，分段上传，每次上传一段，根据唯一性标识判断文件上传进度，直到文件的全部片段上传完毕 下面的内容都是伪代码 读取文件内容： 1234const input = document.querySelector(&#x27;input&#x27;);input.addEventListener(&#x27;change&#x27;, function() &#123; var file = this.files[0];&#125;); 可以使用md5实现文件的唯一性 1const md5code = md5(file); 然后开始对文件进行分割 123456var reader = new FileReader();reader.readAsArrayBuffer(file);reader.addEventListener(&quot;load&quot;, function(e) &#123; //每10M切割一段,这里只做一个切割演示，实际切割需要循环切割， var slice = e.target.result.slice(0, 10*1024*1024);&#125;); h5上传一个（一片） 123456789101112131415161718const formdata = new FormData();formdata.append(&#x27;0&#x27;, slice);//这里是有一个坑的，部分设备无法获取文件名称，和文件类型，这个在最后给出解决方案formdata.append(&#x27;filename&#x27;, file.filename);var xhr = new XMLHttpRequest();xhr.addEventListener(&#x27;load&#x27;, function() &#123; //xhr.responseText&#125;);xhr.open(&#x27;POST&#x27;, &#x27;&#x27;);xhr.send(formdata);xhr.addEventListener(&#x27;progress&#x27;, updateProgress);xhr.upload.addEventListener(&#x27;progress&#x27;, updateProgress);function updateProgress(event) &#123; if (event.lengthComputable) &#123; //进度条 &#125;&#125; 这里给出常见的图片和视频的文件类型判断 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495function checkFileType(type, file, back) &#123;/*** type png jpg mp4 ...* file input.change=&gt; this.files[0]* back callback(boolean)*/ var args = arguments; if (args.length != 3) &#123; back(0); &#125; var type = args[0]; // type = &#x27;(png|jpg)&#x27; , &#x27;png&#x27; var file = args[1]; var back = typeof args[2] == &#x27;function&#x27; ? args[2] : function() &#123;&#125;; if (file.type == &#x27;&#x27;) &#123; // 如果系统无法获取文件类型，则读取二进制流，对二进制进行解析文件类型 var imgType = [ &#x27;ff d8 ff&#x27;, //jpg &#x27;89 50 4e&#x27;, //png &#x27;0 0 0 14 66 74 79 70 69 73 6F 6D&#x27;, //mp4 &#x27;0 0 0 18 66 74 79 70 33 67 70 35&#x27;, //mp4 &#x27;0 0 0 0 66 74 79 70 33 67 70 35&#x27;, //mp4 &#x27;0 0 0 0 66 74 79 70 4D 53 4E 56&#x27;, //mp4 &#x27;0 0 0 0 66 74 79 70 69 73 6F 6D&#x27;, //mp4 &#x27;0 0 0 18 66 74 79 70 6D 70 34 32&#x27;, //m4v &#x27;0 0 0 0 66 74 79 70 6D 70 34 32&#x27;, //m4v &#x27;0 0 0 14 66 74 79 70 71 74 20 20&#x27;, //mov &#x27;0 0 0 0 66 74 79 70 71 74 20 20&#x27;, //mov &#x27;0 0 0 0 6D 6F 6F 76&#x27;, //mov &#x27;4F 67 67 53 0 02&#x27;, //ogg &#x27;1A 45 DF A3&#x27;, //ogg &#x27;52 49 46 46 x x x x 41 56 49 20&#x27;, //avi (RIFF fileSize fileType LIST)(52 49 46 46,DC 6C 57 09,41 56 49 20,4C 49 53 54) ]; var typeName = [ &#x27;jpg&#x27;, &#x27;png&#x27;, &#x27;mp4&#x27;, &#x27;mp4&#x27;, &#x27;mp4&#x27;, &#x27;mp4&#x27;, &#x27;mp4&#x27;, &#x27;m4v&#x27;, &#x27;m4v&#x27;, &#x27;mov&#x27;, &#x27;mov&#x27;, &#x27;mov&#x27;, &#x27;ogg&#x27;, &#x27;ogg&#x27;, &#x27;avi&#x27;, ]; var sliceSize = /png|jpg|jpeg/.test(type) ? 3 : 12; var reader = new FileReader(); reader.readAsArrayBuffer(file); reader.addEventListener(&quot;load&quot;, function(e) &#123; var slice = e.target.result.slice(0, sliceSize); reader = null; if (slice &amp;&amp; slice.byteLength == sliceSize) &#123; var view = new Uint8Array(slice); var arr = []; view.forEach(function(v) &#123; arr.push(v.toString(16)); &#125;); view = null; var idx = arr.join(&#x27; &#x27;).indexOf(imgType); if (idx &gt; -1) &#123; back(typeName[idx]); &#125; else &#123; arr = arr.map(function(v) &#123; if (i &gt; 3 &amp;&amp; i &lt; 8) &#123; return &#x27;x&#x27;; &#125; return v; &#125;); var idx = arr.join(&#x27; &#x27;).indexOf(imgType); if (idx &gt; -1) &#123; back(typeName[idx]); &#125; else &#123; back(false); &#125; &#125; &#125; else &#123; back(false); &#125; &#125;); &#125; else &#123; var type = file.name.match(/\\.(\\w+)$/)[1]; back(type); &#125;&#125; 调用方法如下 1234checkFileType(&#x27;(mov|mp4|avi)&#x27;,file,function(fileType)&#123; // fileType = mp4, // 如果file的类型不在枚举之列，则返回false&#125;); 上面上传文件的一步，可以改成： 1formdata.append(&#x27;filename&#x27;, md5code+&#x27;.&#x27;+fileType); 有了切割上传后，也就有了文件唯一标识信息，断点续传变成了后台的一个小小的逻辑判断 后端主要做的内容为：根据前端传给后台的md5值，到服务器磁盘查找是否有之前未完成的文件合并信息（也就是未完成的半成品文件切片），取到之后根据上传切片的数量，返回数据告诉前端开始从第几节上传 如果想要暂停切片的上传，可以使用XMLHttpRequest的 abort方法 三、使用场景 大文件加速上传：当文件大小超过预期大小时，使用分片上传可实现并行上传多个 Part， 以加快上传速度 网络环境较差：建议使用分片上传。当出现上传失败的时候，仅需重传失败的Part 流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见 小结当前的伪代码，只是提供一个简单的思路，想要把事情做到极致，我们还需要考虑到更多场景，比如 切片上传失败怎么办 上传过程中刷新页面怎么办 如何进行并行上传 切片什么时候按数量切，什么时候按大小切 如何结合 Web Work 处理大文件上传 如何实现秒传 人生又何尝不是如此，极致的人生体验有无限可能，越是后面才发现越是精彩 _ 参考文献 https://segmentfault.com/a/1190000009448892","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript如何实现上拉加载，下拉刷新？","slug":"js.JavaScript如何实现上拉加载，下拉刷新？","date":"2022-08-05T01:58:05.757Z","updated":"2022-08-05T02:17:42.144Z","comments":true,"path":"2022/08/05/js.JavaScript如何实现上拉加载，下拉刷新？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.JavaScript%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%EF%BC%9F/","excerpt":"","text":"JavaScript如何实现上拉加载，下拉刷新？ 一、前言下拉刷新和上拉加载这两种交互方式通常出现在移动端中 本质上等同于PC网页中的分页，只是交互形式不同 开源社区也有很多优秀的解决方案，如iscroll、better-scroll、pulltorefresh.js库等等 这些第三方库使用起来非常便捷 我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用 二、实现原理上拉加载及下拉刷新都依赖于用户交互 最重要的是要理解在什么场景，什么时机下触发交互动作 上拉加载首先可以看一张图 上拉加载的本质是页面触底，或者快要触底时的动作 判断页面触底我们需要先了解一下下面几个属性 scrollTop：滚动视窗的高度距离window顶部的距离，它会随着往上滚动而不断增加，初始值是0，它是一个变化的值 clientHeight:它是一个定值，表示屏幕可视区域的高度； scrollHeight：页面不能滚动时是不存在的，body长度超过window时才会出现，所表示body所有元素的长度 综上我们得出一个触底公式： 1scrollTop + clientHeight &gt;= scrollHeight 简单实现 123456789let clientHeight = document.documentElement.clientHeight; //浏览器高度let scrollHeight = document.body.scrollHeight;let scrollTop = document.documentElement.scrollTop; let distance = 50; //距离视窗还用50的时候，开始触发；if ((scrollTop + clientHeight) &gt;= (scrollHeight - distance)) &#123; console.log(&quot;开始加载数据&quot;);&#125; 下拉刷新下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作 关于下拉刷新的原生实现，主要分成三步： 监听原生touchstart事件，记录其初始位置的值，e.touches[0].pageY； 监听原生touchmove事件，记录并计算当前滑动的位置值与初始位置值的差值，大于0表示向下拉动，并借助CSS3的translateY属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值； 监听原生touchend事件，若此时元素滑动达到最大值，则触发callback，同时将translateY重设为0，元素回到初始位置 举个例子： Html结构如下： 1234567891011&lt;main&gt; &lt;p class=&quot;refreshText&quot;&gt;&lt;/p&gt; &lt;ul id=&quot;refreshContainer&quot;&gt; &lt;li&gt;111&lt;/li&gt; &lt;li&gt;222&lt;/li&gt; &lt;li&gt;333&lt;/li&gt; &lt;li&gt;444&lt;/li&gt; &lt;li&gt;555&lt;/li&gt; ... &lt;/ul&gt;&lt;/main&gt; 监听touchstart事件，记录初始的值 12345678910var _element = document.getElementById(&#x27;refreshContainer&#x27;), _refreshText = document.querySelector(&#x27;.refreshText&#x27;), _startPos = 0, // 初始的值 _transitionHeight = 0; // 移动的距离_element.addEventListener(&#x27;touchstart&#x27;, function(e) &#123; _startPos = e.touches[0].pageY; // 记录初始位置 _element.style.position = &#x27;relative&#x27;; _element.style.transition = &#x27;transform 0s&#x27;;&#125;, false); 监听touchmove移动事件，记录滑动差值 12345678910111213_element.addEventListener(&#x27;touchmove&#x27;, function(e) &#123; // e.touches[0].pageY 当前位置 _transitionHeight = e.touches[0].pageY - _startPos; // 记录差值 if (_transitionHeight &gt; 0 &amp;&amp; _transitionHeight &lt; 60) &#123; _refreshText.innerText = &#x27;下拉刷新&#x27;; _element.style.transform = &#x27;translateY(&#x27;+_transitionHeight+&#x27;px)&#x27;; if (_transitionHeight &gt; 55) &#123; _refreshText.innerText = &#x27;释放更新&#x27;; &#125; &#125; &#125;, false); 最后，就是监听touchend离开的事件 1234567_element.addEventListener(&#x27;touchend&#x27;, function(e) &#123; _element.style.transition = &#x27;transform 0.5s ease 1s&#x27;; _element.style.transform = &#x27;translateY(0px)&#x27;; _refreshText.innerText = &#x27;更新中...&#x27;; // todo...&#125;, false); 从上面可以看到，在下拉到松手的过程中，经历了三个阶段： 当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作 下拉到一定值时，显示松手释放后的操作提示 下拉到达设定最大值松手时，执行回调，提示正在进行更新操作 三、案例在实际开发中，我们更多的是使用第三方库，下面以better-scroll进行举例： HTML结构 123456789&lt;div id=&quot;position-wrapper&quot;&gt; &lt;div&gt; &lt;p class=&quot;refresh&quot;&gt;下拉刷新&lt;/p&gt; &lt;div class=&quot;position-list&quot;&gt; &lt;!--列表内容--&gt; &lt;/div&gt; &lt;p class=&quot;more&quot;&gt;查看更多&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 实例化上拉下拉插件，通过use来注册插件 12345import BScroll from &quot;@better-scroll/core&quot;;import PullDown from &quot;@better-scroll/pull-down&quot;;import PullUp from &#x27;@better-scroll/pull-up&#x27;;BScroll.use(PullDown);BScroll.use(PullUp); 实例化BetterScroll，并传入相关的参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849let pageNo = 1,pageSize = 10,dataList = [],isMore = true; var scroll= new BScroll(&quot;#position-wrapper&quot;,&#123; scrollY:true,//垂直方向滚动 click:true,//默认会阻止浏览器的原生click事件，如果需要点击，这里要设为true pullUpLoad:true,//上拉加载更多 pullDownRefresh:&#123; threshold:50,//触发pullingDown事件的位置 stop:0//下拉回弹后停留的位置 &#125;&#125;);//监听下拉刷新scroll.on(&quot;pullingDown&quot;,pullingDownHandler);//监测实时滚动scroll.on(&quot;scroll&quot;,scrollHandler);//上拉加载更多scroll.on(&quot;pullingUp&quot;,pullingUpHandler);async function pullingDownHandler()&#123; dataList=[]; pageNo=1; isMore=true; $(&quot;.more&quot;).text(&quot;查看更多&quot;); await getlist();//请求数据 scroll.finishPullDown();//每次下拉结束后，需要执行这个操作 scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作&#125;async function pullingUpHandler()&#123; if(!isMore)&#123; $(&quot;.more&quot;).text(&quot;没有更多数据了&quot;); scroll.finishPullUp();//每次上拉结束后，需要执行这个操作 return; &#125; pageNo++; await this.getlist();//请求数据 scroll.finishPullUp();//每次上拉结束后，需要执行这个操作 scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作 &#125;function scrollHandler()&#123; if(this.y&gt;50) $(&#x27;.refresh&#x27;).text(&quot;松手开始加载&quot;); else $(&#x27;.refresh&#x27;).text(&quot;下拉刷新&quot;);&#125;function getlist()&#123; //返回的数据 let result=....; dataList=dataList.concat(result); //判断是否已加载完 if(result.length&lt;pageSize) isMore=false; //将dataList渲染到html内容中&#125; 注意点： 使用better-scroll实现下拉刷新、上拉加载时要注意以下几点： wrapper里必须只有一个子元素 子元素的高度要比wrapper要高 使用的时候，要确定DOM元素是否已经生成，必须要等到DOM渲染完成后，再new BScroll() 滚动区域的DOM元素结构有变化后，需要执行刷新 refresh() 上拉或者下拉，结束后，需要执行finishPullUp()或者finishPullDown()，否则将不会执行下次操作 better-scroll，默认会阻止浏览器的原生click事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置click:true 小结下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节 参考文献 https://segmentfault.com/a/1190000014423308 https://github.com/ustbhuangyi/better-scroll","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript如何判断一个元素是否在可视区域中？","slug":"js.JavaScript如何判断一个元素是否在可视区域中？","date":"2022-08-05T01:58:05.725Z","updated":"2022-08-05T02:17:59.338Z","comments":true,"path":"2022/08/05/js.JavaScript如何判断一个元素是否在可视区域中？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.JavaScript%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%9C%A8%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%9F%9F%E4%B8%AD%EF%BC%9F/","excerpt":"","text":"JavaScript如何判断一个元素是否在可视区域中？ 一、用途可视区域即我们浏览网页的设备肉眼可见的区域，如下图 在日常开发中，我们经常需要判断目标元素是否在视窗之内或者和视窗的距离小于一个值（例如 100 px），从而实现一些常用的功能，例如： 图片的懒加载 列表的无限滚动 计算广告元素的曝光情况 可点击链接的预加载 二、实现方式判断一个元素是否在可视区域，我们常用的有三种办法： offsetTop、scrollTop getBoundingClientRect Intersection Observer offsetTop、scrollTopoffsetTop，元素的上外边框至包含元素的上内边框之间的像素距离，其他offset属性如下图所示： 下面再来了解下clientWidth、clientHeight： clientWidth：元素内容区宽度加上左右内边距宽度，即clientWidth = content + padding clientHeight：元素内容区高度加上上下内边距高度，即clientHeight = content + padding 这里可以看到client元素都不包括外边距 最后，关于scroll系列的属性如下： scrollWidth 和 scrollHeight 主要用于确定元素内容的实际大小 scrollLeft 和 scrollTop 属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置 垂直滚动 scrollTop &gt; 0 水平滚动 scrollLeft &gt; 0 将元素的 scrollLeft 和 scrollTop 设置为 0，可以重置元素的滚动位置 注意 上述属性都是只读的，每次访问都要重新开始 下面再看看如何实现判断： 公式如下： 1el.offsetTop - document.documentElement.scrollTop &lt;= viewPortHeight 代码实现： 12345678function isInViewPortOfOne (el) &#123; // viewPortHeight 兼容所有浏览器写法 const viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight const offsetTop = el.offsetTop const scrollTop = document.documentElement.scrollTop const top = offsetTop - scrollTop return top &lt;= viewPortHeight&#125; getBoundingClientRect返回值是一个 DOMRect对象，拥有left, top, right, bottom, x, y, width, 和 height属性 123456789101112const target = document.querySelector(&#x27;.target&#x27;);const clientRect = target.getBoundingClientRect();console.log(clientRect);// &#123;// bottom: 556.21875,// height: 393.59375,// left: 333,// right: 1017,// top: 162.625,// width: 684// &#125; 属性对应的关系图如下所示： 当页面发生滚动的时候，top与left属性值都会随之改变 如果一个元素在视窗之内的话，那么它一定满足下面四个条件： top 大于等于 0 left 大于等于 0 bottom 小于等于视窗高度 right 小于等于视窗宽度 实现代码如下： 1234567891011121314151617function isInViewPort(element) &#123; const viewWidth = window.innerWidth || document.documentElement.clientWidth; const viewHeight = window.innerHeight || document.documentElement.clientHeight; const &#123; top, right, bottom, left, &#125; = element.getBoundingClientRect(); return ( top &gt;= 0 &amp;&amp; left &gt;= 0 &amp;&amp; right &lt;= viewWidth &amp;&amp; bottom &lt;= viewHeight );&#125; Intersection ObserverIntersection Observer 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比getBoundingClientRect会好很多 使用步骤主要分为两步：创建观察者和传入被观察者 创建观察者12345678910const options = &#123; // 表示重叠面积占被观察者的比例，从 0 - 1 取值， // 1 表示完全被包含 threshold: 1.0, root:document.querySelector(&#x27;#scrollArea&#x27;) // 必须是目标元素的父级元素&#125;;const callback = (entries, observer) =&gt; &#123; ....&#125;const observer = new IntersectionObserver(callback, options); 通过new IntersectionObserver创建了观察者 observer，传入的参数 callback 在重叠比例超过 threshold 时会被执行` 关于callback回调函数常用属性如下： 1234567891011// 上段代码中被省略的 callbackconst callback = function(entries, observer) &#123; entries.forEach(entry =&gt; &#123; entry.time; // 触发的时间 entry.rootBounds; // 根元素的位置矩形，这种情况下为视窗位置 entry.boundingClientRect; // 被观察者的位置举行 entry.intersectionRect; // 重叠区域的位置矩形 entry.intersectionRatio; // 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算） entry.target; // 被观察者 &#125;);&#125;; 传入被观察者通过 observer.observe(target) 这一行代码即可简单的注册被观察者 12const target = document.querySelector(&#x27;.target&#x27;);observer.observe(target); 三、案例分析实现：创建了一个十万个节点的长列表，当节点滚入到视窗中时，背景就会从红色变为黄色 Html结构如下： 1&lt;div class=&quot;container&quot;&gt;&lt;/div&gt; css样式如下： 12345678910.container &#123; display: flex; flex-wrap: wrap;&#125;.target &#123; margin: 5px; width: 20px; height: 20px; background: red;&#125; 往container插入1000个元素 123456789const $container = $(&quot;.container&quot;);// 插入 100000 个 &lt;div class=&quot;target&quot;&gt;&lt;/div&gt;function createTargets() &#123; const htmlString = new Array(100000) .fill(&#x27;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&#x27;) .join(&quot;&quot;); $container.html(htmlString);&#125; 这里，首先使用getBoundingClientRect方法进行判断元素是否在可视区域 12345678function isInViewPort(element) &#123; const viewWidth = window.innerWidth || document.documentElement.clientWidth; const viewHeight = window.innerHeight || document.documentElement.clientHeight; const &#123; top, right, bottom, left &#125; = element.getBoundingClientRect(); return top &gt;= 0 &amp;&amp; left &gt;= 0 &amp;&amp; right &lt;= viewWidth &amp;&amp; bottom &lt;= viewHeight;&#125; 然后开始监听scroll事件，判断页面上哪些元素在可视区域中，如果在可视区域中则将背景颜色设置为yellow 12345678$(window).on(&quot;scroll&quot;, () =&gt; &#123; console.log(&quot;scroll !&quot;); $targets.each((index, element) =&gt; &#123; if (isInViewPort(element)) &#123; $(element).css(&quot;background-color&quot;, &quot;yellow&quot;); &#125; &#125;);&#125;); 通过上述方式，可以看到可视区域颜色会变成黄色了，但是可以明显看到有卡顿的现象，原因在于我们绑定了scroll事件，scroll事件伴随了大量的计算，会造成资源方面的浪费 下面通过Intersection Observer的形式同样实现相同的功能 首先创建一个观察者 1const observer = new IntersectionObserver(getYellow, &#123; threshold: 1.0 &#125;); getYellow回调函数实现对背景颜色改变，如下： 12345function getYellow(entries, observer) &#123; entries.forEach(entry =&gt; &#123; $(entry.target).css(&quot;background-color&quot;, &quot;yellow&quot;); &#125;);&#125; 最后传入观察者，即.target元素 123$targets.each((index, element) =&gt; &#123; observer.observe(element);&#125;); 可以看到功能同样完成，并且页面不会出现卡顿的情况 参考文献 https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说函数节流和防抖？有什么区别？如何实现？","slug":"js.说说函数节流和防抖？有什么区别？如何实现？","date":"2022-08-05T01:58:05.695Z","updated":"2022-08-05T02:11:00.216Z","comments":true,"path":"2022/08/05/js.说说函数节流和防抖？有什么区别？如何实现？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/","excerpt":"","text":"说说函数节流和防抖？有什么区别？如何实现？ 一、是什么本质上是优化高频率执行代码的一种手段 如：浏览器的 resize、scroll、keypress、mousemove 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能 为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用throttle（节流）和debounce（防抖）的方式来减少调用频率 定义 节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次执行 防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时 一个经典的比喻: 想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应 假设电梯有两种运行策略 debounce 和 throttle，超时设定为15秒，不考虑容量限制 电梯第一个人进来后，15秒后准时运送一次，这是节流 电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖 代码实现节流完成节流可以使用时间戳与定时器的写法 使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行 12345678910function throttled1(fn, delay = 500) &#123; let oldtime = Date.now() return function (...args) &#123; let newtime = Date.now() if (newtime - oldtime &gt;= delay) &#123; fn.apply(null, args) oldtime = Date.now() &#125; &#125;&#125; 使用定时器写法，delay毫秒后第一次执行，第二次事件停止触发后依然会再一次执行 1234567891011function throttled2(fn, delay = 500) &#123; let timer = null return function (...args) &#123; if (!timer) &#123; timer = setTimeout(() =&gt; &#123; fn.apply(this, args) timer = null &#125;, delay); &#125; &#125;&#125; 可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下 1234567891011121314151617function throttled(fn, delay) &#123; let timer = null let starttime = Date.now() return function () &#123; let curTime = Date.now() // 当前时间 let remaining = delay - (curTime - starttime) // 从上一次到现在，还剩下多少多余时间 let context = this let args = arguments clearTimeout(timer) if (remaining &lt;= 0) &#123; fn.apply(context, args) starttime = Date.now() &#125; else &#123; timer = setTimeout(fn, remaining); &#125; &#125;&#125; 防抖简单版本的实现 12345678910111213function debounce(func, wait) &#123; let timeout; return function () &#123; let context = this; // 保存this指向 let args = arguments; // 拿到event对象 clearTimeout(timeout) timeout = setTimeout(function()&#123; func.apply(context, args) &#125;, wait); &#125;&#125; 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下： 12345678910111213141516171819202122232425function debounce(func, wait, immediate) &#123; let timeout; return function () &#123; let context = this; let args = arguments; if (timeout) clearTimeout(timeout); // timeout 不为null if (immediate) &#123; let callNow = !timeout; // 第一次会立即执行，以后只有事件执行后才会再次触发 timeout = setTimeout(function () &#123; timeout = null; &#125;, wait) if (callNow) &#123; func.apply(context, args) &#125; &#125; else &#123; timeout = setTimeout(function () &#123; func.apply(context, args) &#125;, wait); &#125; &#125;&#125; 二、区别相同点： 都可以通过使用 setTimeout 实现 目的都是，降低回调执行频率。节省计算资源 不同点： 函数防抖，在一段连续操作结束后，处理回调，利用clearTimeout和 setTimeout实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能 函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次 例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次 如下图所示： 三、应用场景防抖在连续的事件，只需触发一次回调的场景有： 搜索框搜索输入。只需用户最后一次输入完，再发送请求 手机号、邮箱验证输入检测 窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。 节流在间隔一段时间执行一次回调的场景有： 滚动加载，加载更多或滚到底部监听 搜索框，搜索联想功能","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说 JavaScript 数字精度丢失的问题，解决方案？","slug":"js.说说 JavaScript 数字精度丢失的问题，解决方案？","date":"2022-08-05T01:58:05.663Z","updated":"2022-08-05T02:10:16.443Z","comments":true,"path":"2022/08/05/js.说说 JavaScript 数字精度丢失的问题，解决方案？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%20JavaScript%20%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9F/","excerpt":"","text":"说说 JavaScript 数字精度丢失的问题，解决方案？ 一、场景复现一个经典的面试题 10.1 + 0.2 === 0.3 // false 为什么是false呢? 先看下面这个比喻 比如一个数 1÷3=0.33333333…… 这是一个除不尽的运算，3会一直无限循环，数学可以表示，但是计算机要存储，方便下次再使用，但0.333333…… 这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，这么存储后再取出时自然就出现精度丢失问题 二、浮点数“浮点数”是一种表示数字的标准，整数也可以用浮点数的格式来存储 我们也可以理解成，浮点数就是小数 在JavaScript中，现在主流的数值类型是Number，而Number采用的是IEEE754规范中64位双精度浮点数编码 这样的存储结构优点是可以归一化处理整数和小数，节省存储空间 对于一个整数，可以很轻易转化成十进制或者二进制。但是对于一个浮点数来说，因为小数点的存在，小数点的位置不是固定的。解决思路就是使用科学计数法，这样小数点位置就固定了 而计算机只能用二进制（0或1）表示，二进制转换为科学记数法的公式如下： 其中，a的值为0或者1，e为小数点移动的位置 举个例子： 27.0转化成二进制为11011.0 ，科学计数法表示为： 前面讲到，javaScript存储方式是双精度浮点数，其长度为8个字节，即64位比特 64位比特又可分为三个部分： 符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数 指数位E：中间的 11 位存储指数（exponent），用来表示次方数，可以为正负数。在双精度浮点数中，指数的固定偏移量为1023 尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零 如下图所示： 举个例子： 27.5 转换为二进制11011.1 11011.1转换为科学记数法 符号位为0(正数)，指数位为4+，1023+4，即1027 因为它是十进制的需要转换为二进制，即 10000000011，小数部分为10111，补够52位即：1011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000` 所以27.5存储为计算机的二进制标准形式（符号位+指数位+小数部分 (阶数)），既下面所示 0+10000000011+011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000` 二、问题分析再回到问题上 10.1 + 0.2 === 0.3 // false 通过上面的学习，我们知道，在javascript语言中，0.1 和 0.2 都转化成二进制后再进行运算 123456// 0.1 和 0.2 都转化成二进制后再进行运算0.00011001100110011001100110011001100110011001100110011010 +0.0011001100110011001100110011001100110011001100110011010 =0.0100110011001100110011001100110011001100110011001100111// 转成十进制正好是 0.30000000000000004 所以输出false 再来一个问题，那么为什么x=0.1得到0.1？ 主要是存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度 它的长度是 16，所以可以使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理 12.10000000000000000555.toPrecision(16)// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1 但看到的 0.1 实际上并不是 0.1。不信你可用更高的精度试试： 10.1.toPrecision(21) = 0.100000000000000005551 如果整数大于 9007199254740992 会出现什么情况呢？ 由于指数位最大值是1023，所以最大可以表示的整数是 2^1024 - 1，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 2^1024 开始就变成了 Infinity 12345&gt; Math.pow(2, 1023)8.98846567431158e+307&gt; Math.pow(2, 1024)Infinity 那么对于 (2^53, 2^63) 之间的数会出现什么情况呢？ (2^53, 2^54) 之间的数会两个选一个，只能精确表示偶数 (2^54, 2^55) 之间的数会四个选一个，只能精确表示4个倍数 … 依次跳过更多2的倍数 要想解决大数的问题你可以引用第三方库 bignumber.js，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生差很多 小结计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则{符号位+(指数位+指数偏移量的二进制)+小数部分}存储二进制的科学记数法 因为存储时有位数限制（64位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差 三、解决方案理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果 当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示，如下： 1parseFloat(1.4000000000000001.toPrecision(12)) === 1.4 // True 封装成方法就是： 123function strip(num, precision = 12) &#123; return +parseFloat(num.toPrecision(precision));&#125; 对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算。以加法为例： 123456789/** * 精确加法 */function add(num1, num2) &#123; const num1Digits = (num1.toString().split(&#x27;.&#x27;)[1] || &#x27;&#x27;).length; const num2Digits = (num2.toString().split(&#x27;.&#x27;)[1] || &#x27;&#x27;).length; const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits)); return (num1 * baseNum + num2 * baseNum) / baseNum;&#125; 最后还可以使用第三方库，如Math.js、BigDecimal.js","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript中如何实现函数缓存？有哪些应用场景？！","slug":"js.JavaScript中如何实现函数缓存？有哪些应用场景？","date":"2022-08-05T01:58:05.633Z","updated":"2022-08-05T02:17:10.668Z","comments":true,"path":"2022/08/05/js.JavaScript中如何实现函数缓存？有哪些应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.JavaScript%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E7%BC%93%E5%AD%98%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"JavaScript中如何实现函数缓存？有哪些应用场景？ 一、是什么函数缓存，就是将函数运算过的结果进行缓存 本质上就是用空间（缓存存储）换时间（计算过程） 常用于缓存数据计算结果和缓存对象 1234const add = (a,b) =&gt; a+b;const calc = memoize(add); // 函数缓存calc(10,20);// 30calc(10,20);// 30 缓存 缓存只是一个临时的数据存储，它保存数据，以便将来对该数据的请求能够更快地得到处理 二、如何实现实现函数缓存主要依靠闭包、柯里化、高阶函数，这里再简单复习下： 闭包闭包可以理解成，函数 + 函数体内可访问的变量总和 123456789(function() &#123; var a = 1; function add() &#123; const b = 2 let sum = b + a console.log(sum); // 3 &#125; add()&#125;)() add函数本身，以及其内部可访问的变量，即 a = 1，这两个组合在⼀起就形成了闭包 柯里化把接受多个参数的函数转换成接受一个单一参数的函数 1234567891011121314// 非函数柯里化var add = function (x,y) &#123; return x+y;&#125;add(3,4) //7// 函数柯里化var add2 = function (x) &#123; //**返回函数** return function (y) &#123; return x+y; &#125;&#125;add2(3)(4) //7 将一个二元函数拆分成两个一元函数 高阶函数通过接收其他函数作为参数或返回其他函数的函数 12345678910function foo()&#123; var a = 2; function bar() &#123; console.log(a); &#125; return bar;&#125;var baz = foo();baz();//2 函数 foo 如何返回另一个函数 bar，baz 现在持有对 foo 中定义的bar 函数的引用。由于闭包特性，a的值能够得到 下面再看看如何实现函数缓存，实现原理也很简单，把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果 如下所示 12345678910const memoize = function (func, content) &#123; let cache = Object.create(null) content = content || this return (...key) =&gt; &#123; if (!cache[key]) &#123; cache[key] = func.apply(content, key) &#125; return cache[key] &#125;&#125; 调用方式也很简单 123const calc = memoize(add);const num1 = calc(100,200)const num2 = calc(100,200) // 缓存得到的结果 过程分析： 在当前函数作用域定义了一个空对象，用于缓存运行结果 运用柯里化返回一个函数，返回的函数由于闭包特性，可以访问到cache 然后判断输入参数是不是在cache的中。如果已经存在，直接返回cache的内容，如果没有存在，使用函数func对输入参数求值，然后把结果存储在cache中 三、应用场景虽然使用缓存效率是非常高的，但并不是所有场景都适用，因此千万不要极端的将所有函数都添加缓存 以下几种情况下，适合使用缓存： 对于昂贵的函数调用，执行复杂计算的函数 对于具有有限且高度重复输入范围的函数 对于具有重复输入值的递归函数 对于纯函数，即每次使用特定输入调用时返回相同输出的函数","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说你对函数式编程的理解？优缺点？","slug":"js.说说你对函数式编程的理解？优缺点？","date":"2022-08-05T01:58:05.598Z","updated":"2022-08-05T02:11:09.934Z","comments":true,"path":"2022/08/05/js.说说你对函数式编程的理解？优缺点？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/","excerpt":"","text":"说说你对函数式编程的理解？优缺点？ 一、是什么函数式编程是一种”编程范式”（programming paradigm），一种编写程序的方法论 主要的编程范式有三种：命令式编程，声明式编程和函数式编程 相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程 举个例子，将数组每个元素进行平方操作，命令式编程与函数式编程如下 12345678// 命令式编程var array = [0, 1, 2, 3]for(let i = 0; i &lt; array.length; i++) &#123; array[i] = Math.pow(array[i], 2)&#125;// 函数式方式[0, 1, 2, 3].map(num =&gt; Math.pow(num, 2)) 简单来讲，就是要把过程逻辑写成函数，定义好输入参数，只关心它的输出结果 即是一种描述集合和集合之间的转换关系，输入通过函数都会返回有且只有一个输出值 可以看到，函数实际上是一个关系，或者说是一种映射，而这种映射关系是可以组合的，一旦我们知道一个函数的输出类型可以匹配另一个函数的输入，那他们就可以进行组合 二、概念纯函数函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用无副作用的函数，也就是纯函数 纯函数是对给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即纯函数=无状态+数据不可变 举一个简单的例子 1let double = value=&gt;value*2; 特性： 函数内部传入指定的值，就会返回确定唯一的值 不会造成超出作用域的变化，例如修改全局变量或引用传递的参数 优势： 使用纯函数，我们可以产生可测试的代码 123test(&#x27;double(2) 等于 4&#x27;, () =&gt; &#123; expect(double(2)).toBe(4);&#125;) 不依赖外部环境计算，不会产生副作用，提高函数的复用性 可读性更强 ，函数不管是否是纯函数 都会有一个语义化的名称，更便于阅读 可以组装成复杂任务的可能性。符合模块化概念及单一职责原则 高阶函数在我们的编程世界中，我们需要处理的其实也只有“数据”和“关系”，而关系就是函数 编程工作也就是在找一种映射关系，一旦关系找到了，问题就解决了，剩下的事情，就是让数据流过这种关系，然后转换成另一个数据，如下图所示 在这里，就是高阶函数的作用。高级函数，就是以函数作为输入或者输出的函数被称为高阶函数 通过高阶函数抽象过程，注重结果，如下面例子 123456789const forEach = function(arr,fn)&#123; for(let i=0;i&lt;arr.length;i++)&#123; fn(arr[i]); &#125;&#125;let arr = [1,2,3];forEach(arr,(item)=&gt;&#123; console.log(item);&#125;) 上面通过高阶函数 forEach来抽象循环如何做的逻辑，直接关注做了什么 高阶函数存在缓存的特性，主要是利用闭包作用 1234567891011const once = (fn)=&gt;&#123; let done = false; return function()&#123; if(!done)&#123; fn.apply(this,fn); &#125;else&#123; console.log(&quot;该函数已经执行&quot;); &#125; done = true; &#125;&#125; 柯里化柯里化是把一个多参数函数转化成一个嵌套的一元函数的过程 一个二元函数如下： 1let fn = (x,y)=&gt;x+y; 转化成柯里化函数如下： 123456789const curry = function(fn)&#123; return function(x)&#123; return function(y)&#123; return fn(x,y); &#125; &#125;&#125;let myfn = curry(fn);console.log( myfn(1)(2) ); 上面的curry函数只能处理二元情况，下面再来实现一个实现多参数的情况 1234567891011121314// 多参数柯里化；const curry = function(fn)&#123; return function curriedFn(...args)&#123; if(args.length&lt;fn.length)&#123; return function()&#123; return curriedFn(...args.concat([...arguments])); &#125; &#125; return fn(...args); &#125;&#125;const fn = (x,y,z,a)=&gt;x+y+z+a;const myfn = curry(fn);console.log(myfn(1)(2)(3)(1)); 关于柯里化函数的意义如下： 让纯函数更纯，每次接受一个参数，松散解耦 惰性执行 组合与管道组合函数，目的是将多个函数组合成一个函数 举个简单的例子： 123456789function afn(a)&#123; return a*2;&#125;function bfn(b)&#123; return b*3;&#125;const compose = (a,b)=&gt;c=&gt;a(b(c));let myfn = compose(afn,bfn);console.log( myfn(2)); 可以看到compose实现一个简单的功能：形成了一个新的函数，而这个函数就是一条从 bfn -&gt; afn 的流水线 下面再来看看如何实现一个多函数组合： 1const compose = (...fns)=&gt;val=&gt;fns.reverse().reduce((acc,fn)=&gt;fn(acc),val); compose执行是从右到左的。而管道函数，执行顺序是从左到右执行的 1const pipe = (...fns)=&gt;val=&gt;fns.reduce((acc,fn)=&gt;fn(acc),val); 组合函数与管道函数的意义在于：可以把很多小函数组合起来完成更复杂的逻辑 三、优缺点优点 更好的管理状态：因为它的宗旨是无状态，或者说更少的状态，能最大化的减少这些未知、优化代码、减少出错情况 更简单的复用：固定输入-&gt;固定输出，没有其他外部变量影响，并且无副作用。这样代码复用时，完全不需要考虑它的内部实现和外部影响 更优雅的组合：往大的说，网页是由各个组件组成的。往小的说，一个函数也可能是由多个小函数组成的。更强的复用性，带来更强大的组合性 隐性好处。减少代码量，提高维护性 缺点： 性能：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销 资源占用：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收所产生的压力远远超过其他编程方式 递归陷阱：在函数式编程中，为了实现迭代，通常会采用递归操作","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"JavaScript中本地存储的方式有哪些？区别及应用场景？","slug":"js.JavaScript中本地存储的方式有哪些？区别及应用场景？","date":"2022-08-05T01:58:05.567Z","updated":"2022-08-05T02:17:18.765Z","comments":true,"path":"2022/08/05/js.JavaScript中本地存储的方式有哪些？区别及应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.JavaScript%E4%B8%AD%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"JavaScript中本地存储的方式有哪些？区别及应用场景？ 一、方式javaScript本地缓存的方法我们主要讲述以下四种： cookie sessionStorage localStorage indexedDB cookieCookie，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 HTTP无状态导致的问题 作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 cookie有效期、安全性、使用范围的可选属性组成 但是cookie在每次请求中都会被发送，如果不使用 HTTPS并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 cookie保持登录态的网站上，如果 cookie被窃取，他人很容易利用你的 cookie来假扮成你登录网站 关于cookie常用的属性如下： Expires 用于设置 Cookie 的过期时间 1Expires=Wed, 21 Oct 2015 07:28:00 GMT Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比Expires高） 1Max-Age=604800 Domain指定了 Cookie 可以送达的主机名 Path指定了一个 URL路径，这个路径必须出现在要请求的资源的路径中才可以发送 Cookie 首部 1Path=/docs # /docs/Web/ 下的资源会带 Cookie 首部 标记为 Secure的 Cookie只应通过被HTTPS协议加密过的请求发送给服务端 通过上述，我们可以看到cookie又开始的作用并不是为了缓存而设计出来，只是借用了cookie的特性实现缓存 关于cookie的使用如下： 1document.cookie = &#x27;名字=值&#x27;; 关于cookie的修改，首先要确定domain和path属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的cookie 12Set-Cookie:name=aa; domain=aa.net; path=/ # 服务端设置document.cookie =name=bb; domain=aa.net; path=/ # 客户端设置 最后cookie的删除，最常用的方法就是给cookie设置一个过期的事件，这样cookie过期后会被浏览器删除 localStorageHTML5新方法，IE8及以上浏览器都兼容 特点 生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的 存储的信息在同一域中是共享的 当本页操作（新增、修改、删除）了localStorage的时候，本页面不会触发storage事件,但是别的页面会触发storage事件。 大小：5M（跟浏览器厂商有关系） localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡 受同源策略的限制 下面再看看关于localStorage的使用 设置 1localStorage.setItem(&#x27;username&#x27;,&#x27;cfangxu&#x27;); 获取 1localStorage.getItem(&#x27;username&#x27;) 获取键名 1localStorage.key(0) //获取第一个键名 删除 1localStorage.removeItem(&#x27;username&#x27;) 一次性清除所有存储 1localStorage.clear() localStorage 也不是完美的，它有两个缺点： 无法像Cookie一样设置过期时间 只能存入字符串，无法直接存对象 12localStorage.setItem(&#x27;key&#x27;, &#123;name: &#x27;value&#x27;&#125;);console.log(localStorage.getItem(&#x27;key&#x27;)); // &#x27;[object, Object]&#x27; sessionStoragesessionStorage和 localStorage使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，sessionStorage 将会删除数据 扩展的前端存储方式indexedDB是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索 虽然 Web Storage对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案 优点： 储存量理论上没有上限 所有操作都是异步的，相比 LocalStorage 同步操作性能更高，尤其是数据量较大时 原生支持储存JS的对象 是个正经的数据库，意味着数据库能干的事它都能干 缺点： 操作非常繁琐 本身有一定门槛 关于indexedDB的使用基本使用步骤如下： 打开数据库并且开始一个事务 创建一个 object store 构建一个请求来执行一些数据库操作，像增加或提取数据等。 通过监听正确类型的 DOM 事件以等待操作完成。 在操作结果上进行一些操作（可以在 request对象中找到） 关于使用indexdb的使用会比较繁琐，大家可以通过使用Godb.js库进行缓存，最大化的降低操作难度 二、区别关于cookie、sessionStorage、localStorage三者的区别主要如下： 存储大小：cookie数据大小不能超过4k，sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 有效时间：localStorage存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除；cookie设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 数据与服务器之间的交互方式，cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端；sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 三、应用场景在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择： 标记用户与跟踪用户行为的情况，推荐使用cookie 适合长期保存在本地的数据（令牌），推荐使用localStorage 敏感账号一次性登录，推荐使用sessionStorage 存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用indexedDB 相关连接 https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ https://github.com/chenstarx/GoDB.js","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"说说 JavaScript 中内存泄漏的几种情况？","slug":"js.说说 JavaScript 中内存泄漏的几种情况？","date":"2022-08-05T01:58:05.534Z","updated":"2022-08-05T02:10:22.245Z","comments":true,"path":"2022/08/05/js.说说 JavaScript 中内存泄漏的几种情况？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E8%AF%B4%E8%AF%B4%20JavaScript%20%E4%B8%AD%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%9F/","excerpt":"","text":"说说 JavaScript 中内存泄漏的几种情况？ 一、是什么内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存 并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费 程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存 对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃 在C语言中，因为是手动管理内存，内存泄露是经常出现的事情。 123456char * buffer;buffer = (char*) malloc(42);// Do something with bufferfree(buffer); 上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。 这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制” 二、垃圾回收机制Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存 原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存 通常情况下有两种实现方式： 标记清除 引用计数 标记清除JavaScript最常用的垃圾收回机制 当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“ 垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉 在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了 随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存 举个例子： 12345678var m = 0,n = 19 // 把 m,n,add() 标记为进入环境。add(m, n) // 把 a, b, c标记为进入环境。console.log(n) // a,b,c标记为离开环境，等待垃圾回收。function add(a, b) &#123; a++ var c = a + b return c&#125; 引用计数语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放 如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏 12const arr = [1, 2, 3, 4];console.log(&#x27;hello world&#x27;); 面代码中，数组[1, 2, 3, 4]是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存 如果需要这块内存被垃圾回收机制释放，只需要设置如下： 1arr = null 通过设置arr为null，就解除了对数组[1,2,3,4]的引用，引用次数变为 0，就被垃圾回收了 小结有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用 三、常见内存泄露情况意外的全局变量 123function foo(arg) &#123; bar = &quot;this is a hidden global variable&quot;;&#125; 另一种意外的全局变量可能由 this 创建： 12345function foo() &#123; this.variable = &quot;potential accidental global&quot;;&#125;// foo 调用自己，this 指向了全局对象（window）foo(); 上述使用严格模式，可以避免意外的全局变量 定时器也常会造成内存泄露 12345678var someResource = getData();setInterval(function() &#123; var node = document.getElementById(&#x27;Node&#x27;); if(node) &#123; // 处理 node 和 someResource node.innerHTML = JSON.stringify(someResource)); &#125;&#125;, 1000); 如果id为Node的元素从DOM中移除，该定时器仍会存在，同时，因为回调函数中包含对someResource的引用，定时器外面的someResource也不会被释放 包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放 1234567function bindEvent() &#123; var obj = document.createElement(&#x27;XXX&#x27;); var unused = function () &#123; console.log(obj, &#x27;闭包内引用obj obj不会被释放&#x27;); &#125;; obj = null; // 解决方法&#125; 没有清理对DOM元素的引用同样造成内存泄露 12345const refA = document.getElementById(&#x27;refA&#x27;);document.body.removeChild(refA); // dom删除了console.log(refA, &#x27;refA&#x27;); // 但是还存在引用能console出整个div 没有被回收refA = null;console.log(refA, &#x27;refA&#x27;); // 解除引用 包括使用事件监听addEventListener监听的时候，在不监听的情况下使用removeEventListener取消对事件监听","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"举例说明你对尾递归的理解，有哪些应用场景","slug":"js.举例说明你对尾递归的理解，有哪些应用场景","date":"2022-08-05T01:58:05.495Z","updated":"2022-08-05T02:08:18.095Z","comments":true,"path":"2022/08/05/js.举例说明你对尾递归的理解，有哪些应用场景/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/js.%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E4%BD%A0%E5%AF%B9%E5%B0%BE%E9%80%92%E5%BD%92%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","excerpt":"","text":"举例说明你对尾递归的理解，有哪些应用场景 一、递归递归（英语：Recursion） 在数学与计算机科学中，是指在函数的定义中使用函数自身的方法 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数 其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解 一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回 下面实现一个函数 pow(x, n)，它可以计算 x 的 n 次方 使用迭代的方式，如下： 123456789function pow(x, n) &#123; let result = 1; // 再循环中，用 x 乘以 result n 次 for (let i = 0; i &lt; n; i++) &#123; result *= x; &#125; return result;&#125; 使用递归的方式，如下： 1234567function pow(x, n) &#123; if (n == 1) &#123; return x; &#125; else &#123; return x * pow(x, n - 1); &#125;&#125; pow(x, n) 被调用时，执行分为两个分支： 12345 if n==1 = x /pow(x, n) = \\ else = x * pow(x, n - 1) 也就是说pow 递归地调用自身 直到 n == 1 为了计算 pow(2, 4)，递归变体经过了下面几个步骤： pow(2, 4) = 2 * pow(2, 3) pow(2, 3) = 2 * pow(2, 2) pow(2, 2) = 2 * pow(2, 1) pow(2, 1) = 2 因此，递归将函数调用简化为一个更简单的函数调用，然后再将其简化为一个更简单的函数，以此类推，直到结果 二、尾递归尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数 尾递归在普通尾调用的基础上，多出了2个特征： 在尾部调用的是函数自身 可通过优化，使得计算仅占用常量栈空间 在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出 这时候，我们就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生”栈溢出”错误 实现一下阶乘，如果用普通的递归，如下： 123456function factorial(n) &#123; if (n === 1) return 1; return n * factorial(n - 1);&#125;factorial(5,6) // 120 如果n等于5，这个方法要执行5次，才返回最终的计算表达式，这样每次都要保存这个方法，就容易造成栈溢出，复杂度为O(n) 如果我们使用尾递归，则如下： 123456function factorial(n, total) &#123; if (n === 1) return total; return factorial(n - 1, n * total);&#125;factorial(5,6) // 120 可以看到，每一次返回的就是一个新的函数，不带上一个函数的参数，也就不需要储存上一个函数了。尾递归只需要保存一个调用栈，复杂度 O(1) 二、应用场景数组求和 123456function sum(arr, total) &#123; if(arr.length === 1) &#123; return total &#125; return sum(arr, total + arr.pop())&#125; 使用尾递归优化求斐波那契数列 123456function factorial2 (n, start = 1, total = 1) &#123; if(n &lt;= 2)&#123; return total &#125; return factorial2 (n -1, total, total + start)&#125; 数组扁平化 1234567891011121314let a = [1,2,3, [1,2,3, [1,2,3]]]// 变成let a = [1,2,3,1,2,3,1,2,3]// 具体实现function flat(arr = [], result = []) &#123; arr.forEach(v =&gt; &#123; if(Array.isArray(v)) &#123; result = result.concat(flat(v, [])) &#125;else &#123; result.push(v) &#125; &#125;) return result&#125; 数组对象格式化 123456789101112131415161718192021222324252627282930313233343536373839404142let obj = &#123; a: &#x27;1&#x27;, b: &#123; c: &#x27;2&#x27;, D: &#123; E: &#x27;3&#x27; &#125; &#125;&#125;// 转化为如下：let obj = &#123; a: &#x27;1&#x27;, b: &#123; c: &#x27;2&#x27;, d: &#123; e: &#x27;3&#x27; &#125; &#125;&#125;// 代码实现function keysLower(obj) &#123; let reg = new RegExp(&quot;([A-Z]+)&quot;, &quot;g&quot;); for (let key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; let temp = obj[key]; if (reg.test(key.toString())) &#123; // 将修改后的属性名重新赋值给temp，并在对象obj内添加一个转换后的属性 temp = obj[key.replace(reg, function (result) &#123; return result.toLowerCase() &#125;)] = obj[key]; // 将之前大写的键属性删除 delete obj[key]; &#125; // 如果属性是对象或者数组，重新执行函数 if (typeof temp === &#x27;object&#x27; || Object.prototype.toString.call(temp) === &#x27;[object Array]&#x27;) &#123; keysLower(temp); &#125; &#125; &#125; return obj;&#125;;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"}],"tags":[]},{"title":"元素水平垂直居中的方法有哪些？如果元素不定宽高呢？","slug":"css.元素水平垂直居中的方法有哪些？如果元素不定宽高呢？","date":"2022-08-05T00:35:12.648Z","updated":"2022-08-05T01:53:31.251Z","comments":true,"path":"2022/08/05/css.元素水平垂直居中的方法有哪些？如果元素不定宽高呢？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%A6%82%E6%9E%9C%E5%85%83%E7%B4%A0%E4%B8%8D%E5%AE%9A%E5%AE%BD%E9%AB%98%E5%91%A2%EF%BC%9F/","excerpt":"","text":"元素水平垂直居中的方法有哪些？如果元素不定宽高呢？ 一、背景在开发中经常遇到这个问题，即让某个元素的内容在水平和垂直方向上都居中，内容不仅限于文字，可能是图片或其他元素 居中是一个非常基础但又是非常重要的应用场景，实现居中的方法存在很多，可以将这些方法分成两个大类： 居中元素（子元素）的宽高已知 居中元素宽高未知 二、实现方式实现元素水平垂直居中的方式： 利用定位+margin:auto 利用定位+margin:负值 利用定位+transform table布局 flex布局 grid布局 利用定位+margin:auto先上代码： 12345678910111213141516171819202122&lt;style&gt; .father&#123; width:500px; height:300px; border:1px solid #0a3b98; position: relative; &#125; .son&#123; width:100px; height:40px; background: #f0a238; position: absolute; top:0; left:0; right:0; bottom:0; margin:auto; &#125;&lt;/style&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; 父级设置为相对定位，子级绝对定位 ，并且四个定位属性的值都设置了0，那么这时候如果子级没有设置宽高，则会被拉开到和父级一样宽高 这里子元素设置了宽高，所以宽高会按照我们的设置来显示，但是实际上子级的虚拟占位已经撑满了整个父级，这时候再给它一个margin：auto它就可以上下左右都居中了 利用定位+margin:负值绝大多数情况下，设置父元素为相对定位， 子元素移动自身50%实现水平垂直居中 123456789101112131415161718192021&lt;style&gt; .father &#123; position: relative; width: 200px; height: 200px; background: skyblue; &#125; .son &#123; position: absolute; top: 50%; left: 50%; margin-left:-50px; margin-top:-50px; width: 100px; height: 100px; background: red; &#125;&lt;/style&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; 整个实现思路如下图所示： 初始位置为方块1的位置 当设置left、top为50%的时候，内部子元素为方块2的位置 设置margin为负数时，使内部子元素到方块3的位置，即中间位置 这种方案不要求父元素的高度，也就是即使父元素的高度变化了，仍然可以保持在父元素的垂直居中位置，水平方向上是一样的操作 但是该方案需要知道子元素自身的宽高，但是我们可以通过下面transform属性进行移动 利用定位+transform实现代码如下： 1234567891011121314151617181920&lt;style&gt; .father &#123; position: relative; width: 200px; height: 200px; background: skyblue; &#125; .son &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); width: 100px; height: 100px; background: red; &#125;&lt;/style&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; translate(-50%, -50%)将会将元素位移自己宽度和高度的-50% 这种方法其实和最上面被否定掉的margin负值用法一样，可以说是margin负值的替代方案，并不需要知道自身元素的宽高 table布局设置父元素为display:table-cell，子元素设置 display: inline-block。利用vertical和text-align可以让所有的行内块级元素水平垂直居中 12345678910111213141516171819&lt;style&gt; .father &#123; display: table-cell; width: 200px; height: 200px; background: skyblue; vertical-align: middle; text-align: center; &#125; .son &#123; display: inline-block; width: 100px; height: 100px; background: red; &#125;&lt;/style&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; flex弹性布局还是看看实现的整体代码： 123456789101112131415161718&lt;style&gt; .father &#123; display: flex; justify-content: center; align-items: center; width: 200px; height: 200px; background: skyblue; &#125; .son &#123; width: 100px; height: 100px; background: red; &#125;&lt;/style&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; css3中了flex布局，可以非常简单实现垂直水平居中 这里可以简单看看flex布局的关键属性作用： display: flex时，表示该容器内部的元素将按照flex进行布局 align-items: center表示这些元素将相对于本容器水平居中 justify-content: center也是同样的道理垂直居中 grid网格布局12345678910111213141516171819&lt;style&gt; .father &#123; display: grid; align-items:center; justify-content: center; width: 200px; height: 200px; background: skyblue; &#125; .son &#123; width: 10px; height: 10px; border: 1px solid red &#125;&lt;/style&gt;&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; 这里看到，gird网格布局和flex弹性布局都简单粗暴 小结上述方法中，不知道元素宽高大小仍能实现水平垂直居中的方法有： 利用定位+margin:auto 利用定位+transform 利用定位+margin:负值 flex布局 grid布局 三、总结根据元素标签的性质，可以分为： 内联元素居中布局 块级元素居中布局 内联元素居中布局水平居中 行内元素可设置：text-align: center flex布局设置父元素：display: flex; justify-content: center 垂直居中 单行文本父元素确认高度：height === line-height 多行文本父元素确认高度：disaply: table-cell; vertical-align: middle 块级元素居中布局水平居中 定宽: margin: 0 auto 绝对定位+left:50%+margin:负自身一半 垂直居中 position: absolute设置left、top、margin-left、margin-top(定高) display: table-cell transform: translate(x, y) flex(不定高，不定宽) grid(不定高，不定宽)，兼容性相对比较差","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"谈谈你对BFC的理解","slug":"css.谈谈你对BFC的理解？","date":"2022-08-05T00:35:12.621Z","updated":"2022-08-05T01:53:14.047Z","comments":true,"path":"2022/08/05/css.谈谈你对BFC的理解？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9BFC%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F/","excerpt":"","text":"谈谈你对BFC的理解？ 一、是什么我们在页面布局的时候，经常出现以下情况： 这个元素高度怎么没了？ 这两栏布局怎么没法自适应？ 这两个元素的间距怎么有点奇怪的样子？ …… 归根究底是元素之间相互的影响，导致了意料之外的情况，这里就涉及到BFC概念 BFC（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则： 内部的盒子会在垂直方向上一个接一个的放置 对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。 每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此 BFC的区域不会与float的元素区域重叠 计算BFC的高度时，浮动子元素也参与计算 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然 BFC目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素 二、触发条件触发BFC的条件包含不限于： 根元素，即HTML元素 浮动元素：float值为left、right overflow值不为 visible，为 auto、scroll、hidden display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid position的值为absolute或fixed 三、应用场景利用BFC的特性，我们将BFC应用在以下场景： 防止margin重叠（塌陷）1234567891011121314&lt;style&gt; p &#123; color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align:center; margin: 100px; &#125;&lt;/style&gt;&lt;body&gt; &lt;p&gt;Haha&lt;/p&gt; &lt;p&gt;Hehe&lt;/p&gt;&lt;/body&gt; 页面显示如下： 两个p元素之间的距离为100px，发生了margin重叠（塌陷），以最大的为准，如果第一个P的margin为80的话，两个P之间的距离还是100，以最大的为准。 前面讲到，同一个BFC的俩个相邻的盒子的margin会发生重叠 可以在p外面包裹一层容器，并触发这个容器生成一个BFC，那么两个p就不属于同一个BFC，则不会出现margin重叠 12345678910111213141516171819&lt;style&gt; .wrap &#123; overflow: hidden;// 新的BFC &#125; p &#123; color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align:center; margin: 100px; &#125;&lt;/style&gt;&lt;body&gt; &lt;p&gt;Haha&lt;/p&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;p&gt;Hehe&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; 这时候，边距则不会重叠： 清除内部浮动12345678910111213141516171819&lt;style&gt; .par &#123; border: 5px solid #fcc; width: 300px; &#125; .child &#123; border: 5px solid #f66; width:100px; height: 100px; float: left; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;par&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 页面显示如下： 而BFC在计算高度时，浮动元素也会参与，所以我们可以触发.par元素生活才能BFC，则内部浮动元素计算高度时候也会计算 123.par &#123; overflow: hidden;&#125; 实现效果如下： 自适应多栏布局这里举个两栏的布局 12345678910111213141516171819202122&lt;style&gt; body &#123; width: 300px; position: relative; &#125; .aside &#123; width: 100px; height: 150px; float: left; background: #f66; &#125; .main &#123; height: 200px; background: #fcc; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;/body&gt; 效果图如下： 前面讲到，每个元素的左外边距与包含块的左边界相接触 因此，虽然.aslide为浮动元素，但是main的左边依然会与包含块的左边相接触 而BFC的区域不会与浮动盒子重叠 所以我们可以通过触发main生成BFC，以此适应两栏布局 123.main &#123; overflow: hidden;&#125; 这时候，新的BFC不会与浮动的.aside元素重叠。因此会根据包含块的宽度，和.aside的宽度，自动变窄 效果如下： 小结可以看到上面几个案例，都体现了BFC实际就是页面一个独立的容器，里面的子元素不影响外面的元素 参考文献 https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context https://github.com/zuopf769/notebook/blob/master/fe/BFC%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/README.md","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"CSS中，有哪些方式可以隐藏页面元素？区别?","slug":"css.CSS中，有哪些方式可以隐藏页面元素？区别_","date":"2022-08-05T00:35:12.590Z","updated":"2022-08-05T01:52:46.570Z","comments":true,"path":"2022/08/05/css.CSS中，有哪些方式可以隐藏页面元素？区别_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.CSS%E4%B8%AD%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F%E5%8F%AF%E4%BB%A5%E9%9A%90%E8%97%8F%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%EF%BC%9F%E5%8C%BA%E5%88%AB_/","excerpt":"","text":"CSS中，有哪些方式可以隐藏页面元素？区别? 一、前言在平常的样式排版中，我们经常遇到将某个模块隐藏的场景 通过css隐藏元素的方法有很多种，它们看起来实现的效果是一致的 但实际上每一种方法都有一丝轻微的不同，这些不同决定了在一些特定场合下使用哪一种方法 二、实现方式通过css实现隐藏元素方法有如下： display:none visibility:hidden opacity:0 设置height、width模型属性为0 position:absolute clip-path display:none设置元素的display为none是最常用的隐藏元素的方法 123.hide &#123; display:none;&#125; 将元素设置为display:none后，元素在页面上将彻底消失 元素本身占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘 消失后，自身绑定的事件不会触发，也不会有过渡效果 特点：元素不可见，不占据空间，无法响应点击事件 visibility:hidden设置元素的visibility为hidden也是一种常用的隐藏元素的方法 从页面上仅仅是隐藏该元素，DOM结果均会存在，只是当时在一个不可见的状态，不会触发重排，但是会触发重绘 123.hidden&#123; visibility:hidden&#125; 给人的效果是隐藏了，所以他自身的事件不会触发 特点：元素不可见，占据页面空间，无法响应点击事件 opacity:0opacity属性表示元素的透明度，将元素的透明度设置为0后，在我们用户眼中，元素也是隐藏的 不会引发重排，一般情况下也会引发重绘 ❝ 如果利用 animation 动画，对 opacity 做变化（animation会默认触发GPU加速），则只会触发 GPU 层面的 composite，不会触发重绘 ❞ 123.transparent &#123; opacity:0;&#125; 由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以触发的，但被他遮挡的元素是不能触发其事件的 需要注意的是：其子元素不能设置opacity来达到显示的效果 特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件 设置height、width属性为0将元素的margin，border，padding，height和width等影响元素盒模型的属性设置成0，如果元素内有子元素或内容，还应该设置其overflow:hidden来隐藏其子元素 12345678.hiddenBox &#123; margin:0; border:0; padding:0; height:0; width:0; overflow:hidden;&#125; 特点：元素不可见，不占据页面空间，无法响应点击事件 position:absolute将元素移出可视区域 12345.hide &#123; position: absolute; top: -9999px; left: -9999px;&#125; 特点：元素不可见，不影响页面布局 clip-path通过裁剪的形式 123.hide &#123; clip-path: polygon(0px 0px,0px 0px,0px 0px,0px 0px);&#125; 特点：元素不可见，占据页面空间，无法响应点击事件 小结最常用的还是display:none和visibility:hidden，其他的方式只能认为是奇招，它们的真正用途并不是用于隐藏元素，所以并不推荐使用它们 三、区别关于display: none、visibility: hidden、opacity: 0的区别，如下表所示： display: none visibility: hidden opacity: 0 页面中 不存在 存在 存在 重排 会 不会 不会 重绘 会 会 不一定 自身绑定事件 不触发 不触发 可触发 transition 不支持 支持 支持 子元素可复原 不能 能 不能 被遮挡的元素可触发事件 能 能 不能","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别","slug":"css.说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？","date":"2022-08-05T00:35:12.553Z","updated":"2022-08-05T01:51:55.696Z","comments":true,"path":"2022/08/05/css.说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E8%AF%B4%E8%AF%B4%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0%E3%80%81css%E5%83%8F%E7%B4%A0%E3%80%81%E8%AE%BE%E5%A4%87%E7%8B%AC%E7%AB%8B%E5%83%8F%E7%B4%A0%E3%80%81dpr%E3%80%81ppi%20%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？ 一、背景在css中我们通常使用px作为单位，在PC浏览器中css的1个像素都是对应着电脑屏幕的1个物理像素 这会造成一种错觉，我们会认为css中的像素就是设备的物理像素 但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的 当我们做移动端开发时，同为1px的设置，在不同分辨率的移动设备上显示效果却有很大差异 这背后就涉及了css像素、设备像素、设备独立像素、dpr、ppi的概念 二、介绍CSS像素CSS像素（css pixel, px）: 适用于web编程，在 CSS 中以 px 为后缀，是一个长度单位 在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位 px是一个相对单位，相对的是设备像素（device pixel） 一般情况，页面缩放比为1，1个CSS像素等于1个设备独立像素 CSS像素又具有两个方面的相对性： 在同一个设备上，每1个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率） 在不同的设备之间，每1个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机） 在页面进行缩放操作也会 引起css中px的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素） 假设原来需要 320px 才能填满的宽度现在只需要 160px px会受到下面的因素的影响而变化： 每英寸像素（PPI） 设备像素比（DPR） 设备像素设备像素（device pixels），又称为物理像素 指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个“点”而已 可以参考公园里的景观变色彩灯，一个彩灯(物理像素)由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩 从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为pt 设备独立像素设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素 在javaScript中可以通过window.screen.width/ window.screen.height查看 比如我们会说“电脑屏幕在 2560x1600分辨率下不适合玩游戏，我们把它调为 1440x900”，这里的“分辨率”（非严谨说法）指的就是设备独立像素 一个设备独立像素里可能包含1个或者多个物理像素点，包含的越多则屏幕看起来越清晰 至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子： iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960 这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素 如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位 我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素 至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是下面介绍的dpr dprdpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在JavaScript中可以通过 window.devicePixelRatio 获取 计算公式如下： 当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素 当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素 当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素 如下图所示： 当dpr为3，那么1px的CSS像素宽度对应3px的物理像素的宽度，1px的CSS像素高度对应3px的物理像素高度 ppippi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像 计算公式如下： 三、总结无缩放情况下，1个CSS像素等于1个设备独立像素 设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变 PC端中，1个设备独立像素 = 1个设备像素 （在100%，未缩放的情况下） 在移动端中，标准屏幕（160ppi）下 1个设备独立像素 = 1个设备像素 设备像素比（dpr） = 设备像素 / 设备独立像素 每英寸像素（ppi），值越大，图像越清晰 参考文献 https://developer.mozilla.org/zh-CN/docs/Glossary/CSS_pixel https://hijiangtao.github.io/2017/07/09/Device-Viewport-and-Pixel-Introduction/","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"说说empxremvhvw的区别","slug":"css说说empxremvhvw的区别_","date":"2022-08-05T00:35:12.523Z","updated":"2022-08-05T00:53:19.082Z","comments":true,"path":"2022/08/05/css说说empxremvhvw的区别_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css%E8%AF%B4%E8%AF%B4empxremvhvw%E7%9A%84%E5%8C%BA%E5%88%AB_/","excerpt":"","text":"说说em/px/rem/vh/vw的区别? 一、介绍传统的项目开发中，我们只会用到px、%、em这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性 从CSS3开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了rem、vh、vw、vm等一些新的计量单位 利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等 二、单位在css单位中，可以分为长度单位、绝对单位，如下表所指示 CSS单位 相对长度单位 em、ex、ch、rem、vw、vh、vmin、vmax、% 绝对长度单位 cm、mm、in、px、pt、pc 这里我们主要讲述px、em、rem、vh、vw pxpx，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中 有些人会把px认为是相对长度，原因在于在移动端中存在设备像素比，px实际显示的大小是不确定的 这里之所以认为px为绝对单位，在于px的大小和元素的其他属性无关 emem是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（1em = 16px） 为了简化 font-size 的换算，我们需要在css中的 body 选择器中声明font-size= 62.5%，这就使 em 值变为 16px*62.5% = 10px 这样 12px = 1.2em, 10px = 1em, 也就是说只需要将你的原来的px 数值除以 10，然后换上 em作为单位就行了 特点： em 的值并不是固定的 em 会继承父级元素的字体大小 em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸 任意浏览器的默认字体高都是 16px 举个例子 123&lt;div class=&quot;big&quot;&gt; 我是14px=1.4rem&lt;div class=&quot;small&quot;&gt;我是12px=1.2rem&lt;/div&gt;&lt;/div&gt; 样式为 12345&lt;style&gt; html &#123;font-size: 10px; &#125; /* 公式16px*62.5%=10px */ .big&#123;font-size: 1.4rem&#125; .small&#123;font-size: 1.2rem&#125;&lt;/style&gt; 这时候.big元素的font-size为14px，而.small元素的font-size为12px remrem，相对单位，相对的只是HTML根元素font-size的值 同理，如果想要简化font-size的转化，我们可以在根元素html中加入font-size: 62.5% 1html &#123;font-size: 62.5%; &#125; /* 公式16px*62.5%=10px */ 这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助 特点： rem单位可谓集相对大小和绝对大小的优点于一身 和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸 vh、vwvw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，vh则为窗口的高度 这里的窗口分成几种情况： 在桌面端，指的是浏览器的可视区域 移动端指的就是布局视口 像vw、vh，比较容易混淆的一个单位是%，不过百分比宽泛的讲是相对于父元素： 对于普通定位元素就是我们理解的父元素 对于position: absolute;的元素是相对于已定位的父元素 对于position: fixed;的元素是相对于 ViewPort（可视窗口） 三、总结「px」：绝对单位，页面按精确像素展示 「em」：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算，整个页面内1em不是一个固定的值 「rem」：相对单位，可理解为root em, 相对根节点html的字体大小来计算 「vh、vw」：主要用于页面视口大小布局，在页面布局上更加方便简单","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"CSS选择器有哪些？优先级？哪些属性可以继承？","slug":"css.CSS选择器有哪些？优先级？哪些属性可以继承？","date":"2022-08-05T00:35:12.491Z","updated":"2022-08-05T00:39:56.376Z","comments":true,"path":"2022/08/05/css.CSS选择器有哪些？优先级？哪些属性可以继承？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.CSS%E9%80%89%E6%8B%A9%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9F%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%EF%BC%9F/","excerpt":"","text":"CSS选择器有哪些？优先级？哪些属性可以继承？ 一、选择器CSS选择器是CSS规则的第一部分 它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式 选择器所选择的元素，叫做“选择器的对象” 我们从一个Html结构开始 1234567891011&lt;div id=&quot;box&quot;&gt; &lt;div class=&quot;one&quot;&gt; &lt;p class=&quot;one_1&quot;&gt; &lt;/p&gt; &lt;p class=&quot;one_1&quot;&gt; &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;two&quot;&gt;&lt;/div&gt; &lt;div class=&quot;two&quot;&gt;&lt;/div&gt; &lt;div class=&quot;two&quot;&gt;&lt;/div&gt;&lt;/div&gt; 关于css属性选择器常用的有： id选择器（#box），选择id为box的元素 类选择器（.one），选择类名为one的所有元素 标签选择器（div），选择标签为div的所有元素 后代选择器（#box div），选择id为box元素内部所有的div元素 子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素 相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素 群组选择器（div,p），选择div、p的所有元素 还有一些使用频率相对没那么多的选择器： 伪类选择器 123456:link ：选择未被访问的链接:visited：选取已被访问的链接:active：选择活动链接:hover ：鼠标指针浮动在上面的元素:focus ：选择具有焦点的:first-child：父元素的首个子元素 伪元素选择器 1234:first-letter ：用于选取指定选择器的首字母:first-line ：选取指定选择器的首行:before : 选择器在被选元素的内容前面插入内容:after : 选择器在被选元素的内容后面插入内容 属性选择器 1234[attribute] 选择带有attribute属性的元素[attribute=value] 选择所有使用attribute=value的元素[attribute~=value] 选择attribute属性包含value的元素[attribute|=value]：选择attribute属性以value开头的元素 在CSS3中新增的选择器有如下： 层次选择器（p~ul），选择前面有p元素的每个ul元素 伪类选择器 12345678910111213:first-of-type 父元素的首个元素:last-of-type 父元素的最后一个元素:only-of-type 父元素的特定类型的唯一子元素:only-child 父元素中唯一子元素:nth-child(n) 选择父元素中第N个子元素:nth-last-of-type(n) 选择父元素中第N个子元素，从后往前:last-child 父元素的最后一个元素:root 设置HTML文档:empty 指定空的元素:enabled 选择被禁用元素:disabled 选择被禁用元素:checked 选择选中的元素:not(selector) 选择非 &lt;selector&gt; 元素的所有元素 属性选择器 123[attribute*=value]：选择attribute属性值包含value的所有元素[attribute^=value]：选择attribute属性开头为value的所有元素[attribute$=value]：选择attribute属性结尾为value的所有元素 二、优先级相信大家对CSS选择器的优先级都不陌生： ❝ 内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 ❞ 到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下： 如果存在内联样式，那么 A = 1, 否则 A = 0 B的值等于 ID选择器出现的次数 C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数 D 的值等于 标签选择器 和 伪元素 出现的总次数 这里举个例子： 1#nav-global &gt; ul &gt; li &gt; a.nav-link 套用上面的算法，依次求出 A B C D 的值： 因为没有内联样式 ，所以 A = 0 ID选择器总共出现了1次， B = 1 类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1 标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3 上面算出的A 、 B、C、D 可以简记作：(0, 1, 1, 3) 知道了优先级是如何计算之后，就来看看比较规则： 从左往右依次进行比较 ，较大者优先级更高 如果相等，则继续往右移动一位进行比较 如果4位全部相等，则后面的会覆盖前面的 经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用!important 三、继承属性在css中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性 关于继承属性，可以分成： 字体系列属性 123456font:组合字体font-family:规定元素的字体系列font-weight:设置字体的粗细font-size:设置字体的尺寸font-style:定义字体的风格font-variant:偏大或偏小的字体 文本系列属性 12345678text-indent：文本缩进text-align：文本水平line-height：行高word-spacing：增加或减少单词间的空白letter-spacing：增加或减少字符间的空白text-transform：控制文本大小写direction：规定文本的书写方向color：文本颜色 元素可见性 1visibility 表格布局属性 12345caption-side：定位表格标题位置border-collapse：合并表格边框border-spacing：设置相邻单元格的边框间的距离empty-cells：单元格的边框的出现与消失table-layout：表格的宽度由什么决定 列表属性 123list-style-type：文字前面的小点点样式list-style-position：小点点位置list-style：以上的属性可通过这属性集合 引用 1quotes：设置嵌套引用的引号类型 光标属性 1cursor：箭头可以变成需要的形状 继承中比较特殊的几点： a 标签的字体颜色不能被继承 h1-h6标签字体的大下也是不能被继承的 无继承的属性 display 文本属性：vertical-align、text-decoration 盒子模型的属性：宽度、高度、内外边距、边框等 背景属性：背景图片、颜色、位置等 定位属性：浮动、清除浮动、定位position等 生成内容属性：content、counter-reset、counter-increment 轮廓样式属性：outline-style、outline-width、outline-color、outline 页面样式属性：size、page-break-before、page-break-after","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"说说你对CSS盒子模型的理解_","slug":"css.说说你对CSS盒子模型的理解_","date":"2022-08-05T00:35:12.449Z","updated":"2022-08-05T00:39:59.858Z","comments":true,"path":"2022/08/05/css.说说你对CSS盒子模型的理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说你对CSS盒子模型的理解? 一、是什么当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box） 一个盒子由四个部分组成：content、padding、border、margin content，即实际内容，显示文本和图像 boreder，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成 padding，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的background属性影响 margin，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域 上述是一个从二维的角度观察盒子，下面再看看看三维图： 下面来段代码： 12345678910&lt;style&gt; .box &#123; width: 200px; height: 100px; padding: 20px; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; 盒子模型&lt;/div&gt; 当我们在浏览器查看元素时，却发现元素的大小变成了240px 这是因为，在CSS中，盒子模型可以分成： W3C 标准盒子模型 IE 怪异盒子模型 默认情况下，盒子模型为W3C 标准盒子模型 二、标准盒子模型标准盒子模型，是浏览器默认的盒子模型 下面看看标准盒子模型的模型图： 从上图可以看到： 盒子总宽度 = width + padding + border + margin; 盒子总高度 = height + padding + border + margin 也就是，width/height 只是内容高度，不包含 padding 和 border值 所以上面问题中，设置width为200px，但由于存在padding，但实际上盒子的宽度有240px 三、IE 怪异盒子模型同样看看IE 怪异盒子模型的模型图： 从上图可以看到： 盒子总宽度 = width + margin; 盒子总高度 = height + margin; 也就是，width/height 包含了 padding和 border值 Box-sizingCSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度 语法： 1box-sizing: content-box|border-box|inherit: content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致 border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致 inherit 指定 box-sizing 属性的值，应该从父元素继承 回到上面的例子里，设置盒子为 border-box 模型 1234567891011&lt;style&gt; .box &#123; width: 200px; height: 100px; padding: 20px; box-sizing: border-box; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; 盒子模型&lt;/div&gt; 这时候，就可以发现盒子的所占据的宽度为200px","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"说说对Css预编语言的理解？有哪些区别?","slug":"css.说说对Css预编语言的理解？有哪些区别_","date":"2022-08-05T00:35:12.398Z","updated":"2022-08-05T01:52:59.477Z","comments":true,"path":"2022/08/05/css.说说对Css预编语言的理解？有哪些区别_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E8%AF%B4%E8%AF%B4%E5%AF%B9Css%E9%A2%84%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB_/","excerpt":"","text":"说说对Css预编语言的理解？有哪些区别? 一、是什么Css 作为一门标记性语言，语法相对简单，对使用者的要求较低，但同时也带来一些问题 需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 Css 编写经验而很难写出组织良好且易于维护的 Css 代码 Css预处理器便是针对上述问题的解决方案 预处理语言扩充了 Css 语言，增加了诸如变量、混合（mixin）、函数等功能，让 Css 更易维护、方便 本质上，预处理是Css的超集 包含一套自定义的语法及一个解析器，根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 Css 文件 二、有哪些Css预编译语言在前端里面有三大优秀的预编处理器，分别是： sass less stylus sass2007 年诞生，最早也是最成熟的 Css预处理器，拥有 Ruby 社区的支持和 Compass 这一最强大的 Css框架，目前受 LESS 影响，已经进化到了全面兼容 Css 的 Scss 文件后缀名为.sass与scss，可以严格按照 sass 的缩进方式省去大括号和分号 less2009年出现，受SASS的影响较大，但又使用 Css 的语法，让大部分开发者和设计师更容易上手，在 Ruby社区之外支持者远超过 SASS 其缺点是比起 SASS来，可编程功能不够，不过优点是简单和兼容 Css，反过来也影响了 SASS演变到了Scss 的时代 stylusStylus是一个Css的预处理框架，2010 年产生，来自 Node.js社区，主要用来给 Node 项目进行 Css 预处理支持 所以Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的Css。比较年轻，其本质上做的事情与SASS/LESS等类似 三、区别虽然各种预处理器功能强大，但使用最多的，还是以下特性： 变量（variables） 作用域（scope） 代码混合（ mixins） 嵌套（nested rules） 代码模块化（Modules） 因此，下面就展开这些方面的区别 基本使用less和scss 123.box &#123; display: block;&#125; sass 12.box display: block stylus 12.box display: block 嵌套三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 &amp; 也相同 区别只是 Sass 和 Stylus 可以用没有大括号的方式书写 less 12345.a &#123; &amp;.b &#123; color: red; &#125;&#125; 变量变量无疑为 Css 增加了一种有效的复用方式，减少了原来在 Css 中无法避免的重复「硬编码」 less声明的变量必须以@开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号:分隔开 12345@red: #c00;strong &#123; color: @red;&#125; sass声明的变量跟less十分的相似，只是变量名前面使用@开头 123456$red: #c00;strong &#123; color: $red;&#125;stylus`声明的变量没有任何的限定，可以使用`$`开头，结尾的分号`;`可有可无，但变量与变量值之间需要使用`= 在stylus中我们不建议使用@符号开头声明变量 1234red = #c00strong color: red 作用域Css 预编译器把变量赋予作用域，也就是存在生命周期。就像 js一样，它会先从局部作用域查找变量，依次向上级作用域查找 sass中不存在全局变量 12345678910$color: black;.scoped &#123; $bg: blue; $color: white; color: $color; background-color:$bg;&#125;.unscoped &#123; color:$color;&#125; 编译后 1234567.scoped &#123; color:white;/*是白色*/ background-color:blue;&#125;.unscoped &#123; color:white;/*白色（无全局变量概念）*/&#125; 所以，在sass中最好不要定义相同的变量名 less与stylus的作用域跟javascript十分的相似，首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止 12345678910@color: black;.scoped &#123; @bg: blue; @color: white; color: @color; background-color:@bg;&#125;.unscoped &#123; color:@color;&#125; 编译后： 1234567.scoped &#123; color:white;/*白色（调用了局部变量）*/ background-color:blue;&#125;.unscoped &#123; color:black;/*黑色（调用了全局变量）*/&#125; 混入混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，Mixins可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用 可以在Mixins中定义变量或者默认参数 在less中，混合的用法是指将定义好的ClassA中引入另一个已经定义的Class，也能够传递参数，参数变量为@声明 12345678910111213.alert &#123; font-weight: 700;&#125;.highlight(@color: red) &#123; font-size: 1.2em; color: @color;&#125;.heads-up &#123; .alert; .highlight(red);&#125; 编译后 12345678.alert &#123; font-weight: 700;&#125;.heads-up &#123; font-weight: 700; font-size: 1.2em; color: red;&#125; Sass声明mixins时需要使用@mixinn，后面紧跟mixin的名，也可以设置参数，参数名为变量$声明的形式 1234567891011121314@mixin large-text &#123; font: &#123; family: Arial; size: 20px; weight: bold; &#125; color: #ff0000;&#125;.page-title &#123; @include large-text; padding: 4px; margin-top: 10px;&#125; stylus中的混合和前两款Css预处理器语言的混合略有不同，他可以不使用任何符号，就是直接声明Mixins名，然后在定义参数和默认值之间用等号（=）来连接 123456789101112131415error(borderWidth= 2px) &#123; border: borderWidth solid #F00; color: #F00;&#125;.generic-error &#123; padding: 20px; margin: 4px; error(); /* 调用error mixins */&#125;.login-error &#123; left: 12px; position: absolute; top: 20px; error(5px); /* 调用error mixins，并将参数$borderWidth的值指定为5px */&#125; 代码模块化模块化就是将Css代码分成一个个模块 scss、less、stylus三者的使用方法都如下所示 1234@import &#x27;./common&#x27;;@import &#x27;./github-markdown&#x27;;@import &#x27;./mixin&#x27;;@import &#x27;./variables&#x27;;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"CSS如何画一个三角形？原理是什么？","slug":"css.CSS如何画一个三角形？原理是什么？","date":"2022-08-05T00:35:12.334Z","updated":"2022-08-05T01:56:51.741Z","comments":true,"path":"2022/08/05/css.CSS如何画一个三角形？原理是什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.CSS%E5%A6%82%E4%BD%95%E7%94%BB%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2%EF%BC%9F%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"CSS如何画一个三角形？原理是什么？ 一、前言在前端开发的时候，我们有时候会需要用到一个三角形的形状，比如地址选择或者播放器里面播放按钮 通常情况下，我们会使用图片或者svg去完成三角形效果图，但如果单纯使用css如何完成一个三角形呢？ 实现过程似乎也并不困难，通过边框就可完成 二、实现过程在以前也讲过盒子模型，默认情况下是一个矩形，实现也很简单 123456789&lt;style&gt; .border &#123; width: 50px; height: 50px; border: 2px solid; border-color: #96ceb4 #ffeead #d9534f #ffad60; &#125;&lt;/style&gt;&lt;div class=&quot;border&quot;&gt;&lt;/div&gt; 效果如下图所示： 将border设置50px，效果图如下所示： 白色区域则为width、height，这时候只需要你将白色区域部分宽高逐渐变小，最终变为0，则变成如下图所示： 这时候就已经能够看到4个不同颜色的三角形，如果需要下方三角形，只需要将上、左、右边框设置为透明就可以得到下方的红色三角形 但这种方式，虽然视觉上是实现了三角形，但实际上，隐藏的部分任然占据部分高度，需要将上方的宽度去掉 最终实现代码如下： 1234567.border &#123; width: 0; height: 0; border-style:solid; border-width: 0 50px 50px; border-color: transparent transparent #d9534f;&#125; 如果想要实现一个只有边框是空心的三角形，由于这里不能再使用border属性，所以最直接的方法是利用伪类新建一个小一点的三角形定位上去 1234567891011121314151617.border &#123; width: 0; height: 0; border-style:solid; border-width: 0 50px 50px; border-color: transparent transparent #d9534f; position: relative;&#125;.border:after&#123; content: &#x27;&#x27;; border-style:solid; border-width: 0 40px 40px; border-color: transparent transparent #96ceb4; position: absolute; top: 0; left: 0;&#125; 效果图如下所示： i 伪类元素定位参照对象的内容区域宽高都为0，则内容区域即可以理解成中心一点，所以伪元素相对中心这点定位 将元素定位进行微调以及改变颜色，就能够完成下方效果图： 最终代码如下： 123456789.border:after &#123; content: &#x27;&#x27;; border-style: solid; border-width: 0 40px 40px; border-color: transparent transparent #96ceb4; position: absolute; top: 6px; left: -40px;&#125; 三、原理分析可以看到，边框是实现三角形的部分，边框实际上并不是一个直线，如果我们将四条边设置不同的颜色，将边框逐渐放大，可以得到每条边框都是一个梯形 当分别取消边框的时候，发现下面几种情况： 取消一条边的时候，与这条边相邻的两条边的接触部分会变成直的 当仅有邻边时， 两个边会变成对分的三角 当保留边没有其他接触时，极限情况所有东西都会消失 通过上图的变化规则，利用旋转、隐藏，以及设置内容宽高等属性，就能够实现其他类型的三角形 如设置直角三角形，如上图倒数第三行实现过程，我们就能知道整个实现原理 实现代码如下： 1234567891011.box &#123; /* 内部大小 */ width: 0px; height: 0px; /* 边框大小 只设置两条边*/ border-top: #4285f4 solid; border-right: transparent solid; border-width: 85px; /* 其他设置 */ margin: 50px;&#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"如何使用CSS完成视差滚动效果?","slug":"css如何使用CSS完成视差滚动效果_","date":"2022-08-05T00:35:12.306Z","updated":"2022-08-05T01:56:40.946Z","comments":true,"path":"2022/08/05/css如何使用CSS完成视差滚动效果_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CSS%E5%AE%8C%E6%88%90%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C_/","excerpt":"","text":"如何使用CSS完成视差滚动效果? 一、是什么视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验 我们可以把网页解刨成：背景层、内容层、悬浮层 当滚动鼠标滑轮的时候，各个图层以不同的速度移动，形成视觉差的效果 二、实现方式使用css形式实现视觉差滚动效果的方式有： background-attachment transform:translate3D background-attachment作用是设置背景图像是否固定或者随着页面的其余部分滚动 值分别有如下： scroll：默认值，背景图像会随着页面其余部分的滚动而移动 fixed：当页面的其余部分滚动时，背景图像不会移动 inherit：继承父元素background-attachment属性的值 完成滚动视觉差就需要将background-attachment属性设置为fixed，让背景相对于视口固定。及时一个元素有滚动机制，背景也不会随着元素的内容而滚动 也就是说，背景一开始就已经被固定在初始的位置 核心的css代码如下： 12345678910section &#123; height: 100vh;&#125;.g-img &#123; background-image: url(...); background-attachment: fixed; background-size: cover; background-position: center center;&#125; 整体例子如下： 1234567891011121314151617181920212223242526272829303132333435363738&lt;style&gt;div &#123; height: 100vh; background: rgba(0, 0, 0, .7); color: #fff; line-height: 100vh; text-align: center; font-size: 20vh; &#125; .a-img1 &#123; background-image: url(https://images.pexels.com/photos/1097491/pexels-photo-1097491.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; &#125; .a-img2 &#123; background-image: url(https://images.pexels.com/photos/2437299/pexels-photo-2437299.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; &#125; .a-img3 &#123; background-image: url(https://images.pexels.com/photos/1005417/pexels-photo-1005417.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; &#125;&lt;/style&gt; &lt;div class=&quot;a-text&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;a-img1&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;a-text&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;a-img2&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;a-text&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;a-img3&quot;&gt;6&lt;/div&gt; &lt;div class=&quot;a-text&quot;&gt;7&lt;/div&gt; transform:translate3D同样，让我们先来看一下两个概念transform和perspective： transform: css3 属性，可以对元素进行变换(2d/3d)，包括平移 translate,旋转 rotate,缩放 scale,等等 perspective: css3 属性，当元素涉及 3d 变换时，perspective 可以定义我们眼睛看到的 3d 立体效果，即空间感 3D视角示意图如下所示： 举个例子： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;style&gt; html &#123; overflow: hidden; height: 100% &#125; body &#123; /* 视差元素的父级需要3D视角 */ perspective: 1px; transform-style: preserve-3d; height: 100%; overflow-y: scroll; overflow-x: hidden; &#125; #app&#123; width: 100vw; height:200vh; background:skyblue; padding-top:100px; &#125; .one&#123; width:500px; height:200px; background:#409eff; transform: translateZ(0px); margin-bottom: 50px; &#125; .two&#123; width:500px; height:200px; background:#67c23a; transform: translateZ(-1px); margin-bottom: 150px; &#125; .three&#123; width:500px; height:200px; background:#e6a23c; transform: translateZ(-2px); margin-bottom: 150px; &#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;div class=&quot;one&quot;&gt;one&lt;/div&gt; &lt;div class=&quot;two&quot;&gt;two&lt;/div&gt; &lt;div class=&quot;three&quot;&gt;three&lt;/div&gt;&lt;/div&gt; 而这种方式实现视觉差动的原理如下： 容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中， 子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样 滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"什么是响应式设计？响应式设计的基本原理是什么？如何做？","slug":"css.什么是响应式设计？响应式设计的基本原理是什么？如何做？","date":"2022-08-05T00:35:12.225Z","updated":"2022-08-05T01:56:04.592Z","comments":true,"path":"2022/08/05/css.什么是响应式设计？响应式设计的基本原理是什么？如何做？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E4%BB%80%E4%B9%88%E6%98%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E5%81%9A%EF%BC%9F/","excerpt":"","text":"什么是响应式设计？响应式设计的基本原理是什么？如何做？ 一、是什么响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整 描述响应式界面最著名的一句话就是“Content is like water” 大白话便是“如果将屏幕看作容器，那么内容就像水一样” 响应式网站常见特点： 同时适配PC + 平板 + 手机等 标签导航在接近手持终端设备时改变为经典的抽屉式导航 网站的布局会根据视口来调整模块的大小和位置 二、实现方式响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有meta声明viewport 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”&gt; 属性对应如下： width=device-width: 是自适应手机屏幕的尺寸宽度 maximum-scale:是缩放比例的最大值 inital-scale:是缩放的初始化 user-scalable:是用户的可以缩放的操作 实现响应式布局的方式有如下： 媒体查询 百分比 vw/vh rem 媒体查询CSS3中的增加了更多的媒体查询，就像if条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表 使用@Media查询，可以针对不同的媒体类型定义不同的样式，如： 1@media screen and (max-width: 1920px) &#123; ... &#125; 当视口在375px - 600px之间，设置特定字体大小18px 12345@media screen (min-width: 375px) and (max-width: 600px) &#123; body &#123; font-size: 18px; &#125;&#125; 通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片 比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现 百分比通过百分比单位 “ % “ 来实现响应式的效果 比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果 height、width属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素： 子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度 子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。 子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度 可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式 vw/vhvw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度。任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一 与百分比布局很相似，在以前文章提过与%的区别，这里就不再展开述说 rem在以前也讲到，rem是相对于根元素html的font-size属性，默认情况下浏览器字体大小为16px，此时1rem = 16px 可以利用前面提到的媒体查询，针对不同设备分辨率改变font-size的值，如下： 1234567891011121314151617@media screen and (max-width: 414px) &#123; html &#123; font-size: 18px &#125;&#125;@media screen and (max-width: 375px) &#123; html &#123; font-size: 16px &#125;&#125;@media screen and (max-width: 320px) &#123; html &#123; font-size: 12px &#125;&#125; 为了更准确监听设备可视窗口变化，我们可以在css之前插入script标签，内容如下： 1234567891011121314//动态为根元素设置字体大小function init () &#123; // 获取屏幕宽度 var width = document.documentElement.clientWidth // 设置根元素字体大小。此时为宽的10等分 document.documentElement.style.fontSize = width / 10 + &#x27;px&#x27;&#125;//首次加载应用，设置一次init()// 监听手机旋转的事件的时机，重新设置window.addEventListener(&#x27;orientationchange&#x27;, init)// 监听手机窗口变化，重新设置window.addEventListener(&#x27;resize&#x27;, init) 无论设备可视窗口如何变化，始终设置rem为width的1/10，实现了百分比布局 除此之外，我们还可以利用主流UI框架，如：element ui、antd提供的栅格布局实现响应式 小结响应式设计实现通常会从以下几方面思考： 弹性盒子（包括图片、表格、视频）和媒体查询等技术 使用百分比布局创建流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围 使用相对单位使得内容自适应调节 选择断点，针对不同断点实现不同布局和内容展示 三、总结响应式布局优点可以看到： 面对不同分辨率设备灵活性强 能够快捷解决多设备显示适应问题 缺点： 仅适用布局、信息、框架并不复杂的部门类型网站 兼容各种设备工作量大，效率低下 代码累赘，会出现隐藏无用的元素，加载时间加长 其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果 一定程度上改变了网站原有的布局结构，会出现用户混淆的情况","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"怎么理解回流跟重绘？什么场景下会触发？","slug":"css.怎么理解回流跟重绘？什么场景下会触发？","date":"2022-08-05T00:35:12.198Z","updated":"2022-08-05T01:55:48.613Z","comments":true,"path":"2022/08/05/css.怎么理解回流跟重绘？什么场景下会触发？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E8%B7%9F%E9%87%8D%E7%BB%98%EF%BC%9F%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E4%B8%8B%E4%BC%9A%E8%A7%A6%E5%8F%91%EF%BC%9F/","excerpt":"","text":"怎么理解回流跟重绘？什么场景下会触发？ 一、是什么在HTML中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘： 回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置 重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制 具体的浏览器解析渲染机制如下所示： 解析HTML，生成DOM树，解析CSS，生成CSSOM树 将DOM树和CSSOM树结合，生成渲染树(Render Tree) Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小） Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素 Display:将像素发送给GPU，展示在页面上 在页面初始渲染阶段，回流不可避免的触发，可以理解成页面一开始是空白的元素，后面添加了新的元素使页面布局发生改变 当我们对 DOM 的修改引发了 DOM几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来 当我们对 DOM的修改导致了样式的变化（color或background-color），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了重绘 二、如何触发要想减少回流和重绘的次数，首先要了解回流和重绘是如何触发的 回流触发时机回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流，如下面情况： 添加或删除可见的DOM元素 元素的位置发生变化 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等） 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代 页面一开始渲染的时候（这避免不了） 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的） 还有一些容易被忽略的操作：获取一些特定属性的值 ❝ offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight ❞ 这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流 除此还包括getComputedStyle方法，原理是一样的 重绘触发时机触发回流一定会触发重绘 可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘） 除此之外还有一些其他引起重绘行为： 颜色的修改 文本方向的修改 阴影的修改 浏览器优化机制由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列 当你获取布局信息的操作的时候，会强制队列刷新，包括前面讲到的offsetTop等方法都会返回最新的数据 因此浏览器不得不清空队列，触发回流重绘来返回正确的值 三、如何减少我们了解了如何触发回流和重绘的场景，下面给出避免回流的经验： 如果想设定元素的样式，通过改变元素的 class 类名 (尽可能在 DOM 树的最里层) 避免设置多项内联样式 应用元素的动画，使用 position 属性的 fixed 值或 absolute 值(如前文示例所提) 避免使用 table 布局，table 中每个元素的大小以及内容的改动，都会导致整个 table 的重新计算 对于那些复杂的动画，对其设置 position: fixed/absolute，尽可能地使元素脱离文档流，从而减少对其他元素的影响 使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 避免使用 CSS 的 JavaScript 表达式 在使用 JavaScript 动态插入多个节点时, 可以使用DocumentFragment. 创建后一次插入. 就能避免多次的渲染性能 但有时候，我们会无可避免地进行回流或者重绘，我们可以更好使用它们 例如，多次修改一个把元素布局的时候，我们很可能会如下操作 12345const el = document.getElementById(&#x27;el&#x27;)for(let i=0;i&lt;10;i++) &#123; el.style.top = el.offsetTop + 10 + &quot;px&quot;; el.style.left = el.offsetLeft + 10 + &quot;px&quot;;&#125; 每次循环都需要获取多次offset属性，比较糟糕，可以使用变量的形式缓存起来，待计算完毕再提交给浏览器发出重计算请求 12345678910111213// 缓存offsetLeft与offsetTop的值const el = document.getElementById(&#x27;el&#x27;) let offLeft = el.offsetLeft, offTop = el.offsetTop// 在JS层面进行计算for(let i=0;i&lt;10;i++) &#123; offLeft += 10 offTop += 10&#125;// 一次性将计算结果应用到DOM上el.style.left = offLeft + &quot;px&quot;el.style.top = offTop + &quot;px&quot; 我们还可避免改变样式，使用类名去合并样式 12345const container = document.getElementById(&#x27;container&#x27;)container.style.width = &#x27;100px&#x27;container.style.height = &#x27;200px&#x27;container.style.border = &#x27;10px solid red&#x27;container.style.color = &#x27;red&#x27; 使用类名去合并样式 123456789101112&lt;style&gt; .basic_style &#123; width: 100px; height: 200px; border: 10px solid red; color: red; &#125;&lt;/style&gt;&lt;script&gt; const container = document.getElementById(&#x27;container&#x27;) container.classList.add(&#x27;basic_style&#x27;)&lt;/script&gt; 前者每次单独操作，都去触发一次渲染树更改（新浏览器不会）， 都去触发一次渲染树更改，从而导致相应的回流与重绘过程 合并之后，等于我们将所有的更改一次性发出 我们还可以通过通过设置元素属性display: none，将其从页面上去掉，然后再进行后续操作，这些后续操作也不会触发回流与重绘，这个过程称为离线操作 12345const container = document.getElementById(&#x27;container&#x27;)container.style.width = &#x27;100px&#x27;container.style.height = &#x27;200px&#x27;container.style.border = &#x27;10px solid red&#x27;container.style.color = &#x27;red&#x27; 离线操作后 12345678let container = document.getElementById(&#x27;container&#x27;)container.style.display = &#x27;none&#x27;container.style.width = &#x27;100px&#x27;container.style.height = &#x27;200px&#x27;container.style.border = &#x27;10px solid red&#x27;container.style.color = &#x27;red&#x27;...（省略了许多类似的后续操作）container.style.display = &#x27;block&#x27;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"CSS3常见动画有哪些？实现方式？","slug":"css.CSS3常见动画有哪些？实现方式？","date":"2022-08-05T00:35:12.172Z","updated":"2022-08-05T01:55:19.606Z","comments":true,"path":"2022/08/05/css.CSS3常见动画有哪些？实现方式？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.CSS3%E5%B8%B8%E8%A7%81%E5%8A%A8%E7%94%BB%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%EF%BC%9F/","excerpt":"","text":"CSS3常见动画有哪些？实现方式？ 一、是什么CSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块 即指元素从一种样式逐渐过渡为另一种样式的过程 常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合 css实现动画的方式，有如下几种： transition 实现渐变动画 transform 转变动画 animation 实现自定义动画 二、实现方式transition 实现渐变动画transition的属性如下： property:填写需要变化的css属性 duration:完成过渡效果需要的时间单位(s或者ms) timing-function:完成效果的速度曲线 delay: 动画效果的延迟触发时间 其中timing-function的值有如下： 值 描述 linear 匀速（等于 cubic-bezier(0,0,1,1)） ease 从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)） ease-in 慢慢变快（等于 cubic-bezier(0.42,0,1,1)） ease-out 慢慢变慢（等于 cubic-bezier(0,0,0.58,1)） ease-in-out 先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)），渐显渐隐效果 cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值 注意：并不是所有的属性都能使用过渡的，如display:none&lt;-&gt;display:block 举个例子，实现鼠标移动上去发生变化动画效果 1234567891011121314151617181920212223242526&lt;style&gt; .base &#123; width: 100px; height: 100px; display: inline-block; background-color: #0EA9FF; border-width: 5px; border-style: solid; border-color: #5daf34; transition-property: width, height, background-color, border-width; transition-duration: 2s; transition-timing-function: ease-in; transition-delay: 500ms; &#125; /*简写*/ /*transition: all 2s ease-in 500ms;*/ .base:hover &#123; width: 200px; height: 200px; background-color: #5daf34; border-width: 10px; border-color: #3a8ee6; &#125;&lt;/style&gt;&lt;div class=&quot;base&quot;&gt;&lt;/div&gt; transform 转变动画包含四个常用的功能： translate：位移 scale：缩放 rotate：旋转 skew：倾斜 一般配合transition过度使用 注意的是，transform不支持inline元素，使用前把它变成block 举个例子 12345678910111213141516171819202122232425&lt;style&gt; .base &#123; width: 100px; height: 100px; display: inline-block; background-color: #0EA9FF; border-width: 5px; border-style: solid; border-color: #5daf34; transition-property: width, height, background-color, border-width; transition-duration: 2s; transition-timing-function: ease-in; transition-delay: 500ms; &#125; .base2 &#123; transform: none; transition-property: transform; transition-delay: 5ms; &#125; .base2:hover &#123; transform: scale(0.8, 1.5) rotate(35deg) skew(5deg) translate(15px, 25px); &#125;&lt;/style&gt; &lt;div class=&quot;base base2&quot;&gt;&lt;/div&gt; 可以看到盒子发生了旋转，倾斜，平移，放大 animation 实现自定义动画animation是由 8 个属性的简写，分别如下： 属性 描述 属性值 animation-duration 指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0 animation-timing-function 指定动画计时函数，即动画的速度曲线，默认是 “ease” linear、ease、ease-in、ease-out、ease-in-out animation-delay 指定动画延迟时间，即动画何时开始，默认是 0 animation-iteration-count 指定动画播放的次数，默认是 1 animation-direction 指定动画播放的方向 默认是 normal normal、reverse、alternate、alternate-reverse animation-fill-mode 指定动画填充模式。默认是 none forwards、backwards、both animation-play-state 指定动画播放状态，正在运行或暂停。默认是 running running、pauser animation-name 指定 @keyframes 动画的名称 CSS 动画只需要定义一些关键的帧，而其余的帧，浏览器会根据计时函数插值计算出来， 通过 @keyframes 来定义关键帧 因此，如果我们想要让元素旋转一圈，只需要定义开始和结束两帧即可： 12345678@keyframes rotate&#123; from&#123; transform: rotate(0deg); &#125; to&#123; transform: rotate(360deg); &#125;&#125; from 表示最开始的那一帧，to 表示结束时的那一帧 也可以使用百分比刻画生命周期 1234567891011@keyframes rotate&#123; 0%&#123; transform: rotate(0deg); &#125; 50%&#123; transform: rotate(180deg); &#125; 100%&#123; transform: rotate(360deg); &#125;&#125; 定义好了关键帧后，下来就可以直接用它了： 1animation: rotate 2s; 三、总结 属性 含义 transition（过度） 用于设置元素的样式过度，和animation有着类似的效果，但细节上有很大的不同 transform（变形） 用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系，就相当于color一样用来设置元素的“外表” translate（移动） 只是transform的一个属性值，即移动 animation（动画） 用于设置动画属性，他是一个简写的属性，包含6个属性","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"CSS3新增了哪些新特性？","slug":"css.CSS3新增了哪些新特性？","date":"2022-08-05T00:35:12.149Z","updated":"2022-08-05T01:55:12.915Z","comments":true,"path":"2022/08/05/css.CSS3新增了哪些新特性？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.CSS3%E6%96%B0%E5%A2%9E%E4%BA%86%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9F/","excerpt":"","text":"CSS3新增了哪些新特性？ 一、是什么css，即层叠样式表（Cascading Style Sheets）的简称，是一种标记语言，由浏览器解释执行用来使页面变得更为美观 css3是css的最新标准，是向后兼容的，CSS1/2的特性在CSS3 里都是可以使用的 CSS3 也增加了很多新特性，为开发者带来了更佳的开发体验 从几个维度列举一些常见的特性，如下 二、选择器css3中新增了一些选择器，主要为如下图所示： 三、新样式边框css3新增了三个边框属性，分别是： border-radius：创建圆角边框 box-shadow：为元素添加阴影 border-image：使用图片来绘制边框 box-shadow设置元素阴影，设置属性如下： 水平阴影 垂直阴影 模糊距离(虚实) 阴影尺寸(影子大小) 阴影颜色 内/外阴影 其中水平阴影和垂直阴影是必须设置的 背景新增了几个关于背景的属性，分别是background-clip、background-origin、background-size和background-break background-clip用于确定背景画区，有以下几种可能的属性： background-clip: border-box; 背景从border开始显示 background-clip: padding-box; 背景从padding开始显示 background-clip: content-box; 背景显content区域开始显示 background-clip: no-clip; 默认属性，等同于border-box 通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围 background-origin当我们设置背景图片时，图片是会以左上角对齐，但是是以border的左上角对齐还是以padding的左上角或者content的左上角对齐? border-origin正是用来设置这个的 background-origin: border-box; 从border开始计算background-position background-origin: padding-box; 从padding开始计算background-position background-origin: content-box; 从content开始计算background-position 默认情况是padding-box，即以padding的左上角为原点 background-sizebackground-size属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性： background-size: contain; 缩小图片以适合元素（维持像素长宽比） background-size: cover; 扩展元素以填补元素（维持像素长宽比） background-size: 100px 100px; 缩小图片至指定的大小 background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包 含元素的尺寸 background-break元素可以被分成几个独立的盒子（如使内联元素span跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示 background-break: continuous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样） background-break: bounding-box; 把盒之间的距离计算在内； background-break: each-box; 为每个盒子单独重绘背景 文字word-wrap语法：word-wrap: normal|break-word normal：使用浏览器默认的换行 break-all：允许在单词内换行 text-overflowtext-overflow设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择： clip：修剪文本 ellipsis：显示省略符号来代表被修剪的文本 text-shadowtext-shadow可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色 text-decorationCSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置： text-fill-color: 设置文字内部填充颜色 text-stroke-color: 设置文字边界填充颜色 text-stroke-width: 设置文字边界宽度 颜色1css3`新增了新的颜色表示方式`rgba`与`hsla rgba分为两部分，rgb为颜色值，a为透明度 hala分为四部分，h为色相，s为饱和度，l为亮度，a为透明度 四、transition 过渡transition属性可以被指定为一个或多个CSS属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容： 过度效果 持续时间 语法如下： 1transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0) 上面为简写模式，也可以分开写各个属性 1234transition-property: width; transition-duration: 1s;transition-timing-function: linear;transition-delay: 2s; 五、transform 转换transform属性允许你旋转，缩放，倾斜或平移给定元素 1transform-origin`：转换元素的位置（围绕那个点进行转换），默认值为`(x,y,z):(50%,50%,0) 使用方式： transform: translate(120px, 50%)：位移 transform: scale(2, 0.5)：缩放 transform: rotate(0.5turn)：旋转 transform: skew(30deg, 20deg)：倾斜 六、animation 动画动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬 animation也有很多的属性 animation-name：动画名称 animation-duration：动画持续时间 animation-timing-function：动画时间函数 animation-delay：动画延迟时间 animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环 animation-direction：动画执行方向 animation-paly-state：动画播放状态 animation-fill-mode：动画填充模式 七、渐变颜色渐变是指在两个颜色之间平稳的过渡，css3渐变包括 linear-gradient：线性渐变 background-image: linear-gradient(direction, color-stop1, color-stop2, …); radial-gradient：径向渐变 linear-gradient(0deg, red, green); 八、其他关于css3其他的新特性还包括flex弹性布局、Grid栅格布局，这两个布局在以前就已经讲过，这里就不再展示 除此之外，还包括多列布局、媒体查询、混合模式等等……","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"说说flexbox（弹性盒布局模型）,以及适用场景","slug":"css.说说flexbox（弹性盒布局模型）,以及适用场景？","date":"2022-08-05T00:35:12.090Z","updated":"2022-08-05T01:54:00.999Z","comments":true,"path":"2022/08/05/css.说说flexbox（弹性盒布局模型）,以及适用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/css.%E8%AF%B4%E8%AF%B4flexbox%EF%BC%88%E5%BC%B9%E6%80%A7%E7%9B%92%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B%EF%BC%89,%E4%BB%A5%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说flexbox（弹性盒布局模型）,以及适用场景？ 一、是什么Flexible Box 简称 flex，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局 采用Flex布局的元素，称为flex容器container 它的所有子元素自动成为容器成员，称为flex项目item 容器中默认存在两条轴，主轴和交叉轴，呈90度关系。项目默认沿主轴排列，通过flex-direction来决定主轴的方向 每根轴都有起点和终点，这对于元素的对齐非常重要 二、属性关于flex常用的属性，我们可以划分为容器属性和容器成员属性 容器属性有： flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction决定主轴的方向(即项目的排列方向) 123.container &#123; flex-direction: row | row-reverse | column | column-reverse; &#125; 属性对应如下： row（默认值）：主轴为水平方向，起点在左端 row-reverse：主轴为水平方向，起点在右端 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿 如下图所示： flex-wrap弹性元素永远沿主轴排列，那么如果主轴排不下，通过flex-wrap决定容器内项目是否可换行 123.container &#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; 属性对应如下： nowrap（默认值）：不换行 wrap：换行，第一行在上方 wrap-reverse：换行，第一行在下方 默认情况是不换行，但这里也不会任由元素直接溢出容器，会涉及到元素的弹性伸缩 flex-flow是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap 123.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125; justify-content定义了项目在主轴上的对齐方式 123.box &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125; 属性对应如下： flex-start（默认值）：左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目之间的间隔都相等 space-around：两个项目两侧间隔相等 效果图如下： align-items定义项目在交叉轴上如何对齐 123.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125; 属性对应如下： flex-start：交叉轴的起点对齐 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline: 项目的第一行文字的基线对齐 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度 align-content定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用 123.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125; 属性对应如吓： flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍 stretch（默认值）：轴线占满整个交叉轴 效果图如下： 容器成员属性如下： order flex-grow flex-shrink flex-basis flex align-self order定义项目的排列顺序。数值越小，排列越靠前，默认为0 123.item &#123; order: &lt;integer&gt;;&#125; flex-grow上面讲到当容器设为flex-wrap: nowrap;不换行的时候，容器宽度有不够分的情况，弹性元素会根据flex-grow来决定 定义项目的放大比例（容器宽度&gt;元素总宽度时如何伸展） 默认为0，即如果存在剩余空间，也不放大 123.item &#123; flex-grow: &lt;number&gt;;&#125; 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话） 如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍 弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论flex-grow是什么值都不会生效 flex-shrink定义了项目的缩小比例（容器宽度&lt;元素总宽度时如何收缩），默认为1，即如果空间不足，该项目将缩小 123.item &#123; flex-shrink: &lt;number&gt;; /* default 1 */&#125; 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小 如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小 在容器宽度有剩余时，flex-shrink也是不会生效的 flex-basis设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在flex-grow和flex-shrink生效前的尺寸 浏览器根据这个属性，计算主轴是否有多余空间，默认值为auto，即项目的本来大小，如设置了width则元素尺寸由width/height决定（主轴方向），没有设置则由内容决定 123.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; 当设置为0的是，会根据内容撑开 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间 flexflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，也是比较难懂的一个复合属性 123.item &#123; flex: none | [ &lt;&#x27;flex-grow&#x27;&gt; &lt;&#x27;flex-shrink&#x27;&gt;? || &lt;&#x27;flex-basis&#x27;&gt; ]&#125; 一些属性有： flex: 1 = flex: 1 1 0% flex: 2 = flex: 2 1 0% flex: auto = flex: 1 1 auto flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩 flex:1 和 flex:auto 的区别，可以归结于flex-basis:0和flex-basis:auto的区别 当设置为0时（绝对弹性元素），此时相当于告诉flex-grow和flex-shrink在伸缩的时候不需要考虑我的尺寸 当设置为auto时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑 注意：建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值 align-self允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性 默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch 123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; 效果图如下： 三、应用场景在以前的文章中，我们能够通过flex简单粗暴的实现元素水平垂直方向的居中，以及在两栏三栏自适应布局中通过flex完成，这里就不再展开代码的演示 包括现在在移动端、小程序这边的开发，都建议使用flex进行布局 参考文献 https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"HTML5有哪些更新","slug":"html.HTML5有哪些更新","date":"2022-08-05T00:30:23.673Z","updated":"2022-08-05T07:23:48.497Z","comments":true,"path":"2022/08/05/html.HTML5有哪些更新/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/html.HTML5%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9B%B4%E6%96%B0/","excerpt":"","text":"1. 语义化标签 header：定义文档的页眉（头部）； nav：定义导航链接的部分； footer：定义文档或节的页脚（底部）； article：定义文章内容； section：定义文档中的节（section、区段）； aside：定义其所处内容之外的内容（侧边） 2. 媒体标签（1） audio：音频1&lt;audio src=&#x27;&#x27; controls autoplay loop=&#x27;true&#x27;&gt;&lt;/audio&gt; 属性： controls 控制面板 autoplay 自动播放 loop=‘true’ 循环播放 （2）video视频1&lt;video src=&#x27;&#x27; poster=&#x27;imgs/aa.jpg&#x27; controls&gt;&lt;/video&gt; 属性： poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。 controls 控制面板 width height （3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。1234&lt;video&gt; &lt;source src=&#x27;aa.flv&#x27; type=&#x27;video/flv&#x27;&gt;&lt;/source&gt; &lt;source src=&#x27;aa.mp4&#x27; type=&#x27;video/mp4&#x27;&gt;&lt;/source&gt;&lt;/video&gt; 1. 语义化标签1. 语义化标签1. 语义化标签1. 语义化标签1. 语义化标签","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"常⽤的meta标签有哪些","slug":"html.常⽤的meta标签有哪些","date":"2022-08-05T00:18:24.548Z","updated":"2022-08-05T07:23:58.196Z","comments":true,"path":"2022/08/05/html.常⽤的meta标签有哪些/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/05/html.%E5%B8%B8%E2%BD%A4%E7%9A%84meta%E6%A0%87%E7%AD%BE%E6%9C%89%E5%93%AA%E4%BA%9B/","excerpt":"","text":"meta 标签由 name 和 content 属性定义，用来描述网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name.常用的meta标签：（1）charset，用来描述HTML文档的编码类型：1&lt;meta charset=&quot;UTF-8&quot; &gt; （2） keywords，页面关键词：1&lt;meta name=&quot;keywords&quot; content=&quot;关键词&quot; /&gt; （3）description，页面描述：1&lt;meta name=&quot;description&quot; content=&quot;页面描述内容&quot; /&gt; （4）refresh，页面重定向和刷新1&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt; （5）viewport，适配移动端，可以控制视口的大小和比例：1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt; 其中，content 参数有以下几种： width viewport ：宽度(数值/device-width) height viewport ：高度(数值/device-height) initial-scale ：初始缩放比例 maximum-scale ：最大缩放比例 minimum-scale ：最小缩放比例 user-scalable ：是否允许用户缩放(yes/no） （6）搜索引擎索引方式：1&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; 其中，content 参数有以下几种： all：文件将被检索，且页面上的链接可以被查询； none：文件将不被检索，且页面上的链接不可以被查询； index：文件将被检索； follow：页面上的链接可以被查询； noindex：文件将不被检索； nofollow：页面上的链接不可以被查询。","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"script标签中defer和async的区别","slug":"html.script标签中defer和async的区别","date":"2022-08-04T10:58:10.004Z","updated":"2022-08-05T07:23:44.434Z","comments":true,"path":"2022/08/04/html.script标签中defer和async的区别/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/html.script%E6%A0%87%E7%AD%BE%E4%B8%ADdefer%E5%92%8Casync%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。 下图可以直观的看出三者之间的区别: 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下： 1.执行顺序： 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；2.脚本是否并行执行：async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行进行的，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"DOCTYPE(⽂档类型) 的作⽤","slug":"html.DOCTYPE(⽂档类型) 的作⽤","date":"2022-08-04T10:26:49.894Z","updated":"2022-08-05T07:23:51.234Z","comments":true,"path":"2022/08/04/html.DOCTYPE(⽂档类型) 的作⽤/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/html.DOCTYPE(%E2%BD%82%E6%A1%A3%E7%B1%BB%E5%9E%8B)%20%E7%9A%84%E4%BD%9C%E2%BD%A4/","excerpt":"","text":"DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。 浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是CSS1Compat）： CSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。 BackCompat：怪异模式(混杂模式)(Quick mode)，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"对HTML语义化的理解","slug":"html.对HTML语义化的理解","date":"2022-08-04T09:31:03.971Z","updated":"2022-08-05T07:23:54.894Z","comments":true,"path":"2022/08/04/html.对HTML语义化的理解/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/html.%E5%AF%B9HTML%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。通俗来讲就是用正确的标签做正确的事情。语义化的优点如下： 对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。 常见的语义化标签： 1234567891011121314&lt;header&gt;&lt;/header&gt; 头部&lt;nav&gt;&lt;/nav&gt; 导航栏&lt;section&gt;&lt;/section&gt; 区块（有语义化的div）&lt;main&gt;&lt;/main&gt; 主要区域&lt;article&gt;&lt;/article&gt; 主要内容&lt;aside&gt;&lt;/aside&gt; 侧边栏&lt;footer&gt;&lt;/footer&gt; 底部","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"src和href的区别","slug":"html.src和href的区别","date":"2022-08-04T09:14:43.116Z","updated":"2022-08-05T07:23:41.365Z","comments":true,"path":"2022/08/04/html.src和href的区别/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/html.src%E5%92%8Chref%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"src和href都是用来引用外部的资源，它们的区别如下： src： 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。 href： 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"你是怎么理解ES6中 Decorator 的？使用场景？","slug":"es6.你是怎么理解ES6中 Decorator 的？使用场景？","date":"2022-08-04T08:44:01.192Z","updated":"2022-08-04T09:30:41.327Z","comments":true,"path":"2022/08/04/es6.你是怎么理解ES6中 Decorator 的？使用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3ES6%E4%B8%AD%20Decorator%20%E7%9A%84%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"你是怎么理解ES6中 Decorator 的？使用场景？ 一、介绍Decorator，即装饰器，从名字上很容易让我们联想到装饰者模式 简单来讲，装饰者模式就是一种在不改变原类和使用继承的情况下，动态地扩展对象功能的设计理论。 ES6中Decorator功能亦如此，其本质也不是什么高大上的结构，就是一个普通的函数，用于扩展类属性和类方法 这里定义一个士兵，这时候他什么装备都没有 12class soldier&#123; &#125; 定义一个得到 AK 装备的函数，即装饰器 123function strong(target)&#123; target.AK = true&#125; 使用该装饰器对士兵进行增强 123@strongclass soldier&#123;&#125; 这时候士兵就有武器了 1soldier.AK // true 上述代码虽然简单，但也能够清晰看到了使用Decorator两大优点： 代码可读性变强了，装饰器命名相当于一个注释 在不改变原有代码情况下，对原来功能进行扩展 二、用法Docorator修饰对象为下面两种： 类的装饰 类属性的装饰 类的装饰当对类本身进行装饰的时候，能够接受一个参数，即类本身 将装饰器行为进行分解，大家能够有个更深入的了解 1234567@decoratorclass A &#123;&#125;// 等同于class A &#123;&#125;A = decorator(A) || A; 下面@testable就是一个装饰器，target就是传入的类，即MyTestableClass，实现了为类添加静态属性 12345678910@testableclass MyTestableClass &#123; // ...&#125;function testable(target) &#123; target.isTestable = true;&#125;MyTestableClass.isTestable // true 如果想要传递参数，可以在装饰器外层再封装一层函数 12345678910111213function testable(isTestable) &#123; return function(target) &#123; target.isTestable = isTestable; &#125;&#125;@testable(true)class MyTestableClass &#123;&#125;MyTestableClass.isTestable // true@testable(false)class MyClass &#123;&#125;MyClass.isTestable // false 类属性的装饰当对类属性进行装饰的时候，能够接受三个参数： 类的原型对象 需要装饰的属性名 装饰属性名的描述对象 首先定义一个readonly装饰器 1234function readonly(target, name, descriptor)&#123; descriptor.writable = false; // 将可写属性设为false return descriptor;&#125; 使用readonly装饰类的name方法 1234class Person &#123; @readonly name() &#123; return `$&#123;this.first&#125; $&#123;this.last&#125;` &#125;&#125; 相当于以下调用 1readonly(Person.prototype, &#x27;name&#x27;, descriptor); 如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行 1234567891011121314function dec(id)&#123; console.log(&#x27;evaluated&#x27;, id); return (target, property, descriptor) =&gt;console.log(&#x27;executed&#x27;, id);&#125;class Example &#123; @dec(1) @dec(2) method()&#123;&#125;&#125;// evaluated 1// evaluated 2// executed 2// executed 1 外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行 注意装饰器不能用于修饰函数，因为函数存在变量声明情况 123456789var counter = 0;var add = function () &#123; counter++;&#125;;@addfunction foo() &#123;&#125; 编译阶段，变成下面 123456789101112var counter;var add;@addfunction foo() &#123;&#125;counter = 0;add = function () &#123; counter++;&#125;; 意图是执行后counter等于 1，但是实际上结果是counter等于 0 三、使用场景基于Decorator强大的作用，我们能够完成各种场景的需求，下面简单列举几种： 使用react-redux的时候，如果写成下面这种形式，既不雅观也很麻烦 123class MyReactComponent extends React.Component &#123;&#125;export default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent); 通过装饰器就变得简洁多了 12@connect(mapStateToProps, mapDispatchToProps)export default class MyReactComponent extends React.Component &#123;&#125; 将mixins，也可以写成装饰器，让使用更为简洁了 12345678910111213141516function mixins(...list) &#123; return function (target) &#123; Object.assign(target.prototype, ...list); &#125;;&#125;// 使用const Foo = &#123; foo() &#123; console.log(&#x27;foo&#x27;) &#125;&#125;;@mixins(Foo)class MyClass &#123;&#125;let obj = new MyClass();obj.foo() // &quot;foo&quot; 下面再讲讲core-decorators.js几个常见的装饰器 @antobindautobind装饰器使得方法中的this对象，绑定原始对象 1234567891011121314import &#123; autobind &#125; from &#x27;core-decorators&#x27;;class Person &#123; @autobind getPerson() &#123; return this; &#125;&#125;let person = new Person();let getPerson = person.getPerson;getPerson() === person;// true @readonlyreadonly装饰器使得属性或方法不可写 12345678910import &#123; readonly &#125; from &#x27;core-decorators&#x27;;class Meal &#123; @readonly entree = &#x27;steak&#x27;;&#125;var dinner = new Meal();dinner.entree = &#x27;salmon&#x27;;// Cannot assign to read only property &#x27;entree&#x27; of [object Object] @deprecatedeprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除 1234567891011121314151617import &#123; deprecate &#125; from &#x27;core-decorators&#x27;;class Person &#123; @deprecate facepalm() &#123;&#125; @deprecate(&#x27;功能废除了&#x27;) facepalmHard() &#123;&#125;&#125;let person = new Person();person.facepalm();// DEPRECATION Person#facepalm: This function will be removed in future versions.person.facepalmHard();// DEPRECATION Person#facepalmHard: 功能废除了","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"理解ES6中Proxy的？使用场景","slug":"es6.面试官：你是怎么理解ES6中Proxy的？使用场景_","date":"2022-08-04T08:44:01.171Z","updated":"2022-08-05T06:07:00.107Z","comments":true,"path":"2022/08/04/es6.面试官：你是怎么理解ES6中Proxy的？使用场景_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3ES6%E4%B8%ADProxy%E7%9A%84%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF_/","excerpt":"","text":"你是怎么理解ES6中Proxy的？使用场景? 一、介绍定义： 用于定义基本操作的自定义行为 本质： 修改的是程序默认形为，就形同于在编程语言层面上做修改，属于元编程(meta programming) 元编程（Metaprogramming，又译超编程，是指某类计算机程序的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作 一段代码来理解 1234567#!/bin/bash# metaprogramecho &#x27;#!/bin/bash&#x27; &gt;programfor ((I=1; I&lt;=1024; I++)) do echo &quot;echo $I&quot; &gt;&gt;programdonechmod +x program 这段程序每执行一次能帮我们生成一个名为program的文件，文件内容为1024行echo，如果我们手动来写1024行代码，效率显然低效 元编程优点：与手工编写全部代码相比，程序员可以获得更高的工作效率，或者给与程序更大的灵活度去处理新的情形而无需重新编译 Proxy 亦是如此，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等） 二、用法Proxy为 构造函数，用来生成 Proxy实例 1var proxy = new Proxy(target, handler) 参数target表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理）） handler通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p的行为 handler解析关于handler拦截属性，有如下： get(target,propKey,receiver)：拦截对象属性的读取 set(target,propKey,value,receiver)：拦截对象属性的设置 has(target,propKey)：拦截propKey in proxy的操作，返回一个布尔值 deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值 ownKeys(target)：拦截Object.keys(proxy)、for...in等循环，返回一个数组 getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象 defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc），返回一个布尔值 preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值 getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象 isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值 setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值 apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作 construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作 Reflect若需要在Proxy内部调用对象的默认行为，建议使用Reflect，其是ES6中操作对象而提供的新 API 基本特点： 只要Proxy对象具有的代理方法，Reflect对象全部具有，以静态方法的形式存在 修改某些Object方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回false） 让Object操作都变成函数行为 下面我们介绍proxy几种用法： get()get接受三个参数，依次为目标对象、属性名和 proxy 实例本身，最后一个参数可选 1234567891011var person = &#123; name: &quot;张三&quot;&#125;;var proxy = new Proxy(person, &#123; get: function(target, propKey) &#123; return Reflect.get(target,propKey) &#125;&#125;);proxy.name // &quot;张三&quot; get能够对数组增删改查进行拦截，下面是试下你数组读取负数的索引 123456789101112131415161718function createArray(...elements) &#123; let handler = &#123; get(target, propKey, receiver) &#123; let index = Number(propKey); if (index &lt; 0) &#123; propKey = String(target.length + index); &#125; return Reflect.get(target, propKey, receiver); &#125; &#125;; let target = []; target.push(...elements); return new Proxy(target, handler);&#125;let arr = createArray(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);arr[-1] // c 注意：如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错 123456789101112131415161718const target = Object.defineProperties(&#123;&#125;, &#123; foo: &#123; value: 123, writable: false, configurable: false &#125;,&#125;);const handler = &#123; get(target, propKey) &#123; return &#x27;abc&#x27;; &#125;&#125;;const proxy = new Proxy(target, handler);proxy.foo// TypeError: Invariant check failed set()set方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身 假定Person对象有一个age属性，该属性应该是一个不大于 200 的整数，那么可以使用Proxy保证age的属性值符合要求 1234567891011121314151617181920212223let validator = &#123; set: function(obj, prop, value) &#123; if (prop === &#x27;age&#x27;) &#123; if (!Number.isInteger(value)) &#123; throw new TypeError(&#x27;The age is not an integer&#x27;); &#125; if (value &gt; 200) &#123; throw new RangeError(&#x27;The age seems invalid&#x27;); &#125; &#125; // 对于满足条件的 age 属性以及其他属性，直接保存 obj[prop] = value; &#125;&#125;;let person = new Proxy(&#123;&#125;, validator);person.age = 100;person.age // 100person.age = &#x27;young&#x27; // 报错person.age = 300 // 报错 如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用 123456789101112131415const obj = &#123;&#125;;Object.defineProperty(obj, &#x27;foo&#x27;, &#123; value: &#x27;bar&#x27;, writable: false,&#125;);const handler = &#123; set: function(obj, prop, value, receiver) &#123; obj[prop] = &#x27;baz&#x27;; &#125;&#125;;const proxy = new Proxy(obj, handler);proxy.foo = &#x27;baz&#x27;;proxy.foo // &quot;bar&quot; 注意，严格模式下，set代理如果没有返回true，就会报错 1234567891011&#x27;use strict&#x27;;const handler = &#123; set: function(obj, prop, value, receiver) &#123; obj[prop] = receiver; // 无论有没有下面这一行，都会报错 return false; &#125;&#125;;const proxy = new Proxy(&#123;&#125;, handler);proxy.foo = &#x27;bar&#x27;;// TypeError: &#x27;set&#x27; on proxy: trap returned falsish for property &#x27;foo&#x27; deleteProperty()deleteProperty方法用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除 1234567891011121314151617var handler = &#123; deleteProperty (target, key) &#123; invariant(key, &#x27;delete&#x27;); Reflect.deleteProperty(target,key) return true; &#125;&#125;;function invariant (key, action) &#123; if (key[0] === &#x27;_&#x27;) &#123; throw new Error(`无法删除私有属性`); &#125;&#125;var target = &#123; _prop: &#x27;foo&#x27; &#125;;var proxy = new Proxy(target, handler);delete proxy._prop// Error: 无法删除私有属性 注意，目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错 取消代理1Proxy.revocable(target, handler); 三、使用场景Proxy其功能非常类似于设计模式中的代理模式，常用功能如下： 拦截和监视外部对对象的访问 降低函数或类的复杂度 在复杂操作前对操作进行校验或对所需资源进行管理 使用 Proxy 保障数据类型的准确性 123456789101112131415let numericDataStore = &#123; count: 0, amount: 1234, total: 14 &#125;;numericDataStore = new Proxy(numericDataStore, &#123; set(target, key, value, proxy) &#123; if (typeof value !== &#x27;number&#x27;) &#123; throw Error(&quot;属性只能是number类型&quot;); &#125; return Reflect.set(target, key, value, proxy); &#125;&#125;);numericDataStore.count = &quot;foo&quot;// Error: 属性只能是number类型numericDataStore.count = 333// 赋值成功 声明了一个私有的 apiKey，便于 api 这个对象内部的方法调用，但不希望从外部也能够访问 api._apiKey 1234567891011121314151617181920212223let api = &#123; _apiKey: &#x27;123abc456def&#x27;, getUsers: function()&#123; &#125;, getUser: function(userId)&#123; &#125;, setUser: function(userId, config)&#123; &#125;&#125;;const RESTRICTED = [&#x27;_apiKey&#x27;];api = new Proxy(api, &#123; get(target, key, proxy) &#123; if(RESTRICTED.indexOf(key) &gt; -1) &#123; throw Error(`$&#123;key&#125; 不可访问.`); &#125; return Reflect.get(target, key, proxy); &#125;, set(target, key, value, proxy) &#123; if(RESTRICTED.indexOf(key) &gt; -1) &#123; throw Error(`$&#123;key&#125; 不可修改`); &#125; return Reflect.get(target, key, value, proxy); &#125;&#125;);console.log(api._apiKey)api._apiKey = &#x27;987654321&#x27;// 上述都抛出错误 还能通过使用Proxy实现观察者模式 观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行 observable函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数 12345678910const queuedObservers = new Set();const observe = fn =&gt; queuedObservers.add(fn);const observable = obj =&gt; new Proxy(obj, &#123;set&#125;);function set(target, key, value, receiver) &#123; const result = Reflect.set(target, key, value, receiver); queuedObservers.forEach(observer =&gt; observer()); return result;&#125; 观察者函数都放进Set集合，当修改obj的值，在会set函数中拦截，自动执行Set所有的观察者","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"怎么理解ES6中 Generator的？使用场景？","slug":"es6.怎么理解ES6中 Generator的？使用场景？","date":"2022-08-04T08:44:01.152Z","updated":"2022-08-04T09:30:33.293Z","comments":true,"path":"2022/08/04/es6.怎么理解ES6中 Generator的？使用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3ES6%E4%B8%AD%20Generator%E7%9A%84%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"怎么理解ES6中 Generator的？使用场景？ 一、介绍Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同 回顾下上文提到的解决异步的手段： 回调函数 promise 那么，上文我们提到promsie已经是一种比较流行的解决异步方案，那么为什么还出现Generator？甚至async/await呢？ 该问题我们留在后面再进行分析，下面先认识下Generator Generator函数执行 Generator 函数会返回一个遍历器对象，可以依次遍历 Generator 函数内部的每一个状态 形式上，Generator函数是一个普通函数，但是有两个特征： function关键字与函数名之间有一个星号 函数体内部使用yield表达式，定义不同的内部状态 12345function* helloWorldGenerator() &#123; yield &#x27;hello&#x27;; yield &#x27;world&#x27;; return &#x27;ending&#x27;;&#125; 二、使用Generator 函数会返回一个遍历器对象，即具有Symbol.iterator属性，并且返回给自己 12345678function* gen()&#123; // some code&#125;var g = gen();g[Symbol.iterator]() === g// true 通过yield关键字可以暂停generator函数返回的遍历器对象的状态 123456function* helloWorldGenerator() &#123; yield &#x27;hello&#x27;; yield &#x27;world&#x27;; return &#x27;ending&#x27;;&#125;var hw = helloWorldGenerator(); 上述存在三个状态：hello、world、return 通过next方法才会遍历到下一个内部状态，其运行逻辑如下： 遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。 下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式 如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。 如果该函数没有return语句，则返回的对象的value属性值为undefined 1234567891011hw.next()// &#123; value: &#x27;hello&#x27;, done: false &#125;hw.next()// &#123; value: &#x27;world&#x27;, done: false &#125;hw.next()// &#123; value: &#x27;ending&#x27;, done: true &#125;hw.next()// &#123; value: undefined, done: true &#125; done用来判断是否存在下个状态，value对应状态值 yield表达式本身没有返回值，或者说总是返回undefined 通过调用next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值 123456789101112131415function* foo(x) &#123; var y = 2 * (yield (x + 1)); var z = yield (y / 3); return (x + y + z);&#125;var a = foo(5);a.next() // Object&#123;value:6, done:false&#125;a.next() // Object&#123;value:NaN, done:false&#125;a.next() // Object&#123;value:NaN, done:true&#125;var b = foo(5);b.next() // &#123; value:6, done:false &#125;b.next(12) // &#123; value:8, done:false &#125;b.next(13) // &#123; value:42, done:true &#125; 正因为Generator函数返回Iterator对象，因此我们还可以通过for...of进行遍历 12345678910111213function* foo() &#123; yield 1; yield 2; yield 3; yield 4; yield 5; return 6;&#125;for (let v of foo()) &#123; console.log(v);&#125;// 1 2 3 4 5 原生对象没有遍历接口，通过Generator函数为它加上这个接口，就能使用for...of进行遍历了 123456789101112131415function* objectEntries(obj) &#123; let propKeys = Reflect.ownKeys(obj); for (let propKey of propKeys) &#123; yield [propKey, obj[propKey]]; &#125;&#125;let jane = &#123; first: &#x27;Jane&#x27;, last: &#x27;Doe&#x27; &#125;;for (let [key, value] of objectEntries(jane)) &#123; console.log(`$&#123;key&#125;: $&#123;value&#125;`);&#125;// first: Jane// last: Doe 三、异步解决方案回顾之前展开异步解决的方案： 回调函数 Promise 对象 generator 函数 async/await 这里通过文件读取案例，将几种解决异步的方案进行一个比较： 回调函数所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数 12345678fs.readFile(&#x27;/etc/fstab&#x27;, function (err, data) &#123; if (err) throw err; console.log(data); fs.readFile(&#x27;/etc/shells&#x27;, function (err, data) &#123; if (err) throw err; console.log(data); &#125;);&#125;); readFile函数的第三个参数，就是回调函数，等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行 PromisePromise就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用 123456789101112131415161718const fs = require(&#x27;fs&#x27;);const readFile = function (fileName) &#123; return new Promise(function (resolve, reject) &#123; fs.readFile(fileName, function(error, data) &#123; if (error) return reject(error); resolve(data); &#125;); &#125;);&#125;;readFile(&#x27;/etc/fstab&#x27;).then(data =&gt;&#123; console.log(data) return readFile(&#x27;/etc/shells&#x27;)&#125;).then(data =&gt; &#123; console.log(data)&#125;) 这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强 generatoryield表达式可以暂停函数执行，next方法用于恢复函数执行，这使得Generator函数非常适合将异步任务同步化 123456const gen = function* () &#123; const f1 = yield readFile(&#x27;/etc/fstab&#x27;); const f2 = yield readFile(&#x27;/etc/shells&#x27;); console.log(f1.toString()); console.log(f2.toString());&#125;; async/await将上面Generator函数改成async/await形式，更为简洁，语义化更强了 123456const asyncReadFile = async function () &#123; const f1 = await readFile(&#x27;/etc/fstab&#x27;); const f2 = await readFile(&#x27;/etc/shells&#x27;); console.log(f1.toString()); console.log(f2.toString());&#125;; 区别：通过上述代码进行分析，将promise、Generator、async/await进行比较： promise和async/await是专门用于处理异步操作的 Generator并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署Interator接口…） promise编写代码相比Generator、async更为复杂化，且可读性也稍差 Generator、async需要与promise对象搭配处理异步情况 async实质是Generator的语法糖，相当于会自动执行Generator函数 async使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案 四、使用场景Generator是异步解决的一种方案，最大特点则是将异步操作同步化表达出来 1234567891011function* loadUI() &#123; showLoadingScreen(); yield loadUIDataAsynchronously(); hideLoadingScreen();&#125;var loader = loadUI();// 加载UIloader.next()// 卸载UIloader.next() 包括redux-saga中间件也充分利用了Generator特性 123456789101112131415161718192021import &#123; call, put, takeEvery, takeLatest &#125; from &#x27;redux-saga/effects&#x27;import Api from &#x27;...&#x27;function* fetchUser(action) &#123; try &#123; const user = yield call(Api.fetchUser, action.payload.userId); yield put(&#123;type: &quot;USER_FETCH_SUCCEEDED&quot;, user: user&#125;); &#125; catch (e) &#123; yield put(&#123;type: &quot;USER_FETCH_FAILED&quot;, message: e.message&#125;); &#125;&#125;function* mySaga() &#123; yield takeEvery(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);&#125;function* mySaga() &#123; yield takeLatest(&quot;USER_FETCH_REQUESTED&quot;, fetchUser);&#125;export default mySaga; 还能利用Generator函数，在对象上实现Iterator接口 12345678910111213141516function* iterEntries(obj) &#123; let keys = Object.keys(obj); for (let i=0; i &lt; keys.length; i++) &#123; let key = keys[i]; yield [key, obj[key]]; &#125;&#125;let myObj = &#123; foo: 3, bar: 7 &#125;;for (let [key, value] of iterEntries(myObj)) &#123; console.log(key, value);&#125;// foo 3// bar 7","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"你是怎么理解ES6中 Promise的？使用场景？","slug":"es6.你是怎么理解ES6中 Promise的？使用场景？","date":"2022-08-04T08:44:01.135Z","updated":"2022-08-05T06:07:03.047Z","comments":true,"path":"2022/08/04/es6.你是怎么理解ES6中 Promise的？使用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3ES6%E4%B8%AD%20Promise%E7%9A%84%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"你是怎么理解ES6中 Promise的？使用场景？ 一、介绍Promise，译为承诺，是异步编程的一种解决方案，比传统的解决方案（回调函数）更加合理和更加强大 在以往我们如果处理多层异步操作，我们往往会像下面那样编写我们的代码 1234567doSomething(function(result) &#123; doSomethingElse(result, function(newResult) &#123; doThirdThing(newResult, function(finalResult) &#123; console.log(&#x27;得到最终结果: &#x27; + finalResult); &#125;, failureCallback); &#125;, failureCallback);&#125;, failureCallback); 阅读上面代码，是不是很难受，上述形成了经典的回调地狱 现在通过Promise的改写上面的代码 12345678910doSomething().then(function(result) &#123; return doSomethingElse(result);&#125;).then(function(newResult) &#123; return doThirdThing(newResult);&#125;).then(function(finalResult) &#123; console.log(&#x27;得到最终结果: &#x27; + finalResult);&#125;).catch(failureCallback); 瞬间感受到promise解决异步操作的优点： 链式操作减低了编码难度 代码可读性明显增强 下面我们正式来认识promise： 状态promise对象仅有三种状态 pending（进行中） fulfilled（已成功） rejected（已失败） 特点 对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态 一旦状态改变（从pending变为fulfilled和从pending变为rejected），就不会再变，任何时候都可以得到这个结果 流程认真阅读下图，我们能够轻松了解promise整个流程 二、用法Promise对象是一个构造函数，用来生成Promise实例 1const promise = new Promise(function(resolve, reject) &#123;&#125;); Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功” reject函数的作用是，将Promise对象的状态从“未完成”变为“失败” 实例方法Promise构建出来的实例存在以下方法： then() then() catch() finally() then()then是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数 then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因 12345getJSON(&quot;/posts.json&quot;).then(function(json) &#123; return json.post;&#125;).then(function(post) &#123; // ...&#125;); catchcatch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数 123456getJSON(&#x27;/posts.json&#x27;).then(function(posts) &#123; // ...&#125;).catch(function(error) &#123; // 处理 getJSON 和 前一个回调函数运行时发生的错误 console.log(&#x27;发生错误！&#x27;, error);&#125;); Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止 1234567getJSON(&#x27;/post/1.json&#x27;).then(function(post) &#123; return getJSON(post.commentURL);&#125;).then(function(comments) &#123; // some code&#125;).catch(function(error) &#123; // 处理前面三个Promise产生的错误&#125;); 一般来说，使用catch方法代替then()第二个参数 Promise对象抛出的错误不会传递到外层代码，即不会有任何反应 123456const someAsyncThing = function() &#123; return new Promise(function(resolve, reject) &#123; // 下面一行会报错，因为x没有声明 resolve(x + 2); &#125;);&#125;; 浏览器运行到这一行，会打印出错误提示ReferenceError: x is not defined，但是不会退出进程 catch()方法之中，还能再抛出错误，通过后面catch方法捕获到 finally()finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作 1234promise.then(result =&gt; &#123;···&#125;).catch(error =&gt; &#123;···&#125;).finally(() =&gt; &#123;···&#125;); 构造函数方法Promise构造函数存在以下方法： all() race() allSettled() resolve() reject() try() all()Promise.all()方法用于将多个 Promise实例，包装成一个新的 Promise实例 1const p = Promise.all([p1, p2, p3]); 接受一个数组（迭代对象）作为参数，数组成员都应为Promise实例 实例p的状态由p1、p2、p3决定，分为两种： 只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数 只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数 注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法 12345678910111213141516const p1 = new Promise((resolve, reject) =&gt; &#123; resolve(&#x27;hello&#x27;);&#125;).then(result =&gt; result).catch(e =&gt; e);const p2 = new Promise((resolve, reject) =&gt; &#123; throw new Error(&#x27;报错了&#x27;);&#125;).then(result =&gt; result).catch(e =&gt; e);Promise.all([p1, p2]).then(result =&gt; console.log(result)).catch(e =&gt; console.log(e));// [&quot;hello&quot;, Error: 报错了] 如果p2没有自己的catch方法，就会调用Promise.all()的catch方法 1234567891011121314const p1 = new Promise((resolve, reject) =&gt; &#123; resolve(&#x27;hello&#x27;);&#125;).then(result =&gt; result);const p2 = new Promise((resolve, reject) =&gt; &#123; throw new Error(&#x27;报错了&#x27;);&#125;).then(result =&gt; result);Promise.all([p1, p2]).then(result =&gt; console.log(result)).catch(e =&gt; console.log(e));// Error: 报错了 race()Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例 1const p = Promise.race([p1, p2, p3]); 只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变 率先改变的 Promise 实例的返回值则传递给p的回调函数 12345678910const p = Promise.race([ fetch(&#x27;/resource-that-may-take-a-while&#x27;), new Promise(function (resolve, reject) &#123; setTimeout(() =&gt; reject(new Error(&#x27;request timeout&#x27;)), 5000) &#125;)]);p.then(console.log).catch(console.error); allSettled()Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例 只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束 12345678const promises = [ fetch(&#x27;/api-1&#x27;), fetch(&#x27;/api-2&#x27;), fetch(&#x27;/api-3&#x27;),];await Promise.allSettled(promises);removeLoadingIndicator(); resolve()将现有对象转为 Promise对象 123Promise.resolve(&#x27;foo&#x27;)// 等价于new Promise(resolve =&gt; resolve(&#x27;foo&#x27;)) 参数可以分成四种情况，分别如下： 参数是一个 Promise 实例，promise.resolve将不做任何修改、原封不动地返回这个实例 参数是一个thenable对象，promise.resolve会将这个对象转为 Promise对象，然后就立即执行thenable对象的then()方法 参数不是具有then()方法的对象，或根本就不是对象，Promise.resolve()会返回一个新的 Promise 对象，状态为resolved 没有参数时，直接返回一个resolved状态的 Promise 对象 reject()123456789Promise.reject(reason)`方法也会返回一个新的 Promise 实例，该实例的状态为`rejectedconst p = Promise.reject(&#x27;出错了&#x27;);// 等同于const p = new Promise((resolve, reject) =&gt; reject(&#x27;出错了&#x27;))p.then(null, function (s) &#123; console.log(s)&#125;);// 出错了 Promise.reject()方法的参数，会原封不动地变成后续方法的参数 12345Promise.reject(&#x27;出错了&#x27;).catch(e =&gt; &#123; console.log(e === &#x27;出错了&#x27;)&#125;)// true 三、使用场景将图片的加载写成一个Promise，一旦加载完成，Promise的状态就发生变化 12345678const preloadImage = function (path) &#123; return new Promise(function (resolve, reject) &#123; const image = new Image(); image.onload = resolve; image.onerror = reject; image.src = path; &#125;);&#125;; 通过链式操作，将多个渲染数据分别给个then，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题 123456789101112131415161718// 各司其职getInfo().then(res=&gt;&#123; let &#123; bannerList &#125; = res //渲染轮播图 console.log(bannerList) return res&#125;).then(res=&gt;&#123; let &#123; storeList &#125; = res //渲染店铺列表 console.log(storeList) return res&#125;).then(res=&gt;&#123; let &#123; categoryList &#125; = res console.log(categoryList) //渲染分类列表 return res&#125;) 通过all()实现多个请求合并在一起，汇总所有请求结果，只需设置一个loading即可 123456789101112function initLoad()&#123; // loading.show() //加载loading Promise.all([getBannerList(),getStoreList(),getCategoryList()]).then(res=&gt;&#123; console.log(res) loading.hide() //关闭loading &#125;).catch(err=&gt;&#123; console.log(err) loading.hide()//关闭loading &#125;)&#125;//数据初始化 initLoad() 通过race可以设置图片请求超时 12345678910111213141516171819202122232425262728293031//请求某个图片资源function requestImg()&#123; var p = new Promise(function(resolve, reject)&#123; var img = new Image(); img.onload = function()&#123; resolve(img); &#125; //img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正确的 img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;; &#125;); return p;&#125;//延时函数，用于给请求计时function timeout()&#123; var p = new Promise(function(resolve, reject)&#123; setTimeout(function()&#123; reject(&#x27;图片请求超时&#x27;); &#125;, 5000); &#125;); return p;&#125;Promise.race([requestImg(), timeout()]).then(function(results)&#123; console.log(results);&#125;).catch(function(reason)&#123; console.log(reason);&#125;);","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"ES6中新增的Set、Map两种数据结构怎么理解","slug":"es6.ES6中新增的Set、Map两种数据结构怎么理解_","date":"2022-08-04T08:44:01.117Z","updated":"2022-08-04T09:30:28.454Z","comments":true,"path":"2022/08/04/es6.ES6中新增的Set、Map两种数据结构怎么理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.ES6%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84Set%E3%80%81Map%E4%B8%A4%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3_/","excerpt":"","text":"ES6中新增的Set、Map两种数据结构怎么理解? 如果要用一句话来描述，我们可以说 Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构 什么是集合？什么又是字典？ 集合是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合 字典是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同 区别？ 共同点：集合、字典都可以存储不重复的值 不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储 一、SetSet是es6新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合 Set本身是一个构造函数，用来生成 Set 数据结构 1const s = new Set(); 增删改查Set的实例关于增删改查的方法： add() delete() has() clear() add()添加某个值，返回 Set 结构本身 当添加实例中已经存在的元素，set不会进行处理添加 1s.add(1).add(2).add(2); // 2只被添加了一次 delete()删除某个值，返回一个布尔值，表示删除是否成功 1s.delete(1) has()返回一个布尔值，判断该值是否为Set的成员 1s.has(2) clear()清除所有成员，没有返回值 1s.clear() 遍历Set实例遍历的方法有如下： 关于遍历的方法，有如下： keys()：返回键名的遍历器 values()：返回键值的遍历器 entries()：返回键值对的遍历器 forEach()：使用回调函数遍历每个成员 Set的遍历顺序就是插入顺序 keys方法、values方法、entries方法返回的都是遍历器对象 12345678910111213141516171819202122232425262728let set = new Set([&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]);for (let item of set.keys()) &#123; console.log(item);&#125;// red// green// bluefor (let item of set.values()) &#123; console.log(item);&#125;// red// green// bluefor (let item of set.entries()) &#123; console.log(item);&#125;// [&quot;red&quot;, &quot;red&quot;]// [&quot;green&quot;, &quot;green&quot;]// [&quot;blue&quot;, &quot;blue&quot;]forEach()`用于对每个成员执行某种操作，没有返回值，键值、键名都相等，同样的`forEach`方法有第二个参数，用于绑定处理函数的`thislet set = new Set([1, 4, 9]);set.forEach((value, key) =&gt; console.log(key + &#x27; : &#x27; + value))// 1 : 1// 4 : 4// 9 : 9 扩展运算符和Set 结构相结合实现数组或字符串去重 1234567// 数组let arr = [3, 5, 2, 2, 5, 5];let unique = [...new Set(arr)]; // [3, 5, 2]// 字符串let str = &quot;352255&quot;;let unique = [...new Set(str)].join(&quot;&quot;); // &quot;&quot; 实现并集、交集、和差集 1234567891011121314let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// 并集let union = new Set([...a, ...b]);// Set &#123;1, 2, 3, 4&#125;// 交集let intersect = new Set([...a].filter(x =&gt; b.has(x)));// set &#123;2, 3&#125;// （a 相对于 b 的）差集let difference = new Set([...a].filter(x =&gt; !b.has(x)));// Set &#123;1&#125; 二、MapMap类型是键值对的有序列表，而键和值都可以是任意类型 Map本身是一个构造函数，用来生成 Map 数据结构 1const m = new Map() 增删改查Map 结构的实例针对增删改查有以下属性和操作方法： size 属性 set() get() has() delete() clear() sizesize属性返回 Map 结构的成员总数。 12345const map = new Map();map.set(&#x27;foo&#x27;, true);map.set(&#x27;bar&#x27;, false);map.size // 2 set()设置键名key对应的键值为value，然后返回整个 Map 结构 如果key已经有值，则键值会被更新，否则就新生成该键 同时返回的是当前Map对象，可采用链式写法 123456const m = new Map();m.set(&#x27;edition&#x27;, 6) // 键是字符串m.set(262, &#x27;standard&#x27;) // 键是数值m.set(undefined, &#x27;nah&#x27;) // 键是 undefinedm.set(1, &#x27;a&#x27;).set(2, &#x27;b&#x27;).set(3, &#x27;c&#x27;) // 链式操作 get()1234567get`方法读取`key`对应的键值，如果找不到`key`，返回`undefinedconst m = new Map();const hello = function() &#123;console.log(&#x27;hello&#x27;);&#125;;m.set(hello, &#x27;Hello ES6!&#x27;) // 键是函数m.get(hello) // Hello ES6! has()has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中 12345678910const m = new Map();m.set(&#x27;edition&#x27;, 6);m.set(262, &#x27;standard&#x27;);m.set(undefined, &#x27;nah&#x27;);m.has(&#x27;edition&#x27;) // truem.has(&#x27;years&#x27;) // falsem.has(262) // truem.has(undefined) // true delete()1234567delete`方法删除某个键，返回`true`。如果删除失败，返回`falseconst m = new Map();m.set(undefined, &#x27;nah&#x27;);m.has(undefined) // truem.delete(undefined)m.has(undefined) // false clear()clear方法清除所有成员，没有返回值 1234567let map = new Map();map.set(&#x27;foo&#x27;, true);map.set(&#x27;bar&#x27;, false);map.size // 2map.clear()map.size // 0 遍历Map结构原生提供三个遍历器生成函数和一个遍历方法： keys()：返回键名的遍历器 values()：返回键值的遍历器 entries()：返回所有成员的遍历器 forEach()：遍历 Map 的所有成员 遍历顺序就是插入顺序 12345678910111213141516171819202122232425262728293031323334353637383940const map = new Map([ [&#x27;F&#x27;, &#x27;no&#x27;], [&#x27;T&#x27;, &#x27;yes&#x27;],]);for (let key of map.keys()) &#123; console.log(key);&#125;// &quot;F&quot;// &quot;T&quot;for (let value of map.values()) &#123; console.log(value);&#125;// &quot;no&quot;// &quot;yes&quot;for (let item of map.entries()) &#123; console.log(item[0], item[1]);&#125;// &quot;F&quot; &quot;no&quot;// &quot;T&quot; &quot;yes&quot;// 或者for (let [key, value] of map.entries()) &#123; console.log(key, value);&#125;// &quot;F&quot; &quot;no&quot;// &quot;T&quot; &quot;yes&quot;// 等同于使用map.entries()for (let [key, value] of map) &#123; console.log(key, value);&#125;// &quot;F&quot; &quot;no&quot;// &quot;T&quot; &quot;yes&quot;map.forEach(function(value, key, map) &#123; console.log(&quot;Key: %s, Value: %s&quot;, key, value);&#125;); 三、WeakSet 和 WeakMapWeakSet创建WeakSet实例 1const ws = new WeakSet(); WeakSet可以接受一个具有 Iterable接口的对象作为参数 123const a = [[1, 2], [3, 4]];const ws = new WeakSet(a);// WeakSet &#123;[1, 2], [3, 4]&#125; 在API中WeakSet与Set有两个区别： 没有遍历操作的API 没有size属性 WeackSet只能成员只能是引用类型，而不能是其他类型的值 1234567891011let ws=new WeakSet();// 成员不是引用类型let weakSet=new WeakSet([2,3]);console.log(weakSet) // 报错// 成员为引用类型let obj1=&#123;name:1&#125;let obj2=&#123;name:1&#125;let ws=new WeakSet([obj1,obj2]); console.log(ws) //WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125; WeakSet里面的引用只要在外部消失，它在 WeakSet里面的引用就会自动消失 WeakMapWeakMap结构与Map结构类似，也是用于生成键值对的集合 在API中WeakMap与Map有两个区别： 没有遍历操作的API 没有clear清空方法 123456789101112// WeakMap 可以使用 set 方法添加成员const wm1 = new WeakMap();const key = &#123;foo: 1&#125;;wm1.set(key, 2);wm1.get(key) // 2// WeakMap 也可以接受一个数组，// 作为构造函数的参数const k1 = [1, 2, 3];const k2 = [4, 5, 6];const wm2 = new WeakMap([[k1, &#x27;foo&#x27;], [k2, &#x27;bar&#x27;]]);wm2.get(k2) // &quot;bar&quot; WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名 1234567const map = new WeakMap();map.set(1, 2)// TypeError: 1 is not an object!map.set(Symbol(), 2)// TypeError: Invalid value used as weak map keymap.set(null, 2)// TypeError: Invalid value used as weak map key WeakMap的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用 举个场景例子： 在网页的 DOM 元素上添加数据，就可以使用WeakMap结构，当该 DOM 元素被清除，其所对应的WeakMap记录就会自动被移除 123456const wm = new WeakMap();const element = document.getElementById(&#x27;example&#x27;);wm.set(element, &#x27;some information&#x27;);wm.get(element) // &quot;some information&quot; 注意：WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用 下面代码中，键值obj会在WeakMap产生新的引用，当你修改obj不会影响到内部 12345678const wm = new WeakMap();let key = &#123;&#125;;let obj = &#123;foo: 1&#125;;wm.set(key, obj);obj = null;wm.get(key)// Object &#123;foo: 1&#125;","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"ES6中函数新增了哪些扩展","slug":"es6.ES6中函数新增了哪些扩展_","date":"2022-08-04T08:44:01.100Z","updated":"2022-08-04T09:30:23.912Z","comments":true,"path":"2022/08/04/es6.ES6中函数新增了哪些扩展_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.ES6%E4%B8%AD%E5%87%BD%E6%95%B0%E6%96%B0%E5%A2%9E%E4%BA%86%E5%93%AA%E4%BA%9B%E6%89%A9%E5%B1%95_/","excerpt":"","text":"ES6中函数新增了哪些扩展? 一、参数ES6允许为函数的参数设置默认值 1234567function log(x, y = &#x27;World&#x27;) &#123; console.log(x, y);&#125;console.log(&#x27;Hello&#x27;) // Hello Worldconsole.log(&#x27;Hello&#x27;, &#x27;China&#x27;) // Hello Chinaconsole.log(&#x27;Hello&#x27;, &#x27;&#x27;) // Hello 函数的形参是默认声明的，不能使用let或const再次声明 1234function foo(x = 5) &#123; let x = 1; // error const x = 2; // error&#125; 参数默认值可以与解构赋值的默认值结合起来使用 12345678function foo(&#123;x, y = 5&#125;) &#123; console.log(x, y);&#125;foo(&#123;&#125;) // undefined 5foo(&#123;x: 1&#125;) // 1 5foo(&#123;x: 1, y: 2&#125;) // 1 2foo() // TypeError: Cannot read property &#x27;x&#x27; of undefined 上面的foo函数，当参数为对象的时候才能进行解构，如果没有提供参数的时候，变量x和y就不会生成，从而报错，这里设置默认值避免 12345function foo(&#123;x, y = 5&#125; = &#123;&#125;) &#123; console.log(x, y);&#125;foo() // undefined 5 参数默认值应该是函数的尾参数，如果不是非尾部的参数设置默认值，实际上这个参数是没发省略的 12345678function f(x = 1, y) &#123; return [x, y];&#125;f() // [1, undefined]f(2) // [2, undefined]f(, 1) // 报错f(undefined, 1) // [1, 1] 二、属性函数的length属性length将返回没有指定默认值的参数个数 123(function (a) &#123;&#125;).length // 1(function (a = 5) &#123;&#125;).length // 0(function (a, b, c = 5) &#123;&#125;).length // 2 rest 参数也不会计入length属性 1(function(...args) &#123;&#125;).length // 0 如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了 12(function (a = 0, b, c) &#123;&#125;).length // 0(function (a, b = 1, c) &#123;&#125;).length // 1 name属性返回该函数的函数名 1234567var f = function () &#123;&#125;;// ES5f.name // &quot;&quot;// ES6f.name // &quot;f&quot; 如果将一个具名函数赋值给一个变量，则 name属性都返回这个具名函数原本的名字 1234const bar = function baz() &#123;&#125;;bar.name // &quot;baz&quot;Function`构造函数返回的函数实例，`name`属性的值为`anonymous(new Function).name // &quot;anonymous&quot; bind返回的函数，name属性值会加上bound前缀 1234function foo() &#123;&#125;;foo.bind(&#123;&#125;).name // &quot;bound foo&quot;(function()&#123;&#125;).bind(&#123;&#125;).name // &quot;bound &quot; 三、作用域一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域 等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的 下面例子中，y=x会形成一个单独作用域，x没有被定义，所以指向全局变量x 123456789let x = 1;function f(y = x) &#123; // 等同于 let y = x let x = 2; console.log(y);&#125;f() // 1 四、严格模式只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错 12345678910111213141516171819202122232425// 报错function doSomething(a, b = a) &#123; &#x27;use strict&#x27;; // code&#125;// 报错const doSomething = function (&#123;a, b&#125;) &#123; &#x27;use strict&#x27;; // code&#125;;// 报错const doSomething = (...a) =&gt; &#123; &#x27;use strict&#x27;; // code&#125;;const obj = &#123; // 报错 doSomething(&#123;a, b&#125;) &#123; &#x27;use strict&#x27;; // code &#125;&#125;; 五、箭头函数使用“箭头”（=&gt;）定义函数 123456var f = v =&gt; v;// 等同于var f = function (v) &#123; return v;&#125;; 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分 123456789var f = () =&gt; 5;// 等同于var f = function () &#123; return 5 &#125;;var sum = (num1, num2) =&gt; num1 + num2;// 等同于var sum = function(num1, num2) &#123; return num1 + num2;&#125;; 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回 1var sum = (num1, num2) =&gt; &#123; return num1 + num2; &#125; 如果返回对象，需要加括号将对象包裹 1let getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;); 注意点： 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替 不可以使用yield命令，因此箭头函数不能用作 Generator 函数","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"ES6中对象新增了哪些扩展","slug":"es6.ES6中对象新增了哪些扩展_","date":"2022-08-04T08:44:01.083Z","updated":"2022-08-04T09:30:21.807Z","comments":true,"path":"2022/08/04/es6.ES6中对象新增了哪些扩展_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.ES6%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%96%B0%E5%A2%9E%E4%BA%86%E5%93%AA%E4%BA%9B%E6%89%A9%E5%B1%95_/","excerpt":"","text":"ES6中对象新增了哪些扩展? 一、属性的简写ES6中，当对象键名与对应值名相等的时候，可以进行简写 1234const baz = &#123;foo:foo&#125;// 等同于const baz = &#123;foo&#125; 方法也能够进行简写 12345678910111213const o = &#123; method() &#123; return &quot;Hello!&quot;; &#125;&#125;;// 等同于const o = &#123; method: function() &#123; return &quot;Hello!&quot;; &#125;&#125; 在函数内作为返回值，也会变得方便很多 12345678function getPoint() &#123; const x = 1; const y = 10; return &#123;x, y&#125;;&#125;getPoint()// &#123;x:1, y:10&#125; 注意：简写的对象方法不能用作构造函数，否则会报错 1234567const obj = &#123; f() &#123; this.foo = &#x27;bar&#x27;; &#125;&#125;;new obj.f() // 报错 二、属性名表达式ES6 允许字面量定义对象时，将表达式放在括号内 12345678910let lastWord = &#x27;last word&#x27;;const a = &#123; &#x27;first word&#x27;: &#x27;hello&#x27;, [lastWord]: &#x27;world&#x27;&#125;;a[&#x27;first word&#x27;] // &quot;hello&quot;a[lastWord] // &quot;world&quot;a[&#x27;last word&#x27;] // &quot;world&quot; 表达式还可以用于定义方法名 1234567let obj = &#123; [&#x27;h&#x27; + &#x27;ello&#x27;]() &#123; return &#x27;hi&#x27;; &#125;&#125;;obj.hello() // hi 注意，属性名表达式与简洁表示法，不能同时使用，会报错 12345678// 报错const foo = &#x27;bar&#x27;;const bar = &#x27;abc&#x27;;const baz = &#123; [foo] &#125;;// 正确const foo = &#x27;bar&#x27;;const baz = &#123; [foo]: &#x27;abc&#x27;&#125;; 注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object] 123456789const keyA = &#123;a: 1&#125;;const keyB = &#123;b: 2&#125;;const myObject = &#123; [keyA]: &#x27;valueA&#x27;, [keyB]: &#x27;valueB&#x27;&#125;;myObject // Object &#123;[object Object]: &quot;valueB&quot;&#125; 三、super关键字this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象 12345678910111213const proto = &#123; foo: &#x27;hello&#x27;&#125;;const obj = &#123; foo: &#x27;world&#x27;, find() &#123; return super.foo; &#125;&#125;;Object.setPrototypeOf(obj, proto); // 为obj设置原型对象obj.find() // &quot;hello&quot; 四、扩展运算符的应用在解构赋值中，未被读取的可遍历的属性，分配到指定的对象上面 1234let &#123; x, y, ...z &#125; = &#123; x: 1, y: 2, a: 3, b: 4 &#125;;x // 1y // 2z // &#123; a: 3, b: 4 &#125; 注意：解构赋值必须是最后一个参数，否则会报错 解构赋值是浅拷贝 1234let obj = &#123; a: &#123; b: 1 &#125; &#125;;let &#123; ...x &#125; = obj;obj.a.b = 2; // 修改obj里面a属性中键值x.a.b // 2，影响到了结构出来x的值 对象的扩展运算符等同于使用Object.assign()方法 五、属性的遍历ES6 一共有 5 种方法可以遍历对象的属性。 for…in：循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性） Object.keys(obj)：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名 Object.getOwnPropertyNames(obj)：回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名 Object.getOwnPropertySymbols(obj)：返回一个数组，包含对象自身的所有 Symbol 属性的键名 Reflect.ownKeys(obj)：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举 上述遍历，都遵守同样的属性遍历的次序规则： 首先遍历所有数值键，按照数值升序排列 其次遍历所有字符串键，按照加入时间升序排列 最后遍历所有 Symbol 键，按照加入时间升序排 12Reflect.ownKeys(&#123; [Symbol()]:0, b:0, 10:0, 2:0, a:0 &#125;)// [&#x27;2&#x27;, &#x27;10&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, Symbol()] 六、对象新增的方法关于对象新增的方法，分别有以下： Object.is() Object.assign() Object.getOwnPropertyDescriptors() Object.setPrototypeOf()，Object.getPrototypeOf() Object.keys()，Object.values()，Object.entries() Object.fromEntries() Object.is()严格判断两个值是否相等，与严格比较运算符（===）的行为基本一致，不同之处只有两个：一是+0不等于-0，二是NaN等于自身 12345+0 === -0 //trueNaN === NaN // falseObject.is(+0, -0) // falseObject.is(NaN, NaN) // true Object.assign()1Object.assign()`方法用于对象的合并，将源对象`source`的所有可枚举属性，复制到目标对象`target Object.assign()方法的第一个参数是目标对象，后面的参数都是源对象 1234567const target = &#123; a: 1, b: 1 &#125;;const source1 = &#123; b: 2, c: 2 &#125;;const source2 = &#123; c: 3 &#125;;Object.assign(target, source1, source2);target // &#123;a:1, b:2, c:3&#125; 注意：Object.assign()方法是浅拷贝，遇到同名属性会进行替换 Object.getOwnPropertyDescriptors()返回指定对象所有自身属性（非继承属性）的描述对象 12345678910111213141516const obj = &#123; foo: 123, get bar() &#123; return &#x27;abc&#x27; &#125;&#125;;Object.getOwnPropertyDescriptors(obj)// &#123; foo:// &#123; value: 123,// writable: true,// enumerable: true,// configurable: true &#125;,// bar:// &#123; get: [Function: get bar],// set: undefined,// enumerable: true,// configurable: true &#125; &#125; Object.setPrototypeOf()Object.setPrototypeOf方法用来设置一个对象的原型对象 1234Object.setPrototypeOf(object, prototype)// 用法const o = Object.setPrototypeOf(&#123;&#125;, null); Object.getPrototypeOf()用于读取一个对象的原型对象 1Object.getPrototypeOf(obj); Object.keys()返回自身的（不含继承的）所有可遍历（enumerable）属性的键名的数组 123var obj = &#123; foo: &#x27;bar&#x27;, baz: 42 &#125;;Object.keys(obj)// [&quot;foo&quot;, &quot;baz&quot;] Object.values()返回自身的（不含继承的）所有可遍历（enumerable）属性的键对应值的数组 123const obj = &#123; foo: &#x27;bar&#x27;, baz: 42 &#125;;Object.values(obj)// [&quot;bar&quot;, 42] Object.entries()返回一个对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对的数组 123const obj = &#123; foo: &#x27;bar&#x27;, baz: 42 &#125;;Object.entries(obj)// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ] Object.fromEntries()用于将一个键值对数组转为对象 12345Object.fromEntries([ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42]])// &#123; foo: &quot;bar&quot;, baz: 42 &#125;","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"ES6中数组新增了哪些扩展","slug":"es6.ES6中数组新增了哪些扩展_","date":"2022-08-04T08:44:01.060Z","updated":"2022-08-04T09:30:19.542Z","comments":true,"path":"2022/08/04/es6.ES6中数组新增了哪些扩展_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.ES6%E4%B8%AD%E6%95%B0%E7%BB%84%E6%96%B0%E5%A2%9E%E4%BA%86%E5%93%AA%E4%BA%9B%E6%89%A9%E5%B1%95_/","excerpt":"","text":"ES6中数组新增了哪些扩展? 一、扩展运算符的应用ES6通过扩展元素符...，好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列 12345678console.log(...[1, 2, 3])// 1 2 3console.log(1, ...[2, 3, 4], 5)// 1 2 3 4 5[...document.querySelectorAll(&#x27;div&#x27;)]// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;] 主要用于函数调用的时候，将一个数组变为参数序列 12345678910function push(array, ...items) &#123; array.push(...items);&#125;function add(x, y) &#123; return x + y;&#125;const numbers = [4, 38];add(...numbers) // 42 可以将某些数据结构转为数组 1[...document.querySelectorAll(&#x27;div&#x27;)] 能够更简单实现数组复制 123const a1 = [1, 2];const [...a2] = a1;// [1,2] 数组的合并也更为简洁了 12345const arr1 = [&#x27;a&#x27;, &#x27;b&#x27;];const arr2 = [&#x27;c&#x27;];const arr3 = [&#x27;d&#x27;, &#x27;e&#x27;];[...arr1, ...arr2, ...arr3]// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ] 注意：通过扩展运算符实现的是浅拷贝，修改了引用指向的值，会同步反映到新数组 下面看个例子就清楚多了 12345const arr1 = [&#x27;a&#x27;, &#x27;b&#x27;,[1,2]];const arr2 = [&#x27;c&#x27;];const arr3 = [...arr1,...arr2]arr[1][0] = 9999 // 修改arr1里面数组成员值console.log(arr[3]) // 影响到arr3,[&#x27;a&#x27;,&#x27;b&#x27;,[9999,2],&#x27;c&#x27;] 扩展运算符可以与解构赋值结合起来，用于生成数组 1234567891011const [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest // [2, 3, 4, 5]const [first, ...rest] = [];first // undefinedrest // []const [first, ...rest] = [&quot;foo&quot;];first // &quot;foo&quot;rest // [] 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错 12345const [...butLast, last] = [1, 2, 3, 4, 5];// 报错const [first, ...middle, last] = [1, 2, 3, 4, 5];// 报错 可以将字符串转为真正的数组 12[...&#x27;hello&#x27;]// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ] 定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组 12345678910let nodeList = document.querySelectorAll(&#x27;div&#x27;);let array = [...nodeList];let map = new Map([ [1, &#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;],]);let arr = [...map.keys()]; // [1, 2, 3] 如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错 12const obj = &#123;a: 1, b: 2&#125;;let arr = [...obj]; // TypeError: Cannot spread non-iterable object 二、构造函数新增的方法关于构造函数，数组新增的方法有如下： Array.from() Array.of() Array.from()将两类对象转为真正的数组：类似数组的对象和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map） 1234567let arrayLike = &#123; &#x27;0&#x27;: &#x27;a&#x27;, &#x27;1&#x27;: &#x27;b&#x27;, &#x27;2&#x27;: &#x27;c&#x27;, length: 3&#125;;let arr2 = Array.from(arrayLike); // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;] 还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组 12Array.from([1, 2, 3], (x) =&gt; x * x)// [1, 4, 9] Array.of()用于将一组值，转换为数组 1Array.of(3, 11, 8) // [3,11,8] 没有参数的时候，返回一个空数组 当参数只有一个的时候，实际上是指定数组的长度 参数个数不少于 2 个时，Array()才会返回由参数组成的新数组 123Array() // []Array(3) // [, , ,]Array(3, 11, 8) // [3, 11, 8] 三、实例对象新增的方法关于数组实例对象新增的方法有如下： copyWithin() find()、findIndex() fill() entries()，keys()，values() includes() flat()，flatMap() copyWithin()将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组 参数如下： target（必需）：从该位置开始替换数据。如果为负值，表示倒数。 start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。 end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。 12[1, 2, 3, 4, 5].copyWithin(0, 3) // 将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2// [4, 5, 3, 4, 5] find()、findIndex()find()用于找出第一个符合条件的数组成员 参数是一个回调函数，接受三个参数依次为当前的值、当前的位置和原数组 1234567[1, 5, 10, 15].find(function(value, index, arr) &#123; return value &gt; 9;&#125;) // 10findIndex`返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回`-1[1, 5, 10, 15].findIndex(function(value, index, arr) &#123; return value &gt; 9;&#125;) // 2 这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。 12345function f(v)&#123; return v &gt; this.age;&#125;let person = &#123;name: &#x27;John&#x27;, age: 20&#125;;[10, 12, 26, 15].find(f, person); // 26 fill()使用给定值，填充一个数组 12345[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;].fill(7)// [7, 7, 7]new Array(3).fill(7)// [7, 7, 7] 还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置 12[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;].fill(7, 1, 2)// [&#x27;a&#x27;, 7, &#x27;c&#x27;] 注意，如果填充的类型为对象，则是浅拷贝 entries()，keys()，values()keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历 12345678910111213141516or (let index of [&#x27;a&#x27;, &#x27;b&#x27;].keys()) &#123; console.log(index);&#125;// 0// 1for (let elem of [&#x27;a&#x27;, &#x27;b&#x27;].values()) &#123; console.log(elem);&#125;// &#x27;a&#x27;// &#x27;b&#x27;for (let [index, elem] of [&#x27;a&#x27;, &#x27;b&#x27;].entries()) &#123; console.log(index, elem);&#125;// 0 &quot;a&quot; includes()用于判断数组是否包含给定的值 123[1, 2, 3].includes(2) // true[1, 2, 3].includes(4) // false[1, 2, NaN].includes(NaN) // true 方法的第二个参数表示搜索的起始位置，默认为0 参数为负数则表示倒数的位置 12[1, 2, 3].includes(3, 3); // false[1, 2, 3].includes(3, -1); // true flat()，flatMap()将数组扁平化处理，返回一个新数组，对原数据没有影响 12[1, 2, [3, 4]].flat()// [1, 2, 3, 4] flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1 12345[1, 2, [3, [4, 5]]].flat()// [1, 2, 3, [4, 5]][1, 2, [3, [4, 5]]].flat(2)// [1, 2, 3, 4, 5] flatMap()方法对原数组的每个成员执行一个函数相当于执行Array.prototype.map()，然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组 1234// 相当于 [[2, 4], [3, 6], [4, 8]].flat()[2, 3, 4].flatMap((x) =&gt; [x, x * 2])// [2, 4, 3, 6, 4, 8]flatMap()`方法还可以有第二个参数，用来绑定遍历函数里面的`this 四、数组的空位数组的空位指，数组的某一个位置没有任何值 ES6 则是明确将空位转为undefined，包括Array.from、扩展运算符、copyWithin()、fill()、entries()、keys()、values()、find()和findIndex() 建议大家在日常书写中，避免出现空位 五、排序稳定性将sort()默认设置为稳定的排序算法 1234567891011121314const arr = [ &#x27;peach&#x27;, &#x27;straw&#x27;, &#x27;apple&#x27;, &#x27;spork&#x27;];const stableSorting = (s1, s2) =&gt; &#123; if (s1[0] &lt; s2[0]) return -1; return 1;&#125;;arr.sort(stableSorting)// [&quot;apple&quot;, &quot;peach&quot;, &quot;straw&quot;, &quot;spork&quot;] 排序结果中，straw在spork的前面，跟原始顺序一致","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"说说var、let、const之间的区别","slug":"es6.说说var、let、const之间的区别","date":"2022-08-04T08:42:18.048Z","updated":"2022-08-04T09:30:16.682Z","comments":true,"path":"2022/08/04/es6.说说var、let、const之间的区别/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/08/04/es6.%E8%AF%B4%E8%AF%B4var%E3%80%81let%E3%80%81const%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"一、var在ES5中，顶层对象的属性和全局变量是等价的，用var声明的变量既是全局变量，也是顶层变量 注意：顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象 12var a = 10;console.log(window.a) // 10 使用var声明的变量存在变量提升的情况 12console.log(a) // undefinedvar a = 20 在编译阶段，编译器会将其变成以下执行 123var aconsole.log(a)a = 20 使用var，我们能够对一个变量进行多次声明，后面声明的变量会覆盖前面的变量声明 123var a = 20 var a = 30console.log(a) // 30 在函数中使用使用var声明变量时候，该变量是局部的 123456var a = 20function change()&#123; var a = 30&#125;change()console.log(a) // 20 而如果在函数内不使用var，该变量是全局的 123456var a = 20function change()&#123; a = 30&#125;change()console.log(a) // 30 二、letlet是ES6新增的命令，用来声明变量 用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效 1234&#123; let a = 20&#125;console.log(a) // ReferenceError: a is not defined. 不存在变量提升 12console.log(a) // 报错ReferenceErrorlet a = 2 这表示在声明它之前，变量a是不存在的，这时如果用到它，就会抛出一个错误 只要块级作用域内存在let命令，这个区域就不再受外部影响 12345var a = 123if (true) &#123; a = &#x27;abc&#x27; // ReferenceError let a;&#125; 使用let声明变量前，该变量都不可用，也就是大家常说的“暂时性死区” 最后，let不允许在相同作用域中重复声明 123let a = 20let a = 30// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared 注意的是相同作用域，下面这种情况是不会报错的 1234let a = 20&#123; let a = 30&#125; 因此，我们不能在函数内部重新声明参数 12345function func(arg) &#123; let arg;&#125;func()// Uncaught SyntaxError: Identifier &#x27;arg&#x27; has already been declared 三、constconst声明一个只读的常量，一旦声明，常量的值就不能改变 123const a = 1a = 3// TypeError: Assignment to constant variable. 这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值 12const a;// SyntaxError: Missing initializer in const declaration 如果之前用var或let声明过变量，再用const声明同样会报错 12345var a = 20let b = 20const a = 30const b = 30// 都会报错 const实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动 对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量 对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的，并不能确保改变量的结构不变 12345678const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123// 将 foo 指向另一个对象，就会报错foo = &#123;&#125;; // TypeError: &quot;foo&quot; is read-only 其它情况，const与let一致 四、区别var、let、const三者区别可以围绕下面五点展开： 变量提升 暂时性死区 块级作用域 重复声明 修改声明的变量 使用 变量提升var声明的变量存在变量提升，即变量可以在声明之前调用，值为undefined let和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错 1234567891011// varconsole.log(a) // undefinedvar a = 10// let console.log(b) // Cannot access &#x27;b&#x27; before initializationlet b = 10// constconsole.log(c) // Cannot access &#x27;c&#x27; before initializationconst c = 10 暂时性死区var不存在暂时性死区 let和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量 1234567891011// varconsole.log(a) // undefinedvar a = 10// letconsole.log(b) // Cannot access &#x27;b&#x27; before initializationlet b = 10// constconsole.log(c) // Cannot access &#x27;c&#x27; before initializationconst c = 10 块级作用域var不存在块级作用域 let和const存在块级作用域 1234567891011121314151617// var&#123; var a = 20&#125;console.log(a) // 20// let&#123; let b = 20&#125;console.log(b) // Uncaught ReferenceError: b is not defined// const&#123; const c = 20&#125;console.log(c) // Uncaught ReferenceError: c is not defined 重复声明var允许重复声明变量 let和const在同一作用域不允许重复声明变量 1234567891011// varvar a = 10var a = 20 // 20// letlet b = 10let b = 20 // Identifier &#x27;b&#x27; has already been declared// constconst c = 10const c = 20 // Identifier &#x27;c&#x27; has already been declared 修改声明的变量var和let可以 const声明一个只读的常量。一旦声明，常量的值就不能改变 1234567891011121314// varvar a = 10a = 20console.log(a) // 20//letlet b = 10b = 20console.log(b) // 20// constconst c = 10c = 20console.log(c) // Uncaught TypeError: Assignment to constant variable 使用能用const的情况尽量使用const，其他情况下大多数使用let，避免使用var","categories":[{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"}],"tags":[]},{"title":"说说Vue 3.0中Treeshaking特性？举例说明一下？","slug":"vue.说说Vue 3.0中Treeshaking特性？举例说明一下？","date":"2022-07-26T02:22:43.220Z","updated":"2022-08-05T02:34:11.134Z","comments":true,"path":"2022/07/26/vue.说说Vue 3.0中Treeshaking特性？举例说明一下？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4Vue%203.0%E4%B8%ADTreeshaking%E7%89%B9%E6%80%A7%EF%BC%9F%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E4%B8%80%E4%B8%8B%EF%BC%9F/","excerpt":"","text":"说说Vue 3.0中Treeshaking特性？举例说明一下？ 一、是什么Tree shaking 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 Dead code elimination 简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码 如果把代码打包比作制作蛋糕，传统的方式是把鸡蛋（带壳）全部丢进去搅拌，然后放入烤箱，最后把（没有用的）蛋壳全部挑选并剔除出去 而treeshaking则是一开始就把有用的蛋白蛋黄（import）放入搅拌，最后直接作出蛋糕 也就是说 ，tree shaking 其实是找出使用的代码 在Vue2中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是Vue实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到 123import Vue from &#x27;vue&#x27; Vue.nextTick(() =&gt; &#123;&#125;) 而Vue3源码引入tree shaking特性，将全局 API 进行分块。如果你不使用其某些功能，它们将不会包含在你的基础包中 123import &#123; nextTick, observable &#125; from &#x27;vue&#x27; nextTick(() =&gt; &#123;&#125;) 二、如何做Tree shaking是基于ES6模板语法（import与exports），主要是借助ES6模块的静态编译思想，在编译时就能确定模块的依赖关系，以及输入和输出的变量 Tree shaking无非就是做了两件事： 编译阶段利用ES6 Module判断哪些模块已经加载 判断那些模块和变量未被使用或者引用，进而删除对应代码 下面就来举个例子： 通过脚手架vue-cli安装Vue2与Vue3项目 1vue create vue-demo Vue2 项目组件中使用data属性 1234567&lt;script&gt; export default &#123; data: () =&gt; (&#123; count: 1, &#125;), &#125;;&lt;/script&gt; 对项目进行打包，体积如下图 为组件设置其他属性（compted、watch） 123456789101112131415export default &#123; data: () =&gt; (&#123; question:&quot;&quot;, count: 1, &#125;), computed: &#123; double: function () &#123; return this.count * 2; &#125;, &#125;, watch: &#123; question: function (newQuestion, oldQuestion) &#123; this.answer = &#x27;xxxx&#x27; &#125;&#125;; 再一次打包，发现打包出来的体积并没有变化 Vue3 项目组件中简单使用 1234567891011import &#123; reactive, defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123; setup() &#123; const state = reactive(&#123; count: 1, &#125;); return &#123; state, &#125;; &#125;,&#125;); 将项目进行打包 在组件中引入computed和watch 1234567891011121314151617181920212223import &#123; reactive, defineComponent, computed, watch &#125; from &quot;vue&quot;;export default defineComponent(&#123; setup() &#123; const state = reactive(&#123; count: 1, &#125;); const double = computed(() =&gt; &#123; return state.count * 2; &#125;); watch( () =&gt; state.count, (count, preCount) =&gt; &#123; console.log(count); console.log(preCount); &#125; ); return &#123; state, double, &#125;; &#125;,&#125;); 再次对项目进行打包，可以看到在引入computer和watch之后，项目整体体积变大了 三、作用通过Tree shaking，Vue3给我们带来的好处是： 减少程序体积（更小） 减少程序执行时间（更快） 便于将来对程序架构进行优化（更友好）","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"什么是虚拟DOM？如何实现一个虚拟DOM？","slug":"vue.什么是虚拟DOM？如何实现一个虚拟DOM？","date":"2022-07-26T02:22:43.219Z","updated":"2022-08-05T02:33:10.888Z","comments":true,"path":"2022/07/26/vue.什么是虚拟DOM？如何实现一个虚拟DOM？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9FDOM%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%99%9A%E6%8B%9FDOM%EF%BC%9F/","excerpt":"","text":"什么是虚拟DOM？如何实现一个虚拟DOM？ 一、什么是虚拟DOM虚拟 DOM （Virtual DOM ）这个概念相信大家都不陌生，从 React 到 Vue ，虚拟 DOM 为这两个框架都带来了跨平台的能力（React-Native 和 Weex） 实际上它只是一层对真实DOM的抽象，以JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上 在Javascript对象中，虚拟DOM 表现为一个 Object对象。并且最少包含标签名 (tag)、属性 (attrs) 和子元素对象 (children) 三个属性，不同框架对这三个属性的名命可能会有差别 创建虚拟DOM就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟DOM对象的节点与真实DOM的属性一一照应 在vue中同样使用到了虚拟DOM技术 定义真实DOM 1234&lt;div id=&quot;app&quot;&gt; &lt;p class=&quot;p&quot;&gt;节点内容&lt;/p&gt; &lt;h3&gt;&#123;&#123; foo &#125;&#125;&lt;/h3&gt;&lt;/div&gt; 实例化vue 123456const app = new Vue(&#123; el:&quot;#app&quot;, data:&#123; foo:&quot;foo&quot; &#125;&#125;) 观察render的render，我们能得到虚拟DOM 123(function anonymous() &#123; with(this)&#123;return _c(&#x27;div&#x27;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&#x27;p&#x27;,&#123;staticClass:&quot;p&quot;&#125;, [_v(&quot;节点内容&quot;)]),_v(&quot; &quot;),_c(&#x27;h3&#x27;,[_v(_s(foo))])])&#125;&#125;) 通过VNode，vue可以对这颗抽象树进行创建节点,删除节点以及修改节点的操作， 经过diff算法得出一些需要修改的最小单位,再更新视图，减少了dom操作，提高了性能 二、为什么需要虚拟DOMDOM是很慢的，其元素非常庞大，页面的性能问题，大部分都是由DOM操作引起的 真实的DOM节点，哪怕一个最简单的div也包含着很多属性，可以打印出来直观感受一下： 由此可见，操作DOM的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验 举个例子： 你用传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程 当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程 而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算 很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI 三、如何实现虚拟DOM首先可以看看vue中VNode的结构 源码位置：src/core/vdom/vnode.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273export default class VNode &#123; tag: string | void; data: VNodeData | void; children: ?Array&lt;VNode&gt;; text: string | void; elm: Node | void; ns: string | void; context: Component | void; // rendered in this component&#x27;s scope functionalContext: Component | void; // only for functional component root nodes key: string | number | void; componentOptions: VNodeComponentOptions | void; componentInstance: Component | void; // component instance parent: VNode | void; // component placeholder node raw: boolean; // contains raw HTML? (server only) isStatic: boolean; // hoisted static node isRootInsert: boolean; // necessary for enter transition check isComment: boolean; // empty comment placeholder? isCloned: boolean; // is a cloned node? isOnce: boolean; // is a v-once node? constructor ( tag?: string, data?: VNodeData, children?: ?Array&lt;VNode&gt;, text?: string, elm?: Node, context?: Component, componentOptions?: VNodeComponentOptions ) &#123; /*当前节点的标签名*/ this.tag = tag /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/ this.data = data /*当前节点的子节点，是一个数组*/ this.children = children /*当前节点的文本*/ this.text = text /*当前虚拟节点对应的真实dom节点*/ this.elm = elm /*当前节点的名字空间*/ this.ns = undefined /*编译作用域*/ this.context = context /*函数化组件作用域*/ this.functionalContext = undefined /*节点的key属性，被当作节点的标志，用以优化*/ this.key = data &amp;&amp; data.key /*组件的option选项*/ this.componentOptions = componentOptions /*当前节点对应的组件的实例*/ this.componentInstance = undefined /*当前节点的父节点*/ this.parent = undefined /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/ this.raw = false /*静态节点标志*/ this.isStatic = false /*是否作为跟节点插入*/ this.isRootInsert = true /*是否为注释节点*/ this.isComment = false /*是否为克隆节点*/ this.isCloned = false /*是否有v-once指令*/ this.isOnce = false &#125; // DEPRECATED: alias for componentInstance for backwards compat. /* istanbul ignore next https://github.com/answershuto/learnVue*/ get child (): Component | void &#123; return this.componentInstance &#125;&#125; 这里对VNode进行稍微的说明： 所有对象的 context 选项都指向了 Vue 实例 elm 属性则指向了其相对应的真实 DOM 节点 vue是通过createElement生成VNode 源码位置：src/core/vdom/create-element.js 123456789101112131415161718export function createElement ( context: Component, tag: any, data: any, children: any, normalizationType: any, alwaysNormalize: boolean): VNode | Array&lt;VNode&gt; &#123; if (Array.isArray(data) || isPrimitive(data)) &#123; normalizationType = children children = data data = undefined &#125; if (isTrue(alwaysNormalize)) &#123; normalizationType = ALWAYS_NORMALIZE &#125; return _createElement(context, tag, data, children, normalizationType)&#125; 上面可以看到createElement 方法实际上是对 _createElement 方法的封装，对参数的传入进行了判断 12345678910111213141516171819202122232425262728293031323334353637383940export function _createElement( context: Component, tag?: string | Class&lt;Component&gt; | Function | Object, data?: VNodeData, children?: any, normalizationType?: number): VNode | Array&lt;VNode&gt; &#123; if (isDef(data) &amp;&amp; isDef((data: any).__ob__)) &#123; process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn( `Avoid using observed data object as vnode data: $&#123;JSON.stringify(data)&#125;\\n` + &#x27;Always create fresh vnode data objects in each render!&#x27;, context` ) return createEmptyVNode() &#125; // object syntax in v-bind if (isDef(data) &amp;&amp; isDef(data.is)) &#123; tag = data.is &#125; if (!tag) &#123; // in case of component :is set to falsy value return createEmptyVNode() &#125; ... // support single function children as default scoped slot if (Array.isArray(children) &amp;&amp; typeof children[0] === &#x27;function&#x27; ) &#123; data = data || &#123;&#125; data.scopedSlots = &#123; default: children[0] &#125; children.length = 0 &#125; if (normalizationType === ALWAYS_NORMALIZE) &#123; children = normalizeChildren(children) &#125; else if ( === SIMPLE_NORMALIZE) &#123; children = simpleNormalizeChildren(children) &#125; // 创建VNode ...&#125; 可以看到_createElement接收5个参数： context 表示 VNode 的上下文环境，是 Component 类型 tag 表示标签，它可以是一个字符串，也可以是一个 Component data 表示 VNode 的数据，它是一个 VNodeData 类型 children 表示当前 VNode的子节点，它是任意类型的 normalizationType 表示子节点规范的类型，类型不同规范的方法也就不一样，主要是参考 render 函数是编译生成的还是用户手写的 根据normalizationType 的类型，children会有不同的定义 12345if (normalizationType === ALWAYS_NORMALIZE) &#123; children = normalizeChildren(children)&#125; else if ( === SIMPLE_NORMALIZE) &#123; children = simpleNormalizeChildren(children)&#125; simpleNormalizeChildren方法调用场景是 render 函数是编译生成的 normalizeChildren方法调用场景分为下面两种： render 函数是用户手写的 编译 slot、v-for 的时候会产生嵌套数组 无论是simpleNormalizeChildren还是normalizeChildren都是对children进行规范（使children 变成了一个类型为 VNode 的 Array），这里就不展开说了 规范化children的源码位置在：src/core/vdom/helpers/normalzie-children.js 在规范化children后，就去创建VNode 1234567891011121314151617181920212223242526let vnode, ns// 对tag进行判断if (typeof tag === &#x27;string&#x27;) &#123; let Ctor ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag) if (config.isReservedTag(tag)) &#123; // 如果是内置的节点，则直接创建一个普通VNode vnode = new VNode( config.parsePlatformTagName(tag), data, children, undefined, undefined, context ) &#125; else if (isDef(Ctor = resolveAsset(context.$options, &#x27;components&#x27;, tag))) &#123; // component // 如果是component类型，则会通过createComponent创建VNode节点 vnode = createComponent(Ctor, data, context, children, tag) &#125; else &#123; vnode = new VNode( tag, data, children, undefined, undefined, context ) &#125;&#125; else &#123; // direct component options / constructor vnode = createComponent(tag, data, context, children)&#125;createComponent`同样是创建`VNode 源码位置：src/core/vdom/create-component.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394export function createComponent ( Ctor: Class&lt;Component&gt; | Function | Object | void, data: ?VNodeData, context: Component, children: ?Array&lt;VNode&gt;, tag?: string): VNode | Array&lt;VNode&gt; | void &#123; if (isUndef(Ctor)) &#123; return &#125; // 构建子类构造函数 const baseCtor = context.$options._base // plain options object: turn it into a constructor if (isObject(Ctor)) &#123; Ctor = baseCtor.extend(Ctor) &#125; // if at this stage it&#x27;s not a constructor or an async component factory, // reject. if (typeof Ctor !== &#x27;function&#x27;) &#123; if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; warn(`Invalid Component definition: $&#123;String(Ctor)&#125;`, context) &#125; return &#125; // async component let asyncFactory if (isUndef(Ctor.cid)) &#123; asyncFactory = Ctor Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context) if (Ctor === undefined) &#123; return createAsyncPlaceholder( asyncFactory, data, context, children, tag ) &#125; &#125; data = data || &#123;&#125; // resolve constructor options in case global mixins are applied after // component constructor creation resolveConstructorOptions(Ctor) // transform component v-model data into props &amp; events if (isDef(data.model)) &#123; transformModel(Ctor.options, data) &#125; // extract props const propsData = extractPropsFromVNodeData(data, Ctor, tag) // functional component if (isTrue(Ctor.options.functional)) &#123; return createFunctionalComponent(Ctor, propsData, data, context, children) &#125; // extract listeners, since these needs to be treated as // child component listeners instead of DOM listeners const listeners = data.on // replace with listeners with .native modifier // so it gets processed during parent component patch. data.on = data.nativeOn if (isTrue(Ctor.options.abstract)) &#123; const slot = data.slot data = &#123;&#125; if (slot) &#123; data.slot = slot &#125; &#125; // 安装组件钩子函数，把钩子函数合并到data.hook中 installComponentHooks(data) //实例化一个VNode返回。组件的VNode是没有children的 const name = Ctor.options.name || tag const vnode = new VNode( `vue-component-$&#123;Ctor.cid&#125;$&#123;name ? `-$&#123;name&#125;` : &#x27;&#x27;&#125;`, data, undefined, undefined, undefined, context, &#123; Ctor, propsData, listeners, tag, children &#125;, asyncFactory ) if (__WEEX__ &amp;&amp; isRecyclableComponent(vnode)) &#123; return renderRecyclableComponentTemplate(vnode) &#125; return vnode&#125; 稍微提下createComponent生成VNode的三个关键流程： 构造子类构造函数Ctor installComponentHooks安装组件钩子函数 实例化 vnode 小结createElement 创建 VNode 的过程，每个 VNode 有 children，children 每个元素也是一个VNode，这样就形成了一个虚拟树结构，用于描述真实的DOM树结构","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue3有了解过吗？能说说跟Vue2的区别吗？","slug":"vue.Vue3有了解过吗？能说说跟Vue2的区别吗？","date":"2022-07-26T02:22:43.218Z","updated":"2022-08-05T02:35:20.714Z","comments":true,"path":"2022/07/26/vue.Vue3有了解过吗？能说说跟Vue2的区别吗？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue3%E6%9C%89%E4%BA%86%E8%A7%A3%E8%BF%87%E5%90%97%EF%BC%9F%E8%83%BD%E8%AF%B4%E8%AF%B4%E8%B7%9FVue2%E7%9A%84%E5%8C%BA%E5%88%AB%E5%90%97%EF%BC%9F/","excerpt":"","text":"Vue3有了解过吗？能说说跟Vue2的区别吗？ 一、Vue3介绍关于vue3的重构背景，看看尤大怎么说： 「Vue 新版本的理念成型于 2018 年末，当时 Vue 2 的代码库已经有两岁半了。比起通用软件的生命周期来这好像也没那么久，但在这段时期，前端世界已经今昔非比了 在我们更新（和重写）Vue 的主要版本时，主要考虑两点因素：首先是新的 JavaScript 语言特性在主流浏览器中的受支持水平；其次是当前代码库中随时间推移而逐渐暴露出来的一些设计和架构问题」 简要就是： 利用新的语言特性(es6) 解决架构问题 哪些变化 从上图中，我们可以概览Vue3的新特性，如下： 速度更快 体积减少 更易维护 更接近原生 更易使用 速度更快vue3相比vue2 重写了虚拟Dom实现 编译模板的优化 更高效的组件初始化 undate性能提高1.3~2倍 SSR速度提高了2~3倍 体积更小通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的 能够tree-shaking，有两大好处： 对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大 对使用者，打包出来的包体积变小了 vue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多 更易维护compositon Api 可与现有的Options API一起使用 灵活的逻辑组合与复用 Vue3模块可以和其他框架搭配使用 更好的Typescript支持VUE3是基于typescipt编写的，可以享受到自动的类型定义提示 编译器重写 更接近原生可以自定义渲染 API 更易使用响应式 Api 暴露出来 轻松识别组件重新渲染原因 二、Vue3新增特性Vue 3 中需要关注的一些新功能包括： framents Teleport composition Api createRenderer framents在 Vue3.x 中，组件现在支持有多个根节点 123456&lt;!-- Layout.vue --&gt;&lt;template&gt; &lt;header&gt;...&lt;/header&gt; &lt;main v-bind=&quot;$attrs&quot;&gt;...&lt;/main&gt; &lt;footer&gt;...&lt;/footer&gt;&lt;/template&gt; TeleportTeleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门” 在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难 通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它 1234567&lt;button @click=&quot;showToast&quot; class=&quot;btn&quot;&gt;打开 toast&lt;/button&gt;&lt;!-- to 属性就是目标位置 --&gt;&lt;teleport to=&quot;#teleport-target&quot;&gt; &lt;div v-if=&quot;visible&quot; class=&quot;toast-wrap&quot;&gt; &lt;div class=&quot;toast-msg&quot;&gt;我是一个 Toast 文案&lt;/div&gt; &lt;/div&gt;&lt;/teleport&gt; createRenderer通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台 我们可以将其生成在canvas画布上 关于createRenderer，我们了解下基本使用，就不展开讲述了 12345678910111213import &#123; createRenderer &#125; from &#x27;@vue/runtime-core&#x27;const &#123; render, createApp &#125; = createRenderer(&#123; patchProp, insert, remove, createElement, // ...&#125;)export &#123; render, createApp &#125;export * from &#x27;@vue/runtime-core&#x27; composition Apicomposition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理 关于compositon api的使用，这里以下图展开 简单使用: 123456789101112131415export default &#123; setup() &#123; const count = ref(0) const double = computed(() =&gt; count.value * 2) function increment() &#123; count.value++ &#125; onMounted(() =&gt; console.log(&#x27;component mounted!&#x27;)) return &#123; count, double, increment &#125; &#125;&#125; 三、非兼容变更Global API 全局 Vue API 已更改为使用应用程序实例 全局和内部 API 已经被重构为可 tree-shakable 模板指令 组件上 v-model 用法已更改 &lt;template v-for&gt;和 非 v-for节点上key用法已更改 在同一元素上使用的 v-if 和 v-for 优先级已更改 v-bind=&quot;object&quot; 现在排序敏感 v-for 中的 ref 不再注册 ref 数组 组件 只能使用普通函数创建功能组件 functional 属性在单文件组件 (SFC) 异步组件现在需要 defineAsyncComponent 方法来创建 渲染函数 渲染函数API改变 $scopedSlots property 已删除，所有插槽都通过 $slots 作为函数暴露 自定义指令 API 已更改为与组件生命周期一致 一些转换 class 被重命名了： v-enter -&gt; v-enter-from v-leave -&gt; v-leave-from 组件 watch 选项和实例方法 $watch不再支持点分隔字符串路径，请改用计算函数作为参数 在 Vue 2.x 中，应用根容器的 outerHTML 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。VUE3.x 现在使用应用程序容器的 innerHTML。 其他小改变 destroyed 生命周期选项被重命名为 unmounted beforeDestroy 生命周期选项被重命名为 beforeUnmount [prop default工厂函数不再有权访问 this 是上下文 自定义指令 API 已更改为与组件生命周期一致 data 应始终声明为函数 来自 mixin 的 data 选项现在可简单地合并 attribute 强制策略已更改 一些过渡 class 被重命名 组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。 &lt;template&gt; 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 &lt;template&gt; 元素，而不是渲染其内部内容。 在Vue 2.x 中，应用根容器的 outerHTML 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 innerHTML，这意味着容器本身不再被视为模板的一部分。 移除 API keyCode 支持作为 v-on 的修饰符 $on，$off和$once 实例方法 过滤filter 内联模板 attribute $destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对keep-alive的理解是什么？怎么缓存当前的组件？缓存后怎么更新？","slug":"vue.说说你对keep-alive的理解是什么？怎么缓存当前的组件？缓存后怎么更新？","date":"2022-07-26T02:22:43.217Z","updated":"2022-08-05T02:33:31.264Z","comments":true,"path":"2022/07/26/vue.说说你对keep-alive的理解是什么？怎么缓存当前的组件？缓存后怎么更新？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9keep-alive%E7%9A%84%E7%90%86%E8%A7%A3%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%80%8E%E4%B9%88%E7%BC%93%E5%AD%98%E5%BD%93%E5%89%8D%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%9F%E7%BC%93%E5%AD%98%E5%90%8E%E6%80%8E%E4%B9%88%E6%9B%B4%E6%96%B0%EF%BC%9F/","excerpt":"","text":"说说你对keep-alive的理解是什么？怎么缓存当前的组件？缓存后怎么更新？ 一、Keep-alive 是什么keep-alive是vue中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们 keep-alive可以设置以下props属性： include - 字符串或正则表达式。只有名称匹配的组件会被缓存 exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存 max - 数字。最多可以缓存多少组件实例 关于keep-alive的基本用法： 123&lt;keep-alive&gt; &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt; 使用includes和exclude： 12345678910111213&lt;keep-alive include=&quot;a,b&quot;&gt; &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt;&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;&lt;keep-alive :include=&quot;/a|b/&quot;&gt; &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt;&lt;!-- 数组 (使用 `v-bind`) --&gt;&lt;keep-alive :include=&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;&gt; &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt; 匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)，匿名组件不能被匹配 设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（activated与deactivated）： 首次进入组件时：beforeRouteEnter &gt; beforeCreate &gt; created&gt; mounted &gt; activated &gt; … … &gt; beforeRouteLeave &gt; deactivated 再次进入组件时：beforeRouteEnter &gt;activated &gt; … … &gt; beforeRouteLeave &gt; deactivated 二、使用场景使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用keepalive 举个栗子: 当我们从首页–&gt;列表页–&gt;商详页–&gt;再返回，这时候列表页应该是需要keep-alive 从首页–&gt;列表页–&gt;商详页–&gt;返回到列表页(需要缓存)–&gt;返回到首页(需要缓存)–&gt;再次进入列表页(不需要缓存)，这时候可以按需来控制页面的keep-alive 在路由中设置keepAlive属性判断是否需要缓存 1234567891011&#123; path: &#x27;list&#x27;, name: &#x27;itemList&#x27;, // 列表页 component (resolve) &#123; require([&#x27;@/pages/item/list&#x27;], resolve) &#125;, meta: &#123; keepAlive: true, title: &#x27;列表页&#x27; &#125;&#125; 使用&lt;keep-alive&gt; 12345678&lt;div id=&quot;app&quot; class=&#x27;wrapper&#x27;&gt; &lt;keep-alive&gt; &lt;!-- 需要缓存的视图组件 --&gt; &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt; &lt;/keep-alive&gt; &lt;!-- 不需要缓存的视图组件 --&gt; &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;&lt;/div&gt; 三、原理分析keep-alive是vue中内置的一个组件 源码位置：src/core/components/keep-alive.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081export default &#123; name: &#x27;keep-alive&#x27;, abstract: true, props: &#123; include: [String, RegExp, Array], exclude: [String, RegExp, Array], max: [String, Number] &#125;, created () &#123; this.cache = Object.create(null) this.keys = [] &#125;, destroyed () &#123; for (const key in this.cache) &#123; pruneCacheEntry(this.cache, key, this.keys) &#125; &#125;, mounted () &#123; this.$watch(&#x27;include&#x27;, val =&gt; &#123; pruneCache(this, name =&gt; matches(val, name)) &#125;) this.$watch(&#x27;exclude&#x27;, val =&gt; &#123; pruneCache(this, name =&gt; !matches(val, name)) &#125;) &#125;, render() &#123; /* 获取默认插槽中的第一个组件节点 */ const slot = this.$slots.default const vnode = getFirstComponentChild(slot) /* 获取该组件节点的componentOptions */ const componentOptions = vnode &amp;&amp; vnode.componentOptions if (componentOptions) &#123; /* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */ const name = getComponentName(componentOptions) const &#123; include, exclude &#125; = this /* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */ if ( (include &amp;&amp; (!name || !matches(include, name))) || // excluded (exclude &amp;&amp; name &amp;&amp; matches(exclude, name)) ) &#123; return vnode &#125; const &#123; cache, keys &#125; = this /* 获取组件的key值 */ const key = vnode.key == null // same constructor may get registered as different local components // so cid alone is not enough (#3269) ? componentOptions.Ctor.cid + (componentOptions.tag ? `::$&#123;componentOptions.tag&#125;` : &#x27;&#x27;) : vnode.key /* 拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存 */ if (cache[key]) &#123; vnode.componentInstance = cache[key].componentInstance // make current key freshest remove(keys, key) keys.push(key) &#125; /* 如果没有命中缓存，则将其设置进缓存 */ else &#123; cache[key] = vnode keys.push(key) // prune oldest entry /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */ if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) &#123; pruneCacheEntry(cache, keys[0], keys, this._vnode) &#125; &#125; vnode.data.keepAlive = true &#125; return vnode || (slot &amp;&amp; slot[0]) &#125;&#125; 可以看到该组件没有template，而是用了render，在组件渲染的时候会自动执行render函数 this.cache是一个对象，用来存储需要缓存的组件，它将以如下形式存储： 12345this.cache = &#123; &#x27;key1&#x27;:&#x27;组件1&#x27;, &#x27;key2&#x27;:&#x27;组件2&#x27;, // ...&#125; 在组件销毁的时候执行pruneCacheEntry函数 1234567891011121314function pruneCacheEntry ( cache: VNodeCache, key: string, keys: Array&lt;string&gt;, current?: VNode) &#123; const cached = cache[key] /* 判断当前没有处于被渲染状态的组件，将其销毁*/ if (cached &amp;&amp; (!current || cached.tag !== current.tag)) &#123; cached.componentInstance.$destroy() &#125; cache[key] = null remove(keys, key)&#125; 在mounted钩子函数中观测 include 和 exclude 的变化，如下： 12345678mounted () &#123; this.$watch(&#x27;include&#x27;, val =&gt; &#123; pruneCache(this, name =&gt; matches(val, name)) &#125;) this.$watch(&#x27;exclude&#x27;, val =&gt; &#123; pruneCache(this, name =&gt; !matches(val, name)) &#125;)&#125; 如果include 或exclude 发生了变化，即表示定义需要缓存的组件的规则或者不需要缓存的组件的规则发生了变化，那么就执行pruneCache函数，函数如下： 123456789101112function pruneCache (keepAliveInstance, filter) &#123; const &#123; cache, keys, _vnode &#125; = keepAliveInstance for (const key in cache) &#123; const cachedNode = cache[key] if (cachedNode) &#123; const name = getComponentName(cachedNode.componentOptions) if (name &amp;&amp; !filter(name)) &#123; pruneCacheEntry(cache, key, keys, _vnode) &#125; &#125; &#125;&#125; 在该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用pruneCacheEntry函数将其从this.cache对象剔除即可 关于keep-alive的最强大缓存功能是在render函数中实现 首先获取组件的key值： 123const key = vnode.key == null? componentOptions.Ctor.cid + (componentOptions.tag ? `::$&#123;componentOptions.tag&#125;` : &#x27;&#x27;): vnode.key 拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存，如下： 1234567/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */if (cache[key]) &#123; vnode.componentInstance = cache[key].componentInstance /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */ remove(keys, key) keys.push(key)&#125; 直接从缓存中拿 vnode 的组件实例，此时重新调整该组件key的顺序，将其从原来的地方删掉并重新放在this.keys中最后一个 this.cache对象中没有该key值的情况，如下： 123456789/* 如果没有命中缓存，则将其设置进缓存 */else &#123; cache[key] = vnode keys.push(key) /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */ if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) &#123; pruneCacheEntry(cache, keys[0], keys, this._vnode) &#125;&#125; 表明该组件还没有被缓存过，则以该组件的key为键，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中 此时再判断this.keys中缓存组件的数量是否超过了设置的最大缓存数量值this.max，如果超过了，则把第一个缓存组件删掉 四、思考题：缓存后如何获取数据解决方案可以有以下两种： beforeRouteEnter actived beforeRouteEnter每次组件渲染的时候，都会执行beforeRouteEnter 1234567beforeRouteEnter(to, from, next)&#123; next(vm=&gt;&#123; console.log(vm) // 每次进入路由执行 vm.getData() // 获取数据 &#125;)&#125;, actived在keep-alive缓存的组件被激活的时候，都会执行actived钩子 123activated()&#123; this.getData() // 获取数据&#125;, 注意：服务器端渲染期间avtived不被调用","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"你了解Axios的原理吗？有看过它的源码吗？","slug":"vue.你了解Axios的原理吗？有看过它的源码吗？","date":"2022-07-26T02:22:43.216Z","updated":"2022-08-05T02:32:53.637Z","comments":true,"path":"2022/07/26/vue.你了解Axios的原理吗？有看过它的源码吗？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%BD%A0%E4%BA%86%E8%A7%A3Axios%E7%9A%84%E5%8E%9F%E7%90%86%E5%90%97%EF%BC%9F%E6%9C%89%E7%9C%8B%E8%BF%87%E5%AE%83%E7%9A%84%E6%BA%90%E7%A0%81%E5%90%97%EF%BC%9F/","excerpt":"","text":"你了解Axios的原理吗？有看过它的源码吗？ 一、axios的使用关于axios的基本使用，上篇文章已经有所涉及，这里再稍微回顾下： 发送请求 12345678910111213import axios from &#x27;axios&#x27;;axios(config) // 直接传入配置axios(url[, config]) // 传入url和配置axios[method](url[, option]) // 直接调用请求方式方法，传入url和配置axios[method](url[, data[, option]]) // 直接调用请求方式方法，传入data、url和配置axios.request(option) // 调用 request 方法const axiosInstance = axios.create(config)// axiosInstance 也具有以上 axios 的能力axios.all([axiosInstance1, axiosInstance2]).then(axios.spread(response1, response2))// 调用 all 和传入 spread 回调 请求拦截器 1234567axios.interceptors.request.use(function (config) &#123; // 这里写发送请求前处理的代码 return config;&#125;, function (error) &#123; // 这里写发送请求错误相关的代码 return Promise.reject(error);&#125;); 响应拦截器 1234567axios.interceptors.response.use(function (response) &#123; // 这里写得到响应数据后处理的代码 return response;&#125;, function (error) &#123; // 这里写得到错误响应处理的代码 return Promise.reject(error);&#125;); 取消请求 1234567891011121314151617181920// 方式一const CancelToken = axios.CancelToken;const source = CancelToken.source();axios.get(&#x27;xxxx&#x27;, &#123; cancelToken: source.token&#125;)// 取消请求 (请求原因是可选的)source.cancel(&#x27;主动取消请求&#x27;);// 方式二const CancelToken = axios.CancelToken;let cancel;axios.get(&#x27;xxxx&#x27;, &#123; cancelToken: new CancelToken(function executor(c) &#123; cancel = c; &#125;)&#125;);cancel(&#x27;主动取消请求&#x27;); 二、实现一个简易版axios构建一个Axios构造函数，核心代码为request 12345678910111213141516171819class Axios &#123; constructor() &#123; &#125; request(config) &#123; return new Promise(resolve =&gt; &#123; const &#123;url = &#x27;&#x27;, method = &#x27;get&#x27;, data = &#123;&#125;&#125; = config; // 发送ajax请求 const xhr = new XMLHttpRequest(); xhr.open(method, url, true); xhr.onload = function() &#123; console.log(xhr.responseText) resolve(xhr.responseText); &#125; xhr.send(data); &#125;) &#125;&#125; 导出axios实例 123456789// 最终导出axios的方法，即实例的request方法function CreateAxiosFn() &#123; let axios = new Axios(); let req = axios.request.bind(axios); return req;&#125;// 得到最后的全局变量axioslet axios = CreateAxiosFn(); 上述就已经能够实现axios(&#123; &#125;)这种方式的请求 下面是来实现下axios.method()这种形式的请求 1234567891011121314151617181920212223// 定义get,post...方法，挂在到Axios原型上const methodsArr = [&#x27;get&#x27;, &#x27;delete&#x27;, &#x27;head&#x27;, &#x27;options&#x27;, &#x27;put&#x27;, &#x27;patch&#x27;, &#x27;post&#x27;];methodsArr.forEach(met =&gt; &#123; Axios.prototype[met] = function() &#123; console.log(&#x27;执行&#x27;+met+&#x27;方法&#x27;); // 处理单个方法 if ([&#x27;get&#x27;, &#x27;delete&#x27;, &#x27;head&#x27;, &#x27;options&#x27;].includes(met)) &#123; // 2个参数(url[, config]) return this.request(&#123; method: met, url: arguments[0], ...arguments[1] || &#123;&#125; &#125;) &#125; else &#123; // 3个参数(url[,data[,config]]) return this.request(&#123; method: met, url: arguments[0], data: arguments[1] || &#123;&#125;, ...arguments[2] || &#123;&#125; &#125;) &#125; &#125;&#125;) 将Axios.prototype上的方法搬运到request上 首先实现个工具类，实现将b方法混入到a，并且修改this指向 1234567891011121314const utils = &#123; extend(a,b, context) &#123; for(let key in b) &#123; if (b.hasOwnProperty(key)) &#123; if (typeof b[key] === &#x27;function&#x27;) &#123; a[key] = b[key].bind(context); &#125; else &#123; a[key] = b[key] &#125; &#125; &#125; &#125;&#125; 修改导出的方法 123456789function CreateAxiosFn() &#123; let axios = new Axios(); let req = axios.request.bind(axios); // 增加代码 utils.extend(req, Axios.prototype, axios) return req;&#125; 构建拦截器的构造函数 123456789101112class InterceptorsManage &#123; constructor() &#123; this.handlers = []; &#125; use(fullfield, rejected) &#123; this.handlers.push(&#123; fullfield, rejected &#125;) &#125;&#125; 实现axios.interceptors.response.use和axios.interceptors.request.use 12345678910111213class Axios &#123; constructor() &#123; // 新增代码 this.interceptors = &#123; request: new InterceptorsManage, response: new InterceptorsManage &#125; &#125; request(config) &#123; ... &#125;&#125; 执行语句axios.interceptors.response.use和axios.interceptors.request.use的时候，实现获取axios实例上的interceptors对象，然后再获取response或request拦截器，再执行对应的拦截器的use方法 把Axios上的方法和属性搬到request过去 12345678910function CreateAxiosFn() &#123; let axios = new Axios(); let req = axios.request.bind(axios); // 混入方法， 处理axios的request方法，使之拥有get,post...方法 utils.extend(req, Axios.prototype, axios) // 新增代码 utils.extend(req, axios) return req;&#125; 现在request也有了interceptors对象，在发送请求的时候，会先获取request拦截器的handlers的方法来执行 首先将执行ajax的请求封装成一个方法 1234567891011121314151617request(config) &#123; this.sendAjax(config)&#125;sendAjax(config)&#123; return new Promise(resolve =&gt; &#123; const &#123;url = &#x27;&#x27;, method = &#x27;get&#x27;, data = &#123;&#125;&#125; = config; // 发送ajax请求 console.log(config); const xhr = new XMLHttpRequest(); xhr.open(method, url, true); xhr.onload = function() &#123; console.log(xhr.responseText) resolve(xhr.responseText); &#125;; xhr.send(data); &#125;)&#125; 获得handlers中的回调 123456789101112131415161718192021request(config) &#123; // 拦截器和请求组装队列 let chain = [this.sendAjax.bind(this), undefined] // 成对出现的，失败回调暂时不处理 // 请求拦截 this.interceptors.request.handlers.forEach(interceptor =&gt; &#123; chain.unshift(interceptor.fullfield, interceptor.rejected) &#125;) // 响应拦截 this.interceptors.response.handlers.forEach(interceptor =&gt; &#123; chain.push(interceptor.fullfield, interceptor.rejected) &#125;) // 执行队列，每次执行一对，并给promise赋最新的值 let promise = Promise.resolve(config); while(chain.length &gt; 0) &#123; promise = promise.then(chain.shift(), chain.shift()) &#125; return promise;&#125; chains大概是[&#39;fulfilled1&#39;,&#39;reject1&#39;,&#39;fulfilled2&#39;,&#39;reject2&#39;,&#39;this.sendAjax&#39;,&#39;undefined&#39;,&#39;fulfilled2&#39;,&#39;reject2&#39;,&#39;fulfilled1&#39;,&#39;reject1&#39;]这种形式 这样就能够成功实现一个简易版axios 三、源码分析首先看看目录结构 123456789101112131415161718192021222324252627282930313233343536373839axios`发送请求有很多实现的方法，实现入口文件为`axios.jsfunction createInstance(defaultConfig) &#123; var context = new Axios(defaultConfig); // instance指向了request方法，且上下文指向context，所以可以直接以 instance(option) 方式调用 // Axios.prototype.request 内对第一个参数的数据类型判断，使我们能够以 instance(url, option) 方式调用 var instance = bind(Axios.prototype.request, context); // 把Axios.prototype上的方法扩展到instance对象上， // 并指定上下文为context，这样执行Axios原型链上的方法时，this会指向context utils.extend(instance, Axios.prototype, context); // Copy context to instance // 把context对象上的自身属性和方法扩展到instance上 // 注：因为extend内部使用的forEach方法对对象做for in 遍历时，只遍历对象本身的属性，而不会遍历原型链上的属性 // 这样，instance 就有了 defaults、interceptors 属性。 utils.extend(instance, context); return instance;&#125;// Create the default instance to be exported 创建一个由默认配置生成的axios实例var axios = createInstance(defaults);// Factory for creating new instances 扩展axios.create工厂函数，内部也是 createInstanceaxios.create = function create(instanceConfig) &#123; return createInstance(mergeConfig(axios.defaults, instanceConfig));&#125;;// Expose all/spreadaxios.all = function all(promises) &#123; return Promise.all(promises);&#125;;axios.spread = function spread(callback) &#123; return function wrap(arr) &#123; return callback.apply(null, arr); &#125;;&#125;;module.exports = axios; 主要核心是 Axios.prototype.request，各种请求方式的调用实现都是在 request 内部实现的， 简单看下 request 的逻辑 12345678910111213141516171819202122232425262728293031323334353637383940Axios.prototype.request = function request(config) &#123; // Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API // 判断 config 参数是否是 字符串，如果是则认为第一个参数是 URL，第二个参数是真正的config if (typeof config === &#x27;string&#x27;) &#123; config = arguments[1] || &#123;&#125;; // 把 url 放置到 config 对象中，便于之后的 mergeConfig config.url = arguments[0]; &#125; else &#123; // 如果 config 参数是否是 字符串，则整体都当做config config = config || &#123;&#125;; &#125; // 合并默认配置和传入的配置 config = mergeConfig(this.defaults, config); // 设置请求方法 config.method = config.method ? config.method.toLowerCase() : &#x27;get&#x27;; /* something... 此部分会在后续拦截器单独讲述 */&#125;;// 在 Axios 原型上挂载 &#x27;delete&#x27;, &#x27;get&#x27;, &#x27;head&#x27;, &#x27;options&#x27; 且不传参的请求方法，实现内部也是 requestutils.forEach([&#x27;delete&#x27;, &#x27;get&#x27;, &#x27;head&#x27;, &#x27;options&#x27;], function forEachMethodNoData(method) &#123; Axios.prototype[method] = function(url, config) &#123; return this.request(utils.merge(config || &#123;&#125;, &#123; method: method, url: url &#125;)); &#125;;&#125;);// 在 Axios 原型上挂载 &#x27;post&#x27;, &#x27;put&#x27;, &#x27;patch&#x27; 且传参的请求方法，实现内部同样也是 requestutils.forEach([&#x27;post&#x27;, &#x27;put&#x27;, &#x27;patch&#x27;], function forEachMethodWithData(method) &#123; Axios.prototype[method] = function(url, data, config) &#123; return this.request(utils.merge(config || &#123;&#125;, &#123; method: method, url: url, data: data &#125;)); &#125;;&#125;); request入口参数为config，可以说config贯彻了axios的一生 axios 中的 config主要分布在这几个地方： 默认配置 defaults.js config.method默认为 get 调用 createInstance 方法创建 axios实例，传入的config 直接或间接调用 request 方法，传入的 config 1234567891011121314// axios.js// 创建一个由默认配置生成的axios实例var axios = createInstance(defaults);// 扩展axios.create工厂函数，内部也是 createInstanceaxios.create = function create(instanceConfig) &#123; return createInstance(mergeConfig(axios.defaults, instanceConfig));&#125;;// Axios.js// 合并默认配置和传入的配置config = mergeConfig(this.defaults, config);// 设置请求方法config.method = config.method ? config.method.toLowerCase() : &#x27;get&#x27;; 从源码中，可以看到优先级：默认配置对象default &lt; method:get &lt; Axios的实例属性this.default &lt; request参数 下面重点看看request方法 12345678910111213141516171819202122232425262728Axios.prototype.request = function request(config) &#123; /* 先是 mergeConfig ... 等，不再阐述 */ // Hook up interceptors middleware 创建拦截器链. dispatchRequest 是重中之重，后续重点 var chain = [dispatchRequest, undefined]; // push各个拦截器方法 注意：interceptor.fulfilled 或 interceptor.rejected 是可能为undefined this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) &#123; // 请求拦截器逆序 注意此处的 forEach 是自定义的拦截器的forEach方法 chain.unshift(interceptor.fulfilled, interceptor.rejected); &#125;); this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) &#123; // 响应拦截器顺序 注意此处的 forEach 是自定义的拦截器的forEach方法 chain.push(interceptor.fulfilled, interceptor.rejected); &#125;); // 初始化一个promise对象，状态为resolved，接收到的参数为已经处理合并过的config对象 var promise = Promise.resolve(config); // 循环拦截器的链 while (chain.length) &#123; promise = promise.then(chain.shift(), chain.shift()); // 每一次向外弹出拦截器 &#125; // 返回 promise return promise;&#125;; 拦截器interceptors是在构建axios实例化的属性 1234567function Axios(instanceConfig) &#123; this.defaults = instanceConfig; this.interceptors = &#123; request: new InterceptorManager(), // 请求拦截 response: new InterceptorManager() // 响应拦截 &#125;;&#125; InterceptorManager构造函数 123456789101112131415161718192021222324252627282930// 拦截器的初始化 其实就是一组钩子函数function InterceptorManager() &#123; this.handlers = [];&#125;// 调用拦截器实例的use时就是往钩子函数中push方法InterceptorManager.prototype.use = function use(fulfilled, rejected) &#123; this.handlers.push(&#123; fulfilled: fulfilled, rejected: rejected &#125;); return this.handlers.length - 1;&#125;;// 拦截器是可以取消的，根据use的时候返回的ID，把某一个拦截器方法置为null// 不能用 splice 或者 slice 的原因是 删除之后 id 就会变化，导致之后的顺序或者是操作不可控InterceptorManager.prototype.eject = function eject(id) &#123; if (this.handlers[id]) &#123; this.handlers[id] = null; &#125;&#125;;// 这就是在 Axios的request方法中 中循环拦截器的方法 forEach 循环执行钩子函数InterceptorManager.prototype.forEach = function forEach(fn) &#123; utils.forEach(this.handlers, function forEachHandler(h) &#123; if (h !== null) &#123; fn(h); &#125; &#125;);&#125; 请求拦截器方法是被 unshift到拦截器中，响应拦截器是被push到拦截器中的。最终它们会拼接上一个叫dispatchRequest的方法被后续的 promise 顺序执行 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687var utils = require(&#x27;./../utils&#x27;);var transformData = require(&#x27;./transformData&#x27;);var isCancel = require(&#x27;../cancel/isCancel&#x27;);var defaults = require(&#x27;../defaults&#x27;);var isAbsoluteURL = require(&#x27;./../helpers/isAbsoluteURL&#x27;);var combineURLs = require(&#x27;./../helpers/combineURLs&#x27;);// 判断请求是否已被取消，如果已经被取消，抛出已取消function throwIfCancellationRequested(config) &#123; if (config.cancelToken) &#123; config.cancelToken.throwIfRequested(); &#125;&#125;module.exports = function dispatchRequest(config) &#123; throwIfCancellationRequested(config); // 如果包含baseUrl, 并且不是config.url绝对路径，组合baseUrl以及config.url if (config.baseURL &amp;&amp; !isAbsoluteURL(config.url)) &#123; // 组合baseURL与url形成完整的请求路径 config.url = combineURLs(config.baseURL, config.url); &#125; config.headers = config.headers || &#123;&#125;; // 使用/lib/defaults.js中的transformRequest方法，对config.headers和config.data进行格式化 // 比如将headers中的Accept，Content-Type统一处理成大写 // 比如如果请求正文是一个Object会格式化为JSON字符串，并添加application/json;charset=utf-8的Content-Type // 等一系列操作 config.data = transformData( config.data, config.headers, config.transformRequest ); // 合并不同配置的headers，config.headers的配置优先级更高 config.headers = utils.merge( config.headers.common || &#123;&#125;, config.headers[config.method] || &#123;&#125;, config.headers || &#123;&#125; ); // 删除headers中的method属性 utils.forEach( [&#x27;delete&#x27;, &#x27;get&#x27;, &#x27;head&#x27;, &#x27;post&#x27;, &#x27;put&#x27;, &#x27;patch&#x27;, &#x27;common&#x27;], function cleanHeaderConfig(method) &#123; delete config.headers[method]; &#125; ); // 如果config配置了adapter，使用config中配置adapter的替代默认的请求方法 var adapter = config.adapter || defaults.adapter; // 使用adapter方法发起请求（adapter根据浏览器环境或者Node环境会有不同） return adapter(config).then( // 请求正确返回的回调 function onAdapterResolution(response) &#123; // 判断是否以及取消了请求，如果取消了请求抛出以取消 throwIfCancellationRequested(config); // 使用/lib/defaults.js中的transformResponse方法，对服务器返回的数据进行格式化 // 例如，使用JSON.parse对响应正文进行解析 response.data = transformData( response.data, response.headers, config.transformResponse ); return response; &#125;, // 请求失败的回调 function onAdapterRejection(reason) &#123; if (!isCancel(reason)) &#123; throwIfCancellationRequested(config); if (reason &amp;&amp; reason.response) &#123; reason.response.data = transformData( reason.response.data, reason.response.headers, config.transformResponse ); &#125; &#125; return Promise.reject(reason); &#125; );&#125;; 再来看看axios是如何实现取消请求的，实现文件在CancelToken.js 123456789101112131415161718192021222324252627282930313233343536function CancelToken(executor) &#123; if (typeof executor !== &#x27;function&#x27;) &#123; throw new TypeError(&#x27;executor must be a function.&#x27;); &#125; // 在 CancelToken 上定义一个 pending 状态的 promise ，将 resolve 回调赋值给外部变量 resolvePromise var resolvePromise; this.promise = new Promise(function promiseExecutor(resolve) &#123; resolvePromise = resolve; &#125;); var token = this; // 立即执行 传入的 executor函数，将真实的 cancel 方法通过参数传递出去。 // 一旦调用就执行 resolvePromise 即前面的 promise 的 resolve，就更改promise的状态为 resolve。 // 那么xhr中定义的 CancelToken.promise.then方法就会执行, 从而xhr内部会取消请求 executor(function cancel(message) &#123; // 判断请求是否已经取消过，避免多次执行 if (token.reason) &#123; return; &#125; token.reason = new Cancel(message); resolvePromise(token.reason); &#125;);&#125;CancelToken.source = function source() &#123; // source 方法就是返回了一个 CancelToken 实例，与直接使用 new CancelToken 是一样的操作 var cancel; var token = new CancelToken(function executor(c) &#123; cancel = c; &#125;); // 返回创建的 CancelToken 实例以及取消方法 return &#123; token: token, cancel: cancel &#125;;&#125;; 实际上取消请求的操作是在 xhr.js 中也有响应的配合的 12345678910if (config.cancelToken) &#123; config.cancelToken.promise.then(function onCanceled(cancel) &#123; if (!request) &#123; return; &#125; // 取消请求 request.abort(); reject(cancel); &#125;);&#125; 巧妙的地方在 CancelToken中 executor 函数，通过resolve函数的传递与执行，控制promise的状态 小结","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？","slug":"vue.Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？","date":"2022-07-26T02:22:43.215Z","updated":"2022-08-05T02:34:55.278Z","comments":true,"path":"2022/07/26/vue.Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue3.0%20%E6%89%80%E9%87%87%E7%94%A8%E7%9A%84%20Composition%20Api%20%E4%B8%8E%20Vue2.x%20%E4%BD%BF%E7%94%A8%E7%9A%84%20Options%20Api%20%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F/","excerpt":"","text":"Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？ 开始之前Composition API 可以说是Vue3最大的特点，那么为什么要推出Composition Api，解决了什么问题？ 通常使用Vue2开发的项目，普遍会存在以下问题： 代码的可读性随着组件变大而变差 每一种代码复用的方式，都存在缺点 TypeScript支持有限 以上通过使用Composition Api都能迎刃而解 正文一、Options ApiOptions API，即大家常说的选项API，即以vue为后缀的文件，通过定义methods，computed，watch，data等属性与方法，共同处理页面逻辑 如下图： 可以看到Options代码编写方式，如果是组件状态，则写在data属性上，如果是方法，则写在methods属性上… 用组件的选项 (data、computed、methods、watch) 组织逻辑在大多数情况下都有效 然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解 二、Composition Api在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合） 即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API 三、对比下面对Composition Api与Options Api进行两大方面的比较 逻辑组织 逻辑复用 逻辑组织Options API假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色） 可以看到，这种碎片化使得理解和维护复杂组件变得困难 选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块 Compostion API而Compositon API正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去 下面举个简单例子，将处理count属性相关的代码放在同一个函数了 123456789101112131415161718function useCount() &#123; let count = ref(10); let double = computed(() =&gt; &#123; return count.value * 2; &#125;); const handleConut = () =&gt; &#123; count.value = count.value * 2; &#125;; console.log(count); return &#123; count, double, handleConut, &#125;;&#125; 组件上中使用count 12345678910export default defineComponent(&#123; setup() &#123; const &#123; count, double, handleConut &#125; = useCount(); return &#123; count, double, handleConut &#125; &#125;,&#125;); 再来一张图进行对比，可以很直观地感受到 Composition API在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可 逻辑复用在Vue2中，我们是用过mixin去复用相同的逻辑 下面举个例子，我们会另起一个mixin.js文件 12345678910111213141516171819202122232425262728293031323334353637export const MoveMixin = &#123; data() &#123; return &#123; x: 0, y: 0, &#125;; &#125;, methods: &#123; handleKeyup(e) &#123; console.log(e.code); // 上下左右 x y switch (e.code) &#123; case &quot;ArrowUp&quot;: this.y--; break; case &quot;ArrowDown&quot;: this.y++; break; case &quot;ArrowLeft&quot;: this.x--; break; case &quot;ArrowRight&quot;: this.x++; break; &#125; &#125;, &#125;, mounted() &#123; window.addEventListener(&quot;keyup&quot;, this.handleKeyup); &#125;, unmounted() &#123; window.removeEventListener(&quot;keyup&quot;, this.handleKeyup); &#125;,&#125;; 然后在组件中使用 1234567891011&lt;template&gt; &lt;div&gt; Mouse position: x &#123;&#123; x &#125;&#125; / y &#123;&#123; y &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import mousePositionMixin from &#x27;./mouse&#x27;export default &#123; mixins: [mousePositionMixin]&#125;&lt;/script&gt; 使用单个mixin似乎问题不大，但是当我们一个组件混入大量不同的 mixins 的时候 1mixins: [mousePositionMixin, fooMixin, barMixin, otherMixin] 会存在两个非常明显的问题： 命名冲突 数据来源不清晰 现在通过Compositon API这种方式改写上面的代码 12345678910111213141516171819202122232425262728293031323334353637383940import &#123; onMounted, onUnmounted, reactive &#125; from &quot;vue&quot;;export function useMove() &#123; const position = reactive(&#123; x: 0, y: 0, &#125;); const handleKeyup = (e) =&gt; &#123; console.log(e.code); // 上下左右 x y switch (e.code) &#123; case &quot;ArrowUp&quot;: // y.value--; position.y--; break; case &quot;ArrowDown&quot;: // y.value++; position.y++; break; case &quot;ArrowLeft&quot;: // x.value--; position.x--; break; case &quot;ArrowRight&quot;: // x.value++; position.x++; break; &#125; &#125;; onMounted(() =&gt; &#123; window.addEventListener(&quot;keyup&quot;, handleKeyup); &#125;); onUnmounted(() =&gt; &#123; window.removeEventListener(&quot;keyup&quot;, handleKeyup); &#125;); return &#123; position &#125;;&#125; 在组件中使用 123456789101112131415161718192021&lt;template&gt; &lt;div&gt; Mouse position: x &#123;&#123; x &#125;&#125; / y &#123;&#123; y &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; useMove &#125; from &quot;./useMove&quot;;import &#123; toRefs &#125; from &quot;vue&quot;;export default &#123; setup() &#123; const &#123; position &#125; = useMove(); const &#123; x, y &#125; = toRefs(position); return &#123; x, y, &#125;; &#125;,&#125;;&lt;/script&gt; 可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题 小结 在逻辑组织和逻辑复用方面，Composition API是优于Options API 因为Composition API几乎是函数，会有更好的类型推断。 Composition API对 tree-shaking 友好，代码也更容易压缩 Composition API中见不到this的使用，减少了this指向不明的情况 如果是小型组件，可以继续使用Options API，也是十分友好的","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说为什么要在列表组件中写 key，其作用是什么？","slug":"vue.说说为什么要在列表组件中写 key，其作用是什么？","date":"2022-07-26T02:22:43.214Z","updated":"2022-08-05T02:34:05.853Z","comments":true,"path":"2022/07/26/vue.说说为什么要在列表组件中写 key，其作用是什么？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9C%A8%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E5%86%99%20key%EF%BC%8C%E5%85%B6%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"说说为什么要在列表组件中写 key，其作用是什么？ 一、Key是什么开始之前，我们先还原两个实际工作场景 当我们在使用v-for时，需要给单元加上key 123&lt;ul&gt; &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;...&lt;/li&gt;&lt;/ul&gt; 用+new Date()生成的时间戳作为key，手动强制触发重新渲染 1&lt;Comp :key=&quot;+new Date()&quot; /&gt; 那么这背后的逻辑是什么，key的作用又是什么？ 一句话来讲 key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点 场景背后的逻辑场景1: 当我们在使用v-for时，需要给单元加上key 如果不用key，Vue会采用就地复地原则：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。 如果使用了key，Vue会根据keys的顺序记录element，曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed 场景2: 用+new Date()生成的时间戳作为key，手动强制触发重新渲染 当拥有新值的rerender作为key时，拥有了新key的Comp出现了，那么旧key Comp会被移除，新key Comp触发渲染 二、设置key与不设置key区别举个例子： 创建一个实例，2秒后往items数组插入数据 123456789101112131415161718&lt;body&gt; &lt;div id=&quot;demo&quot;&gt; &lt;p v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;script src=&quot;../../dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; // 创建实例 const app = new Vue(&#123; el: &#x27;#demo&#x27;, data: &#123; items: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;] &#125;, mounted () &#123; setTimeout(() =&gt; &#123; this.items.splice(2, 0, &#x27;f&#x27;) // &#125;, 2000); &#125;, &#125;); &lt;/script&gt;&lt;/body&gt; 在不使用key的情况，vue会进行这样的操作： 分析下整体流程： 比较A，A，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较B，B，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较C，F，相同类型的节点，进行patch，数据不同，发生dom操作 比较D，C，相同类型的节点，进行patch，数据不同，发生dom操作 比较E，D，相同类型的节点，进行patch，数据不同，发生dom操作 循环结束，将E插入到DOM中 一共发生了3次更新，1次插入操作 在使用key的情况：vue会进行这样的操作： 比较A，A，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较B，B，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较C，F，不相同类型的节点 比较E、E，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较D、D，相同类型的节点，进行patch，但数据相同，不发生dom操作 比较C、C，相同类型的节点，进行patch，但数据相同，不发生dom操作 循环结束，将F插入到C之前 一共发生了0次更新，1次插入操作 通过上面两个小例子，可见设置key能够大大减少对页面的DOM操作，提高了diff效率 设置key值一定能提高diff效率吗？其实不然，文档中也明确表示 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素 这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出 建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升 三、原理分析源码位置：core/vdom/patch.js 这里判断是否为同一个key，首先判断的是key值是否相等如果没有设置key，那么key为undefined，这时候undefined是恒等于undefined 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455function sameVnode (a, b) &#123; return ( a.key === b.key &amp;&amp; ( ( a.tag === b.tag &amp;&amp; a.isComment === b.isComment &amp;&amp; isDef(a.data) === isDef(b.data) &amp;&amp; sameInputType(a, b) ) || ( isTrue(a.isAsyncPlaceholder) &amp;&amp; a.asyncFactory === b.asyncFactory &amp;&amp; isUndef(b.asyncFactory.error) ) ) )&#125;updateChildren`方法中会对新旧`vnode`进行`diff`，然后将比对出的结果用来更新真实的`DOMfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) &#123; ... while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123; if (isUndef(oldStartVnode)) &#123; ... &#125; else if (isUndef(oldEndVnode)) &#123; ... &#125; else if (sameVnode(oldStartVnode, newStartVnode)) &#123; ... &#125; else if (sameVnode(oldEndVnode, newEndVnode)) &#123; ... &#125; else if (sameVnode(oldStartVnode, newEndVnode)) &#123; // Vnode moved right ... &#125; else if (sameVnode(oldEndVnode, newStartVnode)) &#123; // Vnode moved left ... &#125; else &#123; if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx) if (isUndef(idxInOld)) &#123; // New element createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx) &#125; else &#123; vnodeToMove = oldCh[idxInOld] if (sameVnode(vnodeToMove, newStartVnode)) &#123; patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx) oldCh[idxInOld] = undefined canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm) &#125; else &#123; // same key but different element. treat as new element createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx) &#125; &#125; newStartVnode = newCh[++newStartIdx] &#125; &#125; ...&#125;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"SPA（单页应用）首屏加载速度慢怎么解决？","slug":"vue.SPA（单页应用）首屏加载速度慢怎么解决？","date":"2022-07-26T02:22:43.213Z","updated":"2022-08-05T02:34:43.812Z","comments":true,"path":"2022/07/26/vue.SPA（单页应用）首屏加载速度慢怎么解决？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.SPA%EF%BC%88%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%EF%BC%89%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F/","excerpt":"","text":"SPA（单页应用）首屏加载速度慢怎么解决？ 一、什么是首屏加载首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容 首屏加载可以说是用户体验中最重要的环节 关于计算首屏时间利用performance.timing提供的数据： 通过DOMContentLoad或者performance来计算出首屏时间 123456789101112131415// 方案一：document.addEventListener(&#x27;DOMContentLoaded&#x27;, (event) =&gt; &#123; console.log(&#x27;first contentful painting&#x27;);&#125;);// 方案二：performance.getEntriesByName(&quot;first-contentful-paint&quot;)[0].startTime// performance.getEntriesByName(&quot;first-contentful-paint&quot;)[0]// 会返回一个 PerformancePaintTiming的实例，结构如下：&#123; name: &quot;first-contentful-paint&quot;, entryType: &quot;paint&quot;, startTime: 507.80000002123415, duration: 0,&#125;; 二、加载慢的原因在页面渲染的过程，导致加载速度慢的因素可能如下： 网络延时问题 资源文件体积是否过大 资源是否重复发送请求去加载了 加载脚本的时候，渲染内容堵塞了 三、解决方案常见的几种SPA首屏优化方式 减小入口文件积 静态资源本地缓存 UI框架按需加载 图片资源的压缩 组件重复打包 开启GZip压缩 使用SSR 减小入口文件体积常用的手段是路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加 在vue-router配置路由的时候，采用动态加载路由的形式 12345routes:[ path: &#x27;Blogs&#x27;, name: &#x27;ShowBlogs&#x27;, component: () =&gt; import(&#x27;./components/ShowBlogs.vue&#x27;)] 以函数的形式加载路由，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件 静态资源本地缓存后端返回资源问题： 采用HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头 采用Service Worker离线缓存 前端合理利用localStorage UI框架按需加载在日常使用UI框架，例如element-UI、或者antd，我们经常性直接饮用整个UI库 12import ElementUI from &#x27;element-ui&#x27;Vue.use(ElementUI) 但实际上我用到的组件只有按钮，分页，表格，输入与警告 所以我们要按需引用 1234import &#123; Button, Input, Pagination, Table, TableColumn, MessageBox &#125; from &#x27;element-ui&#x27;;Vue.use(Button)Vue.use(Input)Vue.use(Pagination) 组件重复打包假设A.js文件是一个常用的库，现在有多个路由使用了A.js文件，这就造成了重复下载 解决方案：在webpack的config文件中，修改CommonsChunkPlugin的配置 1minChunks: 3 minChunks为3表示会把使用3次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件 图片资源的压缩图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素 对于所有的图片资源，我们可以进行适当的压缩 对页面上使用到的icon，可以使用在线字体图标，或者雪碧图，将众多小图标合并到同一张图上，用以减轻http请求压力。 开启GZip压缩拆完包之后，我们再用gzip做一下压缩 安装compression-webpack-plugin 1cnmp i compression-webpack-plugin -D 在vue.congig.js中引入并修改webpack配置 1234567891011121314const CompressionPlugin = require(&#x27;compression-webpack-plugin&#x27;)configureWebpack: (config) =&gt; &#123; if (process.env.NODE_ENV === &#x27;production&#x27;) &#123; // 为生产环境修改配置... config.mode = &#x27;production&#x27; return &#123; plugins: [new CompressionPlugin(&#123; test: /\\.js$|\\.html$|\\.css/, //匹配文件名 threshold: 10240, //对超过10k的数据进行压缩 deleteOriginalAssets: false //是否删除原文件 &#125;)] &#125; &#125; 在服务器我们也要做相应的配置 如果发送请求的浏览器支持gzip，就发送给它gzip格式的文件 我的服务器是用express框架搭建的 只要安装一下compression就能使用 12const compression = require(&#x27;compression&#x27;)app.use(compression()) // 在其他中间件使用之前调用 使用SSRSSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成html字符串，再发送到浏览器 从头搭建一个服务端渲染是很复杂的，vue应用建议使用Nuxt.js实现服务端渲染 小结：减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分 ：资源加载优化 和 页面渲染优化 下图是更为全面的首屏优化的方案 大家可以根据自己项目的情况选择各种方式进行首屏渲染的优化","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"你有写过自定义指令吗？自定义指令的应用场景有哪些？","slug":"vue.你有写过自定义指令吗？自定义指令的应用场景有哪些？","date":"2022-07-26T02:22:43.212Z","updated":"2022-08-05T02:33:05.839Z","comments":true,"path":"2022/07/26/vue.你有写过自定义指令吗？自定义指令的应用场景有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%BD%A0%E6%9C%89%E5%86%99%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E5%90%97%EF%BC%9F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"你有写过自定义指令吗？自定义指令的应用场景有哪些？ 一、什么是指令开始之前我们先学习一下指令系统这个词 指令系统是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力 在vue中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统 我们看到的v-开头的行内属性，都是指令，不同的指令可以完成或实现不同的功能 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令 指令使用的几种方式： 1234567891011121314//会实例化一个指令，但这个指令没有参数 `v-xxx`// -- 将值传到指令中`v-xxx=&quot;value&quot;` // -- 将字符串传入到指令中，如`v-html=&quot;&#x27;&lt;p&gt;内容&lt;/p&gt;&#x27;&quot;``v-xxx=&quot;&#x27;string&#x27;&quot;` // -- 传参数（`arg`），如`v-bind:class=&quot;className&quot;``v-xxx:arg=&quot;value&quot;` // -- 使用修饰符（`modifier`）`v-xxx:arg.modifier=&quot;value&quot;` 二、如何实现注册一个自定义指令有全局注册与局部注册 全局注册注册主要是用过Vue.directive方法进行注册 Vue.directive第一个参数是指令的名字（不需要写上v-前缀），第二个参数可以是对象数据，也可以是一个指令函数 12345678// 注册一个全局自定义指令 `v-focus`Vue.directive(&#x27;focus&#x27;, &#123; // 当被绑定的元素插入到 DOM 中时…… inserted: function (el) &#123; // 聚焦元素 el.focus() // 页面加载完成之后自动让输入框获取到焦点的小功能 &#125;&#125;) 局部注册通过在组件options选项中设置directive属性 12345678directives: &#123; focus: &#123; // 指令的定义 inserted: function (el) &#123; el.focus() // 页面加载完成之后自动让输入框获取到焦点的小功能 &#125; &#125;&#125; 然后你可以在模板中任何元素上使用新的 v-focus property，如下： 1&lt;input v-focus /&gt; 自定义指令也像组件那样存在钩子函数： bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置 inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中) update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用 unbind：只调用一次，指令与元素解绑时调用 所有的钩子函数的参数都有以下： el：指令所绑定的元素，可以用来直接操作 DOM binding：一个对象，包含以下 property： name：指令名，不包括 v- 前缀。 value：指令的绑定值，例如：v-my-directive=&quot;1 + 1&quot; 中，绑定值为 2。 oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。 expression：字符串形式的指令表达式。例如 v-my-directive=&quot;1 + 1&quot; 中，表达式为 &quot;1 + 1&quot;。 arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 &quot;foo&quot;。 modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 &#123; foo: true, bar: true &#125; vnode：Vue 编译生成的虚拟节点 oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用 除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行 举个例子： 1234567&lt;div v-demo=&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;&gt;&lt;/div&gt;&lt;script&gt; Vue.directive(&#x27;demo&#x27;, function (el, binding) &#123; console.log(binding.value.color) // &quot;white&quot; console.log(binding.value.text) // &quot;hello!&quot; &#125;)&lt;/script&gt; 三、应用场景使用自定义组件组件可以满足我们日常一些场景，这里给出几个自定义组件的案例： 防抖 图片懒加载 一键 Copy的功能 输入框防抖防抖这种情况设置一个v-throttle自定义指令来实现 举个例子： 123456789101112131415161718192021// 1.设置v-throttle自定义指令Vue.directive(&#x27;throttle&#x27;, &#123; bind: (el, binding) =&gt; &#123; let throttleTime = binding.value; // 防抖时间 if (!throttleTime) &#123; // 用户若不设置防抖时间，则默认2s throttleTime = 2000; &#125; let cbFun; el.addEventListener(&#x27;click&#x27;, event =&gt; &#123; if (!cbFun) &#123; // 第一次执行 cbFun = setTimeout(() =&gt; &#123; cbFun = null; &#125;, throttleTime); &#125; else &#123; event &amp;&amp; event.stopImmediatePropagation(); &#125; &#125;, true); &#125;,&#125;);// 2.为button标签设置v-throttle自定义指令&lt;button @click=&quot;sayHello&quot; v-throttle&gt;提交&lt;/button&gt; 图片懒加载设置一个v-lazy自定义组件完成图片懒加载 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788const LazyLoad = &#123; // install方法 install(Vue,options)&#123; // 代替图片的loading图 let defaultSrc = options.default; Vue.directive(&#x27;lazy&#x27;,&#123; bind(el,binding)&#123; LazyLoad.init(el,binding.value,defaultSrc); &#125;, inserted(el)&#123; // 兼容处理 if(&#x27;IntersectionObserver&#x27; in window)&#123; LazyLoad.observe(el); &#125;else&#123; LazyLoad.listenerScroll(el); &#125; &#125;, &#125;) &#125;, // 初始化 init(el,val,def)&#123; // data-src 储存真实src el.setAttribute(&#x27;data-src&#x27;,val); // 设置src为loading图 el.setAttribute(&#x27;src&#x27;,def); &#125;, // 利用IntersectionObserver监听el observe(el)&#123; let io = new IntersectionObserver(entries =&gt; &#123; let realSrc = el.dataset.src; if(entries[0].isIntersecting)&#123; if(realSrc)&#123; el.src = realSrc; el.removeAttribute(&#x27;data-src&#x27;); &#125; &#125; &#125;); io.observe(el); &#125;, // 监听scroll事件 listenerScroll(el)&#123; let handler = LazyLoad.throttle(LazyLoad.load,300); LazyLoad.load(el); window.addEventListener(&#x27;scroll&#x27;,() =&gt; &#123; handler(el); &#125;); &#125;, // 加载真实图片 load(el)&#123; let windowHeight = document.documentElement.clientHeight let elTop = el.getBoundingClientRect().top; let elBtm = el.getBoundingClientRect().bottom; let realSrc = el.dataset.src; if(elTop - windowHeight&lt;0&amp;&amp;elBtm &gt; 0)&#123; if(realSrc)&#123; el.src = realSrc; el.removeAttribute(&#x27;data-src&#x27;); &#125; &#125; &#125;, // 节流 throttle(fn,delay)&#123; let timer; let prevTime; return function(...args)&#123; let currTime = Date.now(); let context = this; if(!prevTime) prevTime = currTime; clearTimeout(timer); if(currTime - prevTime &gt; delay)&#123; prevTime = currTime; fn.apply(context,args); clearTimeout(timer); return; &#125; timer = setTimeout(function()&#123; prevTime = Date.now(); timer = null; fn.apply(context,args); &#125;,delay); &#125; &#125;&#125;export default LazyLoad; 一键 Copy的功能12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import &#123; Message &#125; from &#x27;ant-design-vue&#x27;;const vCopy = &#123; // /* bind 钩子函数，第一次绑定时调用，可以在这里做初始化设置 el: 作用的 dom 对象 value: 传给指令的值，也就是我们要 copy 的值 */ bind(el, &#123; value &#125;) &#123; el.$value = value; // 用一个全局属性来存传进来的值，因为这个值在别的钩子函数里还会用到 el.handler = () =&gt; &#123; if (!el.$value) &#123; // 值为空的时候，给出提示，我这里的提示是用的 ant-design-vue 的提示，你们随意 Message.warning(&#x27;无复制内容&#x27;); return; &#125; // 动态创建 textarea 标签 const textarea = document.createElement(&#x27;textarea&#x27;); // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域 textarea.readOnly = &#x27;readonly&#x27;; textarea.style.position = &#x27;absolute&#x27;; textarea.style.left = &#x27;-9999px&#x27;; // 将要 copy 的值赋给 textarea 标签的 value 属性 textarea.value = el.$value; // 将 textarea 插入到 body 中 document.body.appendChild(textarea); // 选中值并复制 textarea.select(); // textarea.setSelectionRange(0, textarea.value.length); const result = document.execCommand(&#x27;Copy&#x27;); if (result) &#123; Message.success(&#x27;复制成功&#x27;); &#125; document.body.removeChild(textarea); &#125;; // 绑定点击事件，就是所谓的一键 copy 啦 el.addEventListener(&#x27;click&#x27;, el.handler); &#125;, // 当传进来的值更新的时候触发 componentUpdated(el, &#123; value &#125;) &#123; el.$value = value; &#125;, // 指令与元素解绑的时候，移除事件绑定 unbind(el) &#123; el.removeEventListener(&#x27;click&#x27;, el.handler); &#125;,&#125;;export default vCopy; 关于自定义组件还有很多应用场景，如：拖拽指令、页面水印、权限校验等等应用场景","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"vue项目如何部署？有遇到布署服务器后刷新404问题吗？","slug":"vue.vue项目如何部署？有遇到布署服务器后刷新404问题吗？","date":"2022-07-26T02:22:43.211Z","updated":"2022-08-05T02:35:31.658Z","comments":true,"path":"2022/07/26/vue.vue项目如何部署？有遇到布署服务器后刷新404问题吗？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.vue%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%EF%BC%9F%E6%9C%89%E9%81%87%E5%88%B0%E5%B8%83%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%88%B7%E6%96%B0404%E9%97%AE%E9%A2%98%E5%90%97%EF%BC%9F/","excerpt":"","text":"vue项目如何部署？有遇到布署服务器后刷新404问题吗？ 一、如何部署前后端分离开发模式下，前后端是独立布署的，前端只需要将最后的构建物上传至目标服务器的web容器指定的静态目录下即可 我们知道vue项目在构建后，是生成一系列的静态文件 常规布署我们只需要将这个目录上传至目标服务器即可 12// scp 上传 user为主机登录用户，host为主机外网ip, xx为web容器静态资源路径scp dist.zip user@host:/xx/xx/xx 让web容器跑起来，以nginx为例 12345678server &#123; listen 80; server_name www.xxx.com; location / &#123; index /data/dist/index.html; &#125;&#125; 配置完成记得重启nginx 12345// 检查配置是否正确nginx -t // 平滑重启nginx -s reload 操作完后就可以在浏览器输入域名进行访问了 当然上面只是提到最简单也是最直接的一种布署方式 什么自动化，镜像，容器，流水线布署，本质也是将这套逻辑抽象，隔离，用程序来代替重复性的劳动，本文不展开 二、404问题这是一个经典的问题，相信很多同学都有遇到过，那么你知道其真正的原因吗？ 我们先还原一下场景： vue项目在本地时运行正常，但部署到服务器中，刷新页面，出现了404错误 先定位一下，HTTP 404 错误意味着链接指向的资源不存在 问题在于为什么不存在？且为什么只有history模式下会出现这个问题？ 为什么history模式下有问题Vue是属于单页应用（single-page application） 而SPA是一种网络应用程序或网站的模型，所有用户交互是通过动态重写当前页面，前面我们也看到了，不管我们应用有多少页面，构建物都只会产出一个index.html 现在，我们回头来看一下我们的nginx配置 12345678server &#123; listen 80; server_name www.xxx.com; location / &#123; index /data/dist/index.html; &#125;&#125; 可以根据 nginx 配置得出，当我们在地址栏输入 www.xxx.com 时，这时会打开我们 dist 目录下的 index.html 文件，然后我们在跳转路由进入到 www.xxx.com/login 关键在这里，当我们在 website.com/login 页执行刷新操作，nginx location 是没有相关配置的，所以就会出现 404 的情况 为什么hash模式下没有问题router hash 模式我们都知道是用符号#表示的，如 website.com/#/login, hash 的值为 #/login 它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对服务端完全没有影响，因此改变 hash 不会重新加载页面 hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 website.com/#/login 只有 website.com 会被包含在请求中 ，因此对于服务端来说，即使没有配置location，也不会返回404错误 解决方案看到这里我相信大部分同学都能想到怎么解决问题了， 产生问题的本质是因为我们的路由是通过JS来执行视图切换的， 当我们进入到子路由时刷新页面，web容器没有相对应的页面此时会出现404 所以我们只需要配置将任意页面都重定向到 index.html，把路由交由前端处理 对nginx配置文件.conf修改，添加try_files $uri $uri/ /index.html; 123456789server &#123; listen 80; server_name www.xxx.com; location / &#123; index /data/dist/index.html; try_files $uri $uri/ /index.html; &#125;&#125; 修改完配置文件后记得配置的更新 1nginx -s reload 这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件 为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面 123456const router = new VueRouter(&#123; mode: &#x27;history&#x27;, routes: [ &#123; path: &#x27;*&#x27;, component: NotFoundComponent &#125; ]&#125;) 关于后端配置方案还有：Apache、nodejs等，思想是一致的，这里就不展开述说了","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"跨域是什么？Vue项目中你是如何解决跨域的呢？","slug":"vue.跨域是什么？Vue项目中你是如何解决跨域的呢？","date":"2022-07-26T02:22:43.210Z","updated":"2022-08-05T02:32:40.439Z","comments":true,"path":"2022/07/26/vue.跨域是什么？Vue项目中你是如何解决跨域的呢？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%B7%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9FVue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%A0%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%91%A2%EF%BC%9F/","excerpt":"","text":"跨域是什么？Vue项目中你是如何解决跨域的呢？ 一、跨域是什么跨域本质是浏览器基于同源策略的一种安全手段 同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能 所谓同源（即指在同一个域）具有以下三个相同点 协议相同（protocol） 主机相同（host） 端口相同（port） 反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域 一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。 二、如何解决解决跨域的方法有很多，下面列举了三种： JSONP CORS Proxy 而在vue项目中，我们主要针对CORS或Proxy这两种方案进行展开 CORSCORS （Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应 CORS 实现起来非常方便，只需要增加一些 HTTP 头，让服务器能声明允许的访问来源 只要后端实现了 CORS，就实现了跨域 以koa框架举例 添加中间件，直接设置Access-Control-Allow-Origin请求头 12345678910app.use(async (ctx, next)=&gt; &#123; ctx.set(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;); ctx.set(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;); ctx.set(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;); if (ctx.method == &#x27;OPTIONS&#x27;) &#123; ctx.body = 200; &#125; else &#123; await next(); &#125;&#125;) ps: Access-Control-Allow-Origin 设置为*其实意义不大，可以说是形同虚设，实际应用中，上线前我们会将Access-Control-Allow-Origin 值设为我们目标host Proxy代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击 方案一 如果是通过vue-cli脚手架工具搭建项目，我们可以通过webpack为我们起一个本地服务器作为请求的代理对象 通过该服务器转发请求至目标服务器，得到结果再转发给前端，但是最终发布上线时如果web应用和接口服务器不在一起仍会跨域 在vue.config.js文件，新增以下代码 12345678910111213141516amodule.exports = &#123; devServer: &#123; host: &#x27;127.0.0.1&#x27;, port: 8084, open: true,// vue项目启动时自动打开浏览器 proxy: &#123; &#x27;/api&#x27;: &#123; // &#x27;/api&#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的 target: &quot;http://xxx.xxx.xx.xx:8080&quot;, //目标地址，一般是指后台服务器地址 changeOrigin: true, //是否跨域 pathRewrite: &#123; // pathRewrite 的作用是把实际Request Url中的&#x27;/api&#x27;用&quot;&quot;代替 &#x27;^/api&#x27;: &quot;&quot; &#125; &#125; &#125; &#125;&#125; 通过axios发送请求中，配置请求的根路径 1axios.defaults.baseURL = &#x27;/api&#x27; 方案二 此外，还可通过服务端实现代理请求转发 以express框架为例 1234567var express = require(&#x27;express&#x27;);const proxy = require(&#x27;http-proxy-middleware&#x27;)const app = express()app.use(express.static(__dirname + &#x27;/&#x27;))app.use(&#x27;/api&#x27;, proxy(&#123; target: &#x27;http://localhost:4000&#x27;, changeOrigin: false &#125;));module.exports = app 方案三 通过配置nginx实现代理 12345678910111213141516server &#123; listen 80; # server_name xxx.xxx.com; location / &#123; root /var/www/html; index index.html index.htm; try_files $uri $uri/ /index.html; &#125; location /api &#123; proxy_pass http://127.0.0.1:3000; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue3.0的设计目标是什么？做了哪些优化?","slug":"vue.Vue3.0的设计目标是什么？做了哪些优化_","date":"2022-07-26T02:22:43.209Z","updated":"2022-08-05T02:35:04.964Z","comments":true,"path":"2022/07/26/vue.Vue3.0的设计目标是什么？做了哪些优化_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue3.0%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9B%AE%E6%A0%87%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8C%96_/","excerpt":"","text":"Vue3.0的设计目标是什么？做了哪些优化? 一、设计目标不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下Vue3之前我们或许会面临的问题 随着功能的增长，复杂组件的代码变得越来越难以维护 缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制 类型推断不够友好 bundle的时间太久了 而 Vue3 经过长达两三年时间的筹备，做了哪些事情？ 我们从结果反推 更小 更快 TypeScript支持 API设计一致性 提高自身可维护性 开放更多底层功能 一句话概述，就是更小更快更友好了 更小Vue3移除一些不常用的 API 引入tree-shaking，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了 更快主要体现在编译方面： diff算法优化 静态提升 事件监听缓存 SSR优化 下篇文章我们会进一步介绍 更友好vue3在兼顾vue2的options API的同时还推出了composition API，大大增加了代码的逻辑组织和代码复用能力 这里代码简单演示下： 存在一个获取鼠标位置的函数 12345678910111213141516import &#123; toRefs, reactive &#125; from &#x27;vue&#x27;;function useMouse()&#123; const state = reactive(&#123;x:0,y:0&#125;); const update = e=&gt;&#123; state.x = e.pageX; state.y = e.pageY; &#125; onMounted(()=&gt;&#123; window.addEventListener(&#x27;mousemove&#x27;,update); &#125;) onUnmounted(()=&gt;&#123; window.removeEventListener(&#x27;mousemove&#x27;,update); &#125;) return toRefs(state);&#125; 我们只需要调用这个函数，即可获取x、y的坐标，完全不用关注实现过程 试想一下，如果很多类似的第三方库，我们只需要调用即可，不必关注实现过程，开发效率大大提高 同时，VUE3是基于typescipt编写的，可以享受到自动的类型定义提示 三、优化方案vue3从很多层面都做了优化，可以分成三个方面： 源码 性能 语法 API 源码源码可以从两个层面展开： 源码管理 TypeScript 源码管理vue3整个源码是通过 monorepo的方式维护的，根据功能将不同的模块拆分到packages目录下面不同的子目录中 这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性 另外一些 package（比如 reactivity 响应式库）是可以独立于 Vue 使用的，这样用户如果只想使用 Vue3的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 Vue TypeScriptVue3是基于typeScript编写的，提供了更好的类型检查，能支持复杂的类型推导 性能vue3是从什么哪些方面对性能进行进一步优化呢？ 体积优化 编译优化 数据劫持优化 这里讲述数据劫持： 在vue2中，数据劫持是通过Object.defineProperty，这个 API 有一些缺陷，并不能检测对象属性的添加和删除 12345678Object.defineProperty(data, &#x27;a&#x27;,&#123; get()&#123; // track &#125;, set()&#123; // trigger &#125;&#125;) 尽管Vue为了解决这个问题提供了 set和delete实例方法，但是对于用户来说，还是增加了一定的心智负担 同时在面对嵌套层级比较深的情况下，就存在性能问题 1234567891011default &#123; data: &#123; a: &#123; b: &#123; c: &#123; d: 1 &#125; &#125; &#125; &#125;&#125; 相比之下，vue3是通过proxy监听整个对象，那么对于删除还是监听当然也能监听到 同时Proxy 并不能监听到内部深层次的对象变化，而 Vue3 的处理方式是在getter 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归 语法 API这里当然说的就是composition API，其两大显著的优化： 优化逻辑组织 优化逻辑复用 逻辑组织一张图，我们可以很直观地感受到 Composition API在逻辑组织方面的优势 相同功能的代码编写在一块，而不像options API那样，各个功能的代码混成一块 逻辑复用在vue2中，我们是通过mixin实现功能混合，如果多个mixin混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰 而通过composition这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可 同样是上文的获取鼠标位置的例子 12345678910111213141516import &#123; toRefs, reactive, onUnmounted, onMounted &#125; from &#x27;vue&#x27;;function useMouse()&#123; const state = reactive(&#123;x:0,y:0&#125;); const update = e=&gt;&#123; state.x = e.pageX; state.y = e.pageY; &#125; onMounted(()=&gt;&#123; window.addEventListener(&#x27;mousemove&#x27;,update); &#125;) onUnmounted(()=&gt;&#123; window.removeEventListener(&#x27;mousemove&#x27;,update); &#125;) return toRefs(state);&#125; 组件使用 1234567import useMousePosition from &#x27;./mouse&#x27;export default &#123; setup() &#123; const &#123; x, y &#125; = useMousePosition() return &#123; x, y &#125; &#125;&#125; 可以看到，整个数据来源清晰了，即使去编写更多的hook函数，也不会出现命名冲突的问题","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue中组件和插件有什么区别？","slug":"vue.Vue中组件和插件有什么区别？","date":"2022-07-26T02:22:43.208Z","updated":"2022-08-05T02:36:18.302Z","comments":true,"path":"2022/07/26/vue.Vue中组件和插件有什么区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8F%92%E4%BB%B6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"Vue中组件和插件有什么区别？ 一、组件是什么回顾一下对组件的定义： 组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件 组件的优势 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级 二、插件是什么插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种： 添加全局方法或者属性。如: vue-custom-element 添加全局资源：指令/过滤器/过渡等。如 vue-touch 通过全局混入来添加一些组件选项。如vue-router 添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。 一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如vue-router 三、两者的区别两者的区别主要表现在以下几个方面： 编写形式 注册形式 使用场景 编写形式编写组件编写一个组件，可以有很多方式，我们最常见的就是vue单文件的这种格式，每一个.vue文件我们都可以看成是一个组件 vue文件标准格式 123456789&lt;template&gt;&lt;/template&gt;&lt;script&gt;export default&#123; ...&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 我们还可以通过template属性来编写一个组件，如果组件内容多，我们可以在外部定义template组件内容，如果组件内容并不多，我们可直接写在template属性上 12345678&lt;template id=&quot;testComponent&quot;&gt; // 组件显示的内容 &lt;div&gt;component!&lt;/div&gt; &lt;/template&gt;Vue.component(&#x27;componentA&#x27;,&#123; template: &#x27;#testComponent&#x27; template: `&lt;div&gt;component&lt;/div&gt;` // 组件内容少可以通过这种形式&#125;) 编写插件vue插件的实现应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象 123456789101112131415161718192021222324252627MyPlugin.install = function (Vue, options) &#123; // 1. 添加全局方法或 property Vue.myGlobalMethod = function () &#123; // 逻辑... &#125; // 2. 添加全局资源 Vue.directive(&#x27;my-directive&#x27;, &#123; bind (el, binding, vnode, oldVnode) &#123; // 逻辑... &#125; ... &#125;) // 3. 注入组件选项 Vue.mixin(&#123; created: function () &#123; // 逻辑... &#125; ... &#125;) // 4. 添加实例方法 Vue.prototype.$myMethod = function (methodOptions) &#123; // 逻辑... &#125;&#125; 注册形式组件注册vue组件注册主要分为全局注册与局部注册 全局注册通过Vue.component方法，第一个参数为组件的名称，第二个参数为传入的配置项 1Vue.component(&#x27;my-component-name&#x27;, &#123; /* ... */ &#125;) 局部注册只需在用到的地方通过components属性注册一个组件 1234567const component1 = &#123;...&#125; // 定义一个组件export default &#123; components:&#123; component1 // 局部注册 &#125;&#125; 插件注册插件的注册通过Vue.use()的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项 1Vue.use(插件名字,&#123; /* ... */&#125; ) 注意的是： 注册插件的时候，需要在调用 new Vue() 启动应用之前完成 Vue.use会自动阻止多次注册相同插件，只会注册一次 使用场景具体的其实在插件是什么章节已经表述了，这里在总结一下 组件 (Component) 是用来构成你的 App 的业务模块，它的目标是 App.vue 插件 (Plugin) 是用来增强你的技术栈的功能模块，它的目标是 Vue 本身 简单来说，插件就是指对Vue的功能的增强或补充","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对vue的mixin的理解，有哪些应用场景？","slug":"vue.说说你对vue的mixin的理解，有哪些应用场景？","date":"2022-07-26T02:22:43.207Z","updated":"2022-08-05T02:33:53.420Z","comments":true,"path":"2022/07/26/vue.说说你对vue的mixin的理解，有哪些应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9vue%E7%9A%84mixin%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对vue的mixin的理解，有哪些应用场景？ 一、mixin是什么Mixin是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问mixin类的方法而不必成为其子类 Mixin类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂 Vue中的mixin先来看一下官方定义 mixin（混入），提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。 本质其实就是一个js对象，它可以包含我们组件中任意功能选项，如data、components、methods、created、computed等等 我们只要将共用的功能以对象的方式传入 mixins选项中，当组件使用 mixins对象时所有mixins对象的选项都将被混入该组件本身的选项中来 在Vue中我们可以局部混入跟全局混入 局部混入定义一个mixin对象，有组件options的data、methods属性 12345678910var myMixin = &#123; created: function () &#123; this.hello() &#125;, methods: &#123; hello: function () &#123; console.log(&#x27;hello from mixin!&#x27;) &#125; &#125;&#125; 组件通过mixins属性调用mixin对象 123Vue.component(&#x27;componentA&#x27;,&#123; mixins: [myMixin]&#125;) 该组件在使用的时候，混合了mixin里面的方法，在自动执行create生命钩子，执行hello方法 全局混入通过Vue.mixin()进行全局的混入 12345Vue.mixin(&#123; created: function () &#123; console.log(&quot;全局混入&quot;) &#125;&#125;) 使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件） PS：全局混入常用于插件的编写 注意事项：当组件存在与mixin对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖mixin的选项 但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行mixin的钩子，再执行组件的钩子 二、使用场景在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立 这时，可以通过Vue的mixin功能将相同或者相似的代码提出来 举个例子 定义一个modal弹窗组件，内部通过isShowing来控制显示 12345678910111213const Modal = &#123; template: &#x27;#modal&#x27;, data() &#123; return &#123; isShowing: false &#125; &#125;, methods: &#123; toggleShow() &#123; this.isShowing = !this.isShowing; &#125; &#125;&#125; 定义一个tooltip提示框，内部通过isShowing来控制显示 12345678910111213const Tooltip = &#123; template: &#x27;#tooltip&#x27;, data() &#123; return &#123; isShowing: false &#125; &#125;, methods: &#123; toggleShow() &#123; this.isShowing = !this.isShowing; &#125; &#125;&#125; 通过观察上面两个组件，发现两者的逻辑是相同，代码控制显示也是相同的，这时候mixin就派上用场了 首先抽出共同代码，编写一个mixin 123456789101112const toggle = &#123; data() &#123; return &#123; isShowing: false &#125; &#125;, methods: &#123; toggleShow() &#123; this.isShowing = !this.isShowing; &#125; &#125;&#125; 两个组件在使用上，只需要引入mixin 123456789const Modal = &#123; template: &#x27;#modal&#x27;, mixins: [toggle]&#125;; const Tooltip = &#123; template: &#x27;#tooltip&#x27;, mixins: [toggle]&#125; 通过上面小小的例子，让我们知道了Mixin对于封装一些可复用的功能如此有趣、方便、实用 三、源码分析首先从Vue.mixin入手 源码位置：/src/core/global-api/mixin.js 123456export function initMixin (Vue: GlobalAPI) &#123; Vue.mixin = function (mixin: Object) &#123; this.options = mergeOptions(this.options, mixin) return this &#125;&#125; 主要是调用merOptions方法 源码位置：/src/core/util/options.js 12345678910111213141516171819202122232425262728export function mergeOptions ( parent: Object, child: Object, vm?: Component): Object &#123;if (child.mixins) &#123; // 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并 for (let i = 0, l = child.mixins.length; i &lt; l; i++) &#123; parent = mergeOptions(parent, child.mixins[i], vm) &#125;&#125; const options = &#123;&#125; let key for (key in parent) &#123; mergeField(key) // 先遍历parent的key 调对应的strats[XXX]方法进行合并 &#125; for (key in child) &#123; if (!hasOwn(parent, key)) &#123; // 如果parent已经处理过某个key 就不处理了 mergeField(key) // 处理child中的key 也就parent中没有处理过的key &#125; &#125; function mergeField (key) &#123; const strat = strats[key] || defaultStrat options[key] = strat(parent[key], child[key], vm, key) // 根据不同类型的options调用strats中不同的方法进行合并 &#125; return options&#125; 从上面的源码，我们得到以下几点： 优先递归处理 mixins 先遍历合并parent 中的key，调用mergeField方法进行合并，然后保存在变量options 再遍历 child，合并补上 parent 中没有的key，调用mergeField方法进行合并，保存在变量options 通过 mergeField 函数进行了合并 下面是关于Vue的几种类型的合并策略 替换型 合并型 队列型 叠加型 替换型替换型合并有props、methods、inject、computed 12345678910111213141516strats.props =strats.methods =strats.inject =strats.computed = function ( parentVal: ?Object, childVal: ?Object, vm?: Component, key: string): ?Object &#123; if (!parentVal) return childVal // 如果parentVal没有值，直接返回childVal const ret = Object.create(null) // 创建一个第三方对象 ret extend(ret, parentVal) // extend方法实际是把parentVal的属性复制到ret中 if (childVal) extend(ret, childVal) // 把childVal的属性复制到ret中 return ret&#125;strats.provide = mergeDataOrFn 同名的props、methods、inject、computed会被后来者代替 合并型和并型合并有：data 12345678910111213141516171819202122232425262728293031323334353637strats.data = function(parentVal, childVal, vm) &#123; return mergeDataOrFn( parentVal, childVal, vm )&#125;;function mergeDataOrFn(parentVal, childVal, vm) &#123; return function mergedInstanceDataFn() &#123; var childData = childVal.call(vm, vm) // 执行data挂的函数得到对象 var parentData = parentVal.call(vm, vm) if (childData) &#123; return mergeData(childData, parentData) // 将2个对象进行合并 &#125; else &#123; return parentData // 如果没有childData 直接返回parentData &#125; &#125;&#125;function mergeData(to, from) &#123; if (!from) return to var key, toVal, fromVal; var keys = Object.keys(from); for (var i = 0; i &lt; keys.length; i++) &#123; key = keys[i]; toVal = to[key]; fromVal = from[key]; // 如果不存在这个属性，就重新设置 if (!to.hasOwnProperty(key)) &#123; set(to, key, fromVal); &#125; // 存在相同属性，合并对象 else if (typeof toVal ==&quot;object&quot; &amp;&amp; typeof fromVal ==&quot;object&quot;) &#123; mergeData(toVal, fromVal); &#125; &#125; return to&#125; mergeData函数遍历了要合并的 data 的所有属性，然后根据不同情况进行合并： 当目标 data 对象不包含当前属性时，调用 set 方法进行合并（set方法其实就是一些合并重新赋值的方法） 当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性 队列型队列型合并有：全部生命周期和watch 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647function mergeHook ( parentVal: ?Array&lt;Function&gt;, childVal: ?Function | ?Array&lt;Function&gt;): ?Array&lt;Function&gt; &#123; return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal&#125;LIFECYCLE_HOOKS.forEach(hook =&gt; &#123; strats[hook] = mergeHook&#125;)// watchstrats.watch = function ( parentVal, childVal, vm, key) &#123; // work around Firefox&#x27;s Object.prototype.watch... if (parentVal === nativeWatch) &#123; parentVal = undefined; &#125; if (childVal === nativeWatch) &#123; childVal = undefined; &#125; /* istanbul ignore if */ if (!childVal) &#123; return Object.create(parentVal || null) &#125; &#123; assertObjectType(key, childVal, vm); &#125; if (!parentVal) &#123; return childVal &#125; var ret = &#123;&#125;; extend(ret, parentVal); for (var key$1 in childVal) &#123; var parent = ret[key$1]; var child = childVal[key$1]; if (parent &amp;&amp; !Array.isArray(parent)) &#123; parent = [parent]; &#125; ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child]; &#125; return ret&#125;; 生命周期钩子和watch被合并为一个数组，然后正序遍历一次执行 叠加型叠加型合并有：component、directives、filters 1234567891011121314strats.components=strats.directives=strats.filters = function mergeAssets( parentVal, childVal, vm, key) &#123; var res = Object.create(parentVal || null); if (childVal) &#123; for (var key in childVal) &#123; res[key] = childVal[key]; &#125; &#125; return res&#125; 叠加型主要是通过原型链进行层层的叠加 小结： 替换型策略有props、methods、inject、computed，就是将新的同名参数替代旧的参数 合并型策略是data, 通过set方法进行合并和重新赋值 队列型策略有生命周期函数和watch，原理是将函数存入一个数组，然后正序遍历依次执行 叠加型有component、directives、filters，通过原型链进行层层的叠加","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"SSR解决了什么问题？有做过SSR吗？你是怎么做的？","slug":"vue.SSR解决了什么问题？有做过SSR吗？你是怎么做的？","date":"2022-07-26T02:22:43.206Z","updated":"2022-08-05T02:34:48.939Z","comments":true,"path":"2022/07/26/vue.SSR解决了什么问题？有做过SSR吗？你是怎么做的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.SSR%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F%E6%9C%89%E5%81%9A%E8%BF%87SSR%E5%90%97%EF%BC%9F%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84%EF%BC%9F/","excerpt":"","text":"SSR解决了什么问题？有做过SSR吗？你是怎么做的？ 一、是什么Server-Side Rendering 我们称其为SSR，意为服务端渲染 指由服务侧完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程 先来看看Web3个阶段的发展史： 传统服务端渲染SSR 单页面应用SPA 服务端渲染SSR 传统web开发网页内容在服务端渲染完成，⼀次性传输到浏览器 img 打开页面查看源码，浏览器拿到的是全部的dom结构 单页应用SPA单页应用优秀的用户体验，使其逐渐成为主流，页面内容由JS渲染出来，这种方式称为客户端渲染 img 打开页面查看源码，浏览器拿到的仅有宿主元素#app，并没有内容 服务端渲染SSRSSR解决方案，后端渲染出完整的首屏的dom结构返回，前端拿到的内容包括首屏及完整spa结构，应用激活后依然按照spa方式运行 img 看完前端发展，我们再看看Vue官方对SSR的解释： Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序 服务器渲染的 Vue.js 应用程序也可以被认为是”同构”或”通用”，因为应用程序的大部分代码都可以在服务器和客户端上运行 我们从上门解释得到以下结论： Vue SSR是一个在SPA上进行改良的服务端渲染 通过Vue SSR渲染的页面，需要在客户端激活才能实现交互 Vue SSR将包含两部分：服务端渲染的首屏，包含交互的SPA 二、解决了什么SSR主要解决了以下两种问题： seo：搜索引擎优先爬取页面HTML结构，使用ssr时，服务端已经生成了和业务想关联的HTML，有利于seo 首屏呈现渲染：用户无需等待页面所有js加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端） 但是使用SSR同样存在以下的缺点： 复杂度：整个项目的复杂度 库的支持性，代码兼容 性能问题 每个请求都是n个实例的创建，不然会污染，消耗会变得很大 缓存 node serve、 nginx判断当前用户有没有过期，如果没过期的话就缓存，用刚刚的结果。 降级：监控cpu、内存占用过多，就spa，返回单个的壳 服务器负载变大，相对于前后端分离务器只需要提供静态资源来说，服务器负载更大，所以要慎重使用 所以在我们选择是否使用SSR前，我们需要慎重问问自己这些问题： 需要SEO的页面是否只是少数几个，这些是否可以使用预渲染（Prerender SPA Plugin）实现 首屏的请求响应逻辑是否复杂，数据返回是否大量且缓慢 三、如何实现对于同构开发，我们依然使用webpack打包，我们要解决两个问题：服务端首屏渲染和客户端激活 这里需要生成一个服务器bundle文件用于服务端首屏渲染和一个客户端bundle文件用于客户端激活 代码结构 除了两个不同入口之外，其他结构和之前vue应用完全相同 12345678src├── router├────── index.js # 路由声明├── store├────── index.js # 全局状态├── main.js # ⽤于创建vue实例├── entry-client.js # 客户端⼊⼝，⽤于静态内容“激活”└── entry-server.js # 服务端⼊⼝，⽤于⾸屏内容渲染 路由配置 12345678910111213141516import Vue from &quot;vue&quot;;import Router from &quot;vue-router&quot;;Vue.use(Router);//导出⼯⼚函数export function createRouter() &#123; return new Router(&#123; mode: &#x27;history&#x27;, routes: [ // 客户端没有编译器，这⾥要写成渲染函数 &#123; path: &quot;/&quot;, component: &#123; render: h =&gt; h(&#x27;div&#x27;, &#x27;index page&#x27;) &#125; &#125;, &#123; path: &quot;/detail&quot;, component: &#123; render: h =&gt; h(&#x27;div&#x27;, &#x27;detail page&#x27;) &#125; &#125; ] &#125;);&#125; 主文件main.js 跟之前不同，主文件是负责创建vue实例的工厂，每次请求均会有独立的vue实例创建 1234567891011121314import Vue from &quot;vue&quot;;import App from &quot;./App.vue&quot;;import &#123; createRouter &#125; from &quot;./router&quot;;// 导出Vue实例⼯⼚函数，为每次请求创建独⽴实例// 上下⽂⽤于给vue实例传递参数export function createApp(context) &#123; const router = createRouter(); const app = new Vue(&#123; router, context, render: h =&gt; h(App) &#125;); return &#123; app, router &#125;;&#125; 编写服务端入口src/entry-server.js 它的任务是创建Vue实例并根据传入url指定首屏 1234567891011121314import &#123; createApp &#125; from &quot;./main&quot;;// 返回⼀个函数，接收请求上下⽂，返回创建的vue实例export default context =&gt; &#123; // 这⾥返回⼀个Promise，确保路由或组件准备就绪 return new Promise((resolve, reject) =&gt; &#123; const &#123; app, router &#125; = createApp(context); // 跳转到⾸屏的地址 router.push(context.url); // 路由就绪，返回结果 router.onReady(() =&gt; &#123; resolve(app); &#125;, reject); &#125;);&#125;; 编写客户端入口entry-client.js 客户端入口只需创建vue实例并执行挂载，这⼀步称为激活 1234567import &#123; createApp &#125; from &quot;./main&quot;;// 创建vue、router实例const &#123; app, router &#125; = createApp();// 路由就绪，执⾏挂载router.onReady(() =&gt; &#123; app.$mount(&quot;#app&quot;);&#125;); 对webpack进行配置 安装依赖 1npm install webpack-node-externals lodash.merge -D 对vue.config.js进行配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// 两个插件分别负责打包客户端和服务端const VueSSRServerPlugin = require(&quot;vue-server-renderer/server-plugin&quot;);const VueSSRClientPlugin = require(&quot;vue-server-renderer/client-plugin&quot;);const nodeExternals = require(&quot;webpack-node-externals&quot;);const merge = require(&quot;lodash.merge&quot;);// 根据传⼊环境变量决定⼊⼝⽂件和相应配置项const TARGET_NODE = process.env.WEBPACK_TARGET === &quot;node&quot;;const target = TARGET_NODE ? &quot;server&quot; : &quot;client&quot;;module.exports = &#123; css: &#123; extract: false &#125;, outputDir: &#x27;./dist/&#x27;+target, configureWebpack: () =&gt; (&#123; // 将 entry 指向应⽤程序的 server / client ⽂件 entry: `./src/entry-$&#123;target&#125;.js`, // 对 bundle renderer 提供 source map ⽀持 devtool: &#x27;source-map&#x27;, // target设置为node使webpack以Node适⽤的⽅式处理动态导⼊， // 并且还会在编译Vue组件时告知`vue-loader`输出⾯向服务器代码。 target: TARGET_NODE ? &quot;node&quot; : &quot;web&quot;, // 是否模拟node全局变量 node: TARGET_NODE ? undefined : false, output: &#123; // 此处使⽤Node⻛格导出模块 libraryTarget: TARGET_NODE ? &quot;commonjs2&quot; : undefined &#125;, // https://webpack.js.org/configuration/externals/#function // https://github.com/liady/webpack-node-externals // 外置化应⽤程序依赖模块。可以使服务器构建速度更快，并⽣成较⼩的打包⽂件。 externals: TARGET_NODE ? nodeExternals(&#123; // 不要外置化webpack需要处理的依赖模块。 // 可以在这⾥添加更多的⽂件类型。例如，未处理 *.vue 原始⽂件， // 还应该将修改`global`（例如polyfill）的依赖模块列⼊⽩名单 whitelist: [/\\.css$/] &#125;) : undefined, optimization: &#123; splitChunks: undefined &#125;, // 这是将服务器的整个输出构建为单个 JSON ⽂件的插件。 // 服务端默认⽂件名为 `vue-ssr-server-bundle.json` // 客户端默认⽂件名为 `vue-ssr-client-manifest.json`。 plugins: [TARGET_NODE ? new VueSSRServerPlugin() : new VueSSRClientPlugin()] &#125;), chainWebpack: config =&gt; &#123; // cli4项⽬添加 if (TARGET_NODE) &#123; config.optimization.delete(&#x27;splitChunks&#x27;) &#125; config.module .rule(&quot;vue&quot;) .use(&quot;vue-loader&quot;) .tap(options =&gt; &#123; merge(options, &#123; optimizeSSR: false &#125;); &#125;); &#125;&#125;; 对脚本进行配置，安装依赖 1npm i cross-env -D 定义创建脚本package.json 12345&quot;scripts&quot;: &#123; &quot;build:client&quot;: &quot;vue-cli-service build&quot;, &quot;build:server&quot;: &quot;cross-env WEBPACK_TARGET=node vue-cli-service build&quot;, &quot;build&quot;: &quot;npm run build:server &amp;&amp; npm run build:client&quot;&#125; 执行打包：npm run build 最后修改宿主文件/public/index.html 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--vue-ssr-outlet--&gt; &lt;/body&gt;&lt;/html&gt; 是服务端渲染入口位置，注意不能为了好看而在前后加空格 安装vuex 1npm install -S vuex 创建vuex工厂函数 123456789101112131415import Vue from &#x27;vue&#x27;import Vuex from &#x27;vuex&#x27;Vue.use(Vuex)export function createStore () &#123; return new Vuex.Store(&#123; state: &#123; count:108 &#125;, mutations: &#123; add(state)&#123; state.count += 1; &#125; &#125; &#125;)&#125; 在main.js文件中挂载store 12345678910import &#123; createStore &#125; from &#x27;./store&#x27;export function createApp (context) &#123; // 创建实例 const store = createStore() const app = new Vue(&#123; store, // 挂载 render: h =&gt; h(App) &#125;) return &#123; app, router, store &#125;&#125; 服务器端渲染的是应用程序的”快照”，如果应用依赖于⼀些异步数据，那么在开始渲染之前，需要先预取和解析好这些数据 在store进行一步数据获取 123456789101112131415161718192021export function createStore() &#123; return new Vuex.Store(&#123; mutations: &#123; // 加⼀个初始化 init(state, count) &#123; state.count = count; &#125;, &#125;, actions: &#123; // 加⼀个异步请求count的action getCount(&#123; commit &#125;) &#123; return new Promise(resolve =&gt; &#123; setTimeout(() =&gt; &#123; commit(&quot;init&quot;, Math.random() * 100); resolve(); &#125;, 1000); &#125;); &#125;, &#125;, &#125;);&#125; 组件中的数据预取逻辑 123456export default &#123; asyncData(&#123; store, route &#125;) &#123; // 约定预取逻辑编写在预取钩⼦asyncData中 // 触发 action 后，返回 Promise 以便确定请求结果 return store.dispatch(&quot;getCount&quot;); &#125;&#125;; 服务端数据预取，entry-server.js 123456789101112131415161718192021222324252627282930313233343536373839import &#123; createApp &#125; from &quot;./app&quot;;export default context =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; // 拿出store和router实例 const &#123; app, router, store &#125; = createApp(context); router.push(context.url); router.onReady(() =&gt; &#123; // 获取匹配的路由组件数组 const matchedComponents = router.getMatchedComponents(); // 若⽆匹配则抛出异常 if (!matchedComponents.length) &#123; return reject(&#123; code: 404 &#125;); &#125; // 对所有匹配的路由组件调⽤可能存在的`asyncData()` Promise.all( matchedComponents.map(Component =&gt; &#123; if (Component.asyncData) &#123; return Component.asyncData(&#123; store, route: router.currentRoute, &#125;); &#125; &#125;), ) .then(() =&gt; &#123; // 所有预取钩⼦ resolve 后， // store 已经填充⼊渲染应⽤所需状态 // 将状态附加到上下⽂，且 `template` 选项⽤于 renderer 时， // 状态将⾃动序列化为 `window.__INITIAL_STATE__`，并注⼊ HTML context.state = store.state; resolve(app); &#125;) .catch(reject); &#125;, reject); &#125;);&#125;; 客户端在挂载到应用程序之前，store 就应该获取到状态，entry-client.js 1234567// 导出storeconst &#123; app, router, store &#125; = createApp();// 当使⽤ template 时，context.state 将作为 window.__INITIAL_STATE__ 状态⾃动嵌⼊到最终的 HTML // 在客户端挂载到应⽤程序之前，store 就应该获取到状态：if (window.__INITIAL_STATE__) &#123; store.replaceState(window.__INITIAL_STATE__);&#125; 客户端数据预取处理，main.js 1234567891011121314Vue.mixin(&#123; beforeMount() &#123; const &#123; asyncData &#125; = this.$options; if (asyncData) &#123; // 将获取数据操作分配给 promise // 以便在组件中，我们可以在数据准备就绪后 // 通过运⾏ `this.dataPromise.then(...)` 来执⾏其他任务 this.dataPromise = asyncData(&#123; store: this.$store, route: this.$route, &#125;); &#125; &#125;,&#125;); 修改服务器启动文件 1234567891011121314151617181920212223// 获取⽂件路径const resolve = dir =&gt; require(&#x27;path&#x27;).resolve(__dirname, dir)// 第 1 步：开放dist/client⽬录，关闭默认下载index⻚的选项，不然到不了后⾯路由app.use(express.static(resolve(&#x27;../dist/client&#x27;), &#123;index: false&#125;))// 第 2 步：获得⼀个createBundleRendererconst &#123; createBundleRenderer &#125; = require(&quot;vue-server-renderer&quot;);// 第 3 步：服务端打包⽂件地址const bundle = resolve(&quot;../dist/server/vue-ssr-server-bundle.json&quot;);// 第 4 步：创建渲染器const renderer = createBundleRenderer(bundle, &#123; runInNewContext: false, // https://ssr.vuejs.org/zh/api/#runinnewcontext template: require(&#x27;fs&#x27;).readFileSync(resolve(&quot;../public/index.html&quot;), &quot;utf8&quot;), // 宿主⽂件 clientManifest: require(resolve(&quot;../dist/client/vue-ssr-clientmanifest.json&quot;)) // 客户端清单&#125;);app.get(&#x27;*&#x27;, async (req,res)=&gt;&#123; // 设置url和title两个重要参数 const context = &#123; title:&#x27;ssr test&#x27;, url:req.url &#125; const html = await renderer.renderToString(context); res.send(html)&#125;) 小结 使用ssr不存在单例模式，每次用户请求都会创建一个新的vue实例 实现ssr需要实现服务端首屏渲染和客户端激活 服务端异步获取数据asyncData可以分为首屏异步获取和切换组件获取 首屏异步获取数据，在服务端预渲染的时候就应该已经完成 切换组件通过mixin混入，在beforeMount钩子完成数据获取","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue常用的修饰符有哪些?有什么应用场景?","slug":"vue.常用的修饰符有哪些有什么应用场景","date":"2022-07-26T02:22:43.206Z","updated":"2022-08-05T02:28:36.415Z","comments":true,"path":"2022/07/26/vue.常用的修饰符有哪些有什么应用场景/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9C%89%E4%BB%80%E4%B9%88%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","excerpt":"","text":"Vue常用的修饰符有哪些?有什么应用场景? 一、修饰符是什么在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号 在Vue中，修饰符处理了许多DOM事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理 vue中修饰符分为以下五种： 表单修饰符 事件修饰符 鼠标按键修饰符 键值修饰符 v-bind修饰符 二、修饰符的作用表单修饰符在我们填写表单的时候用得最多的是input标签，指令用得最多的是v-model 关于表单的修饰符有如下： lazy trim number lazy在我们填完信息，光标离开标签的时候，才会将值赋予给value，也就是在change事件之后再进行信息同步 12&lt;input type=&quot;text&quot; v-model.lazy=&quot;value&quot;&gt;&lt;p&gt;&#123;&#123;value&#125;&#125;&lt;/p&gt; trim自动过滤用户输入的首空格字符，而中间的空格不会过滤 1&lt;input type=&quot;text&quot; v-model.trim=&quot;value&quot;&gt; number自动将用户的输入值转为数值类型，但如果这个值无法被parseFloat解析，则会返回原来的值 1&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt; 事件修饰符事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符： stop prevent self once capture passive native stop阻止了事件冒泡，相当于调用了event.stopPropagation方法 1234&lt;div @click=&quot;shout(2)&quot;&gt; &lt;button @click.stop=&quot;shout(1)&quot;&gt;ok&lt;/button&gt;&lt;/div&gt;//只输出1 prevent阻止了事件的默认行为，相当于调用了event.preventDefault方法 1&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt; self只当在 event.target 是当前元素自身时触发处理函数 1&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt; 使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击 once绑定了事件以后只能触发一次，第二次就不会触发 1&lt;button @click.once=&quot;shout(1)&quot;&gt;ok&lt;/button&gt; capture使事件触发从包含这个元素的顶层开始往下触发 12345678910111213&lt;div @click.capture=&quot;shout(1)&quot;&gt; obj1&lt;div @click.capture=&quot;shout(2)&quot;&gt; obj2&lt;div @click=&quot;shout(3)&quot;&gt; obj3&lt;div @click=&quot;shout(4)&quot;&gt; obj4&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;// 输出结构: 1 2 4 3 passive在移动端，当我们在监听元素滚动事件的时候，会一直触发onscroll事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符 1234&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;&lt;!-- 而不会等待 `onScroll` 完成 --&gt;&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt; 不要把 .passive 和 .prevent 一起使用,因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。 passive 会告诉浏览器你不想阻止事件的默认行为 native让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件 1&lt;my-component v-on:click.native=&quot;doSomething&quot;&gt;&lt;/my-component&gt; 使用.native修饰符来操作普通HTML标签是会令事件失效的 鼠标按钮修饰符鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下： left 左键点击 right 右键点击 middle 中键点击 123&lt;button @click.left=&quot;shout(1)&quot;&gt;ok&lt;/button&gt;&lt;button @click.right=&quot;shout(1)&quot;&gt;ok&lt;/button&gt;&lt;button @click.middle=&quot;shout(1)&quot;&gt;ok&lt;/button&gt; 键盘修饰符键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下： keyCode存在很多，但vue为我们提供了别名，分为以下两种： 普通键（enter、tab、delete、space、esc、up…） 系统修饰键（ctrl、alt、meta、shift…） 12// 只有按键为keyCode的时候才触发&lt;input type=&quot;text&quot; @keyup.keyCode=&quot;shout()&quot;&gt; 还可以通过以下方式自定义一些全局的键盘码别名 1Vue.config.keyCodes.f2 = 113 v-bind修饰符v-bind修饰符主要是为属性进行操作，用来分别有如下： async prop camel async能对props进行一个双向绑定 1234//父组件&lt;comp :myMessage.sync=&quot;bar&quot;&gt;&lt;/comp&gt; //子组件this.$emit(&#x27;update:myMessage&#x27;,params); 以上这种方法相当于以下的简写 123456789//父亲组件&lt;comp :myMessage=&quot;bar&quot; @update:myMessage=&quot;func&quot;&gt;&lt;/comp&gt;func(e)&#123; this.bar = e;&#125;//子组件jsfunc2()&#123; this.$emit(&#x27;update:myMessage&#x27;,params);&#125; 使用async需要注意以下两点： 使用sync的时候，子组件传递的事件名格式必须为update:value，其中value必须与子组件中props中声明的名称完全一致 注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”&#123; title: doc.title &#125;”，是无法正常工作的 props设置自定义标签属性，避免暴露数据，防止污染HTML结构 1&lt;input id=&quot;uid&quot; title=&quot;title1&quot; value=&quot;1&quot; :index.prop=&quot;index&quot;&gt; camel将命名变为驼峰命名法，如将view-Box属性名转换为 viewBox 1&lt;svg :viewBox=&quot;viewBox&quot;&gt;&lt;/svg&gt; 三、应用场景根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景： .stop：阻止事件冒泡 .native：绑定原生事件 .once：事件只执行一次 .self ：将事件绑定在自身身上，相当于阻止事件冒泡 .prevent：阻止默认事件 .caption：用于事件捕获 .once：只触发一次 .keyCode：监听特定键盘按下 .right：右键","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？","slug":"vue.用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？","date":"2022-07-26T02:22:43.205Z","updated":"2022-08-05T02:34:38.333Z","comments":true,"path":"2022/07/26/vue.用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E7%94%A8Vue3.0%20%E5%86%99%E8%BF%87%E7%BB%84%E4%BB%B6%E5%90%97%EF%BC%9F%E5%A6%82%E6%9E%9C%E6%83%B3%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20Modal%E4%BD%A0%E4%BC%9A%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F/","excerpt":"","text":"用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？ 一、组件设计组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式 现在有一个场景，点击新增与编辑都弹框出来进行填写，功能上大同小异，可能只是标题内容或者是显示的主体内容稍微不同 这时候就没必要写两个组件，只需要根据传入的参数不同，组件显示不同内容即可 这样，下次开发相同界面程序时就可以写更少的代码，意味着更高的开发效率，更少的 Bug和更少的程序体积 二、需求分析实现一个Modal组件，首先确定需要完成的内容： 遮罩层 标题内容 主体内容 确定和取消按钮 主体内容需要灵活，所以可以是字符串，也可以是一段 html 代码 特点是它们在当前vue实例之外独立存在，通常挂载于body之上 除了通过引入import的形式，我们还可通过API的形式进行组件的调用 还可以包括配置全局样式、国际化、与typeScript结合 三、实现流程首先看看大致流程： 目录结构 组件内容 实现 API 形式 事件处理 其他完善 目录结构Modal组件相关的目录结构 12345678910111213├── plugins│ └── modal│ ├── Content.tsx // 维护 Modal 的内容，用于 h 函数和 jsx 语法│ ├── Modal.vue // 基础组件│ ├── config.ts // 全局默认配置│ ├── index.ts // 入口│ ├── locale // 国际化相关│ │ ├── index.ts│ │ └── lang│ │ ├── en-US.ts│ │ ├── zh-CN.ts│ │ └── zh-TW.ts│ └── modal.type.ts // ts类型声明相关 因为 Modal 会被 app.use(Modal) 调用作为一个插件，所以都放在plugins目录下 组件内容首先实现modal.vue的主体显示内容大致如下 1234567891011121314151617181920212223242526272829303132333435&lt;Teleport to=&quot;body&quot; :disabled=&quot;!isTeleport&quot;&gt; &lt;div v-if=&quot;modelValue&quot; class=&quot;modal&quot;&gt; &lt;div class=&quot;mask&quot; :style=&quot;style&quot; @click=&quot;maskClose &amp;&amp; !loading &amp;&amp; handleCancel()&quot; &gt;&lt;/div&gt; &lt;div class=&quot;modal__main&quot;&gt; &lt;div class=&quot;modal__title line line--b&quot;&gt; &lt;span&gt;&#123;&#123; title || t(&quot;r.title&quot;) &#125;&#125;&lt;/span&gt; &lt;span v-if=&quot;close&quot; :title=&quot;t(&#x27;r.close&#x27;)&quot; class=&quot;close&quot; @click=&quot;!loading &amp;&amp; handleCancel()&quot; &gt;✕&lt;/span &gt; &lt;/div&gt; &lt;div class=&quot;modal__content&quot;&gt; &lt;Content v-if=&quot;typeof content === &#x27;function&#x27;&quot; :render=&quot;content&quot; /&gt; &lt;slot v-else&gt; &#123;&#123; content &#125;&#125; &lt;/slot&gt; &lt;/div&gt; &lt;div class=&quot;modal__btns line line--t&quot;&gt; &lt;button :disabled=&quot;loading&quot; @click=&quot;handleConfirm&quot;&gt; &lt;span class=&quot;loading&quot; v-if=&quot;loading&quot;&gt; ❍ &lt;/span&gt;&#123;&#123; t(&quot;r.confirm&quot;) &#125;&#125; &lt;/button&gt; &lt;button @click=&quot;!loading &amp;&amp; handleCancel()&quot;&gt; &#123;&#123; t(&quot;r.cancel&quot;) &#125;&#125; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/Teleport&gt; 最外层上通过Vue3 Teleport 内置组件进行包裹，其相当于传送门，将里面的内容传送至body之上 并且从DOM结构上来看，把modal该有的内容（遮罩层、标题、内容、底部按钮）都实现了 关于主体内容 1234567&lt;div class=&quot;modal__content&quot;&gt; &lt;Content v-if=&quot;typeof content===&#x27;function&#x27;&quot; :render=&quot;content&quot; /&gt; &lt;slot v-else&gt; &#123;&#123;content&#125;&#125; &lt;/slot&gt;&lt;/div&gt; 可以看到根据传入content的类型不同，对应显示不同得到内容 最常见的则是通过调用字符串和默认插槽的形式 12345678910// 默认插槽&lt;Modal v-model=&quot;show&quot; title=&quot;演示 slot&quot;&gt; &lt;div&gt;hello world~&lt;/div&gt;&lt;/Modal&gt;// 字符串&lt;Modal v-model=&quot;show&quot; title=&quot;演示 content&quot; content=&quot;hello world~&quot; /&gt; 通过 API 形式调用Modal组件的时候，content可以使用下面两种 h 函数 12345678910111213$modal.show(&#123; title: &#x27;演示 h 函数&#x27;, content(h) &#123; return h( &#x27;div&#x27;, &#123; style: &#x27;color:red;&#x27;, onClick: ($event: Event) =&gt; console.log(&#x27;clicked&#x27;, $event.target) &#125;, &#x27;hello world ~&#x27; ); &#125;&#125;); JSX 123456789101112$modal.show(&#123; title: &#x27;演示 jsx 语法&#x27;, content() &#123; return ( &lt;div onClick=&#123;($event: Event) =&gt; console.log(&#x27;clicked&#x27;, $event.target)&#125; &gt; hello world ~ &lt;/div&gt; ); &#125;&#125;); 实现 API 形式那么组件如何实现API形式调用Modal组件呢？ 在Vue2中，我们可以借助Vue实例以及Vue.extend的方式获得组件实例，然后挂载到body上 1234import Modal from &#x27;./Modal.vue&#x27;;const ComponentClass = Vue.extend(Modal);const instance = new ComponentClass(&#123; el: document.createElement(&quot;div&quot;) &#125;);document.body.appendChild(instance.$el); 虽然Vue3移除了Vue.extend方法，但可以通过createVNode实现 123456import Modal from &#x27;./Modal.vue&#x27;;const container = document.createElement(&#x27;div&#x27;);const vnode = createVNode(Modal);render(vnode, container);const instance = vnode.component;document.body.appendChild(container); 在Vue2中，可以通过this的形式调用全局 API 12345export default &#123; install(vue) &#123; vue.prototype.$create = create &#125;&#125; 而在 Vue3 的 setup 中已经没有 this概念了，需要调用app.config.globalProperties挂载到全局 12345export default &#123; install(app) &#123; app.config.globalProperties.$create = create &#125;&#125; 事件处理下面再看看看Modal组件内部是如何处理「确定」「取消」事件的，既然是Vue3，我们可以采用Compositon API 形式 12345678910111213141516171819202122232425// Modal.vuesetup(props, ctx) &#123; let instance = getCurrentInstance(); // 获得当前组件实例 onBeforeMount(() =&gt; &#123; instance._hub = &#123; &#x27;on-cancel&#x27;: () =&gt; &#123;&#125;, &#x27;on-confirm&#x27;: () =&gt; &#123;&#125; &#125;; &#125;); const handleConfirm = () =&gt; &#123; ctx.emit(&#x27;on-confirm&#x27;); instance._hub[&#x27;on-confirm&#x27;](); &#125;; const handleCancel = () =&gt; &#123; ctx.emit(&#x27;on-cancel&#x27;); ctx.emit(&#x27;update:modelValue&#x27;, false); instance._hub[&#x27;on-cancel&#x27;](); &#125;; return &#123; handleConfirm, handleCancel &#125;;&#125; 在上面代码中，可以看得到除了使用传统emit的形式使父组件监听，还可通过_hub属性中添加 on-cancel，on-confirm方法实现在API中进行监听 12345app.config.globalProperties.$modal = &#123; show(&#123;&#125;) &#123; /* 监听 确定、取消 事件 */ &#125;&#125; 下面再来目睹下_hub是如何实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// index.tsapp.config.globalProperties.$modal = &#123; show(&#123; /* 其他选项 */ onConfirm, onCancel &#125;) &#123; /* ... */ const &#123; props, _hub &#125; = instance; const _closeModal = () =&gt; &#123; props.modelValue = false; container.parentNode!.removeChild(container); &#125;; // 往 _hub 新增事件的具体实现 Object.assign(_hub, &#123; async &#x27;on-confirm&#x27;() &#123; if (onConfirm) &#123; const fn = onConfirm(); // 当方法返回为 Promise if (fn &amp;&amp; fn.then) &#123; try &#123; props.loading = true; await fn; props.loading = false; _closeModal(); &#125; catch (err) &#123; // 发生错误时，不关闭弹框 console.error(err); props.loading = false; &#125; &#125; else &#123; _closeModal(); &#125; &#125; else &#123; _closeModal(); &#125; &#125;, &#x27;on-cancel&#x27;() &#123; onCancel &amp;&amp; onCancel(); _closeModal(); &#125; &#125;);&#125;&#125;; 其他完善关于组件实现国际化、与typsScript结合，大家可以根据自身情况在此基础上进行更改","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue项目中有封装过axios吗？怎么封装的？","slug":"vue.Vue项目中有封装过axios吗？怎么封装的？","date":"2022-07-26T02:22:43.204Z","updated":"2022-08-05T02:35:40.148Z","comments":true,"path":"2022/07/26/vue.Vue项目中有封装过axios吗？怎么封装的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%89%E5%B0%81%E8%A3%85%E8%BF%87axios%E5%90%97%EF%BC%9F%E6%80%8E%E4%B9%88%E5%B0%81%E8%A3%85%E7%9A%84%EF%BC%9F/","excerpt":"","text":"Vue项目中有封装过axios吗？怎么封装的？ 一、axios是什么axios 是一个轻量的 HTTP客户端 基于 XMLHttpRequest 服务来执行 HTTP 请求，支持丰富的配置，支持 Promise，支持浏览器端和 Node.js 端。自Vue2.0起，尤大宣布取消对 vue-resource 的官方推荐，转而推荐 axios。现在 axios 已经成为大部分 Vue 开发者的首选 特性 从浏览器中创建 XMLHttpRequests 从 node.js 创建 http请求 支持 Promise API 拦截请求和响应 转换请求数据和响应数据 取消请求 自动转换JSON 数据 客户端支持防御XSRF 基本使用安装 1234// 项目中安装npm install axios --S// cdn 引入&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt; 导入 1import axios from &#x27;axios&#x27; 发送请求 1234567891011axios(&#123; url:&#x27;xxx&#x27;, // 设置请求的地址 method:&quot;GET&quot;, // 设置请求方法 params:&#123; // get请求使用params进行参数凭借,如果是post请求用data type: &#x27;&#x27;, page: 1 &#125;&#125;).then(res =&gt; &#123; // res为后端返回的数据 console.log(res); &#125;) 并发请求axios.all([]) 12345678910111213function getUserAccount() &#123; return axios.get(&#x27;/user/12345&#x27;);&#125;function getUserPermissions() &#123; return axios.get(&#x27;/user/12345/permissions&#x27;);&#125;axios.all([getUserAccount(), getUserPermissions()]) .then(axios.spread(function (res1, res2) &#123; // res1第一个请求的返回的内容，res2第二个请求返回的内容 // 两个请求都执行完成才会执行&#125;)); 二、为什么要封装axios 的 API 很友好，你完全可以很轻松地在项目中直接使用。 不过随着项目规模增大，如果每发起一次HTTP请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍 这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。为了提高我们的代码质量，我们应该在项目中二次封装一下 axios 再使用 举个例子： 12345678910111213141516171819202122232425262728axios(&#x27;http://localhost:3000/data&#x27;, &#123; // 配置代码 method: &#x27;GET&#x27;, timeout: 1000, withCredentials: true, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, Authorization: &#x27;xxx&#x27;, &#125;, transformRequest: [function (data, headers) &#123; return data; &#125;], // 其他请求配置...&#125;).then((data) =&gt; &#123; // todo: 真正业务逻辑代码 console.log(data);&#125;, (err) =&gt; &#123; // 错误处理代码 if (err.response.status === 401) &#123; // handle authorization error &#125; if (err.response.status === 403) &#123; // handle server forbidden error &#125; // 其他错误处理..... console.log(err);&#125;); 如果每个页面都发送类似的请求，都要写一堆的配置与错误处理，就显得过于繁琐了 这时候我们就需要对axios进行二次封装，让使用更为便利 三、如何封装封装的同时，你需要和 后端协商好一些约定，请求头，状态码，请求超时时间……. 设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分 请求头 : 来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务) 状态码: 根据接口返回的不同status ， 来执行不同的业务，这块需要和后端约定好 请求方法：根据get、post等方法进行一个再次封装，使用起来更为方便 请求拦截器: 根据请求的请求头设定，来决定哪些请求可以访问 响应拦截器：这块就是根据 后端`返回来的状态码判定执行不同业务 设置接口请求前缀利用node环境变量来作判断，用来区分开发、测试、生产环境 12345if (process.env.NODE_ENV === &#x27;development&#x27;) &#123; axios.defaults.baseURL = &#x27;http://dev.xxx.com&#x27;&#125; else if (process.env.NODE_ENV === &#x27;production&#x27;) &#123; axios.defaults.baseURL = &#x27;http://prod.xxx.com&#x27;&#125; 在本地调试的时候，还需要在vue.config.js文件中配置devServer实现代理转发，从而实现跨域 1234567891011devServer: &#123; proxy: &#123; &#x27;/proxyApi&#x27;: &#123; target: &#x27;http://dev.xxx.com&#x27;, changeOrigin: true, pathRewrite: &#123; &#x27;/proxyApi&#x27;: &#x27;&#x27; &#125; &#125; &#125; &#125; 设置请求头与超时时间大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，这里将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置 1234567891011121314const service = axios.create(&#123; ... timeout: 30000, // 请求 30s 超时 headers: &#123; get: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded;charset=utf-8&#x27; // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来 &#125;, post: &#123; &#x27;Content-Type&#x27;: &#x27;application/json;charset=utf-8&#x27; // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来 &#125; &#125;,&#125;) 封装请求方法先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去 1234567891011121314151617181920212223242526272829303132333435363738394041424344// get 请求export function httpGet(&#123; url, params = &#123;&#125;&#125;) &#123; return new Promise((resolve, reject) =&gt; &#123; axios.get(url, &#123; params &#125;).then((res) =&gt; &#123; resolve(res.data) &#125;).catch(err =&gt; &#123; reject(err) &#125;) &#125;)&#125;// post// post请求export function httpPost(&#123; url, data = &#123;&#125;, params = &#123;&#125;&#125;) &#123; return new Promise((resolve, reject) =&gt; &#123; axios(&#123; url, method: &#x27;post&#x27;, transformRequest: [function (data) &#123; let ret = &#x27;&#x27; for (let it in data) &#123; ret += encodeURIComponent(it) + &#x27;=&#x27; + encodeURIComponent(data[it]) + &#x27;&amp;&#x27; &#125; return ret &#125;], // 发送的数据 data, // url参数 params &#125;).then(res =&gt; &#123; resolve(res.data) &#125;) &#125;)&#125; 把封装的方法放在一个api.js文件中 12import &#123; httpGet, httpPost &#125; from &#x27;./http&#x27;export const getorglist = (params = &#123;&#125;) =&gt; httpGet(&#123; url: &#x27;apps/api/org/list&#x27;, params &#125;) 页面中就能直接调用 123456// .vueimport &#123; getorglist &#125; from &#x27;@/assets/js/api&#x27;getorglist(&#123; id: 200 &#125;).then(res =&gt; &#123; console.log(res)&#125;) 这样可以把api统一管理起来，以后维护修改只需要在api.js文件操作即可 请求拦截器请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便 1234567891011// 请求拦截器axios.interceptors.request.use( config =&gt; &#123; // 每次发送请求之前判断是否存在token // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的 token &amp;&amp; (config.headers.Authorization = token) return config &#125;, error =&gt; &#123; return Promise.error(error) &#125;) 响应拦截器响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权 1234567891011121314151617181920212223// 响应拦截器axios.interceptors.response.use(response =&gt; &#123; // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据 // 否则的话抛出错误 if (response.status === 200) &#123; if (response.data.code === 511) &#123; // 未授权调取授权接口 &#125; else if (response.data.code === 510) &#123; // 未登录跳转登录页 &#125; else &#123; return Promise.resolve(response) &#125; &#125; else &#123; return Promise.reject(response) &#125;&#125;, error =&gt; &#123; // 我们可以在这里对异常状态作统一处理 if (error.response.status) &#123; // 处理请求失败的情况 // 对不同返回码对相应处理 return Promise.reject(error.response) &#125;&#125;) 小结 封装是编程中很有意义的手段，简单的axios封装，就可以让我们可以领略到它的魅力 封装 axios 没有一个绝对的标准，只要你的封装可以满足你的项目需求，并且用起来方便，那就是一个好的封装方案","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对双向绑定的理解?","slug":"vue.说说你对双向绑定的理解_","date":"2022-07-26T02:22:43.203Z","updated":"2022-08-05T02:33:24.165Z","comments":true,"path":"2022/07/26/vue.说说你对双向绑定的理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说你对双向绑定的理解? 一、什么是双向绑定我们先从单向绑定切入 单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新 双向绑定就很容易联想到了，在单向绑定的基础上，用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定 举个栗子 当用户填写表单时，View的状态就被更新了，如果此时可以自动更新Model的状态，那就相当于我们把Model和View做了双向绑定 关系图如下 二、双向绑定的原理是什么我们都知道 Vue 是数据双向绑定的框架，双向绑定由三个重要部分构成 数据层（Model）：应用的数据及业务逻辑 视图层（View）：应用的展示效果，各类UI组件 业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来 而上面的这个分层的架构方案，可以用一个专业术语进行称呼：MVVM 这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理 理解ViewModel它的主要职责就是： 数据变化后更新视图 视图变化后更新数据 当然，它还有两个主要部分组成 监听器（Observer）：对所有数据的属性进行监听 解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数 三、实现双向绑定我们还是以Vue为例，先来看看Vue中的双向绑定流程是什么的 new Vue()首先执行初始化，对data执行响应化处理，这个过程发生Observe中 同时对模板执行编译，找到其中动态绑定的数据，从data中获取并初始化视图，这个过程发生在Compile中 同时定义⼀个更新函数和Watcher，将来对应数据变化时Watcher会调用更新函数 由于data的某个key在⼀个视图中可能出现多次，所以每个key都需要⼀个管家Dep来管理多个Watcher 将来data中数据⼀旦发生变化，会首先找到对应的Dep，通知所有Watcher执行更新函数 流程图如下： 实现先来一个构造函数：执行初始化，对data执行响应化处理 123456789101112131415class Vue &#123; constructor(options) &#123; this.$options = options; this.$data = options.data; // 对data选项做响应式处理 observe(this.$data); // 代理data到vm上 proxy(this); // 执行编译 new Compile(options.el, this); &#125;&#125; 对data选项执行响应化具体操作 123456789101112131415161718function observe(obj) &#123; if (typeof obj !== &quot;object&quot; || obj == null) &#123; return; &#125; new Observer(obj);&#125;class Observer &#123; constructor(value) &#123; this.value = value; this.walk(value); &#125; walk(obj) &#123; Object.keys(obj).forEach((key) =&gt; &#123; defineReactive(obj, key, obj[key]); &#125;); &#125;&#125; 编译Compile对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数 12345678910111213141516171819202122232425262728class Compile &#123; constructor(el, vm) &#123; this.$vm = vm; this.$el = document.querySelector(el); // 获取dom if (this.$el) &#123; this.compile(this.$el); &#125; &#125; compile(el) &#123; const childNodes = el.childNodes; Array.from(childNodes).forEach((node) =&gt; &#123; // 遍历子元素 if (this.isElement(node)) &#123; // 判断是否为节点 console.log(&quot;编译元素&quot; + node.nodeName); &#125; else if (this.isInterpolation(node)) &#123; console.log(&quot;编译插值⽂本&quot; + node.textContent); // 判断是否为插值文本 &#123;&#123;&#125;&#125; &#125; if (node.childNodes &amp;&amp; node.childNodes.length &gt; 0) &#123; // 判断是否有子元素 this.compile(node); // 对子元素进行递归遍历 &#125; &#125;); &#125; isElement(node) &#123; return node.nodeType == 1; &#125; isInterpolation(node) &#123; return node.nodeType == 3 &amp;&amp; /\\&#123;\\&#123;(.*)\\&#125;\\&#125;/.test(node.textContent); &#125;&#125; 依赖收集视图中会用到data中某key，这称为依赖。同⼀个key可能出现多次，每次都需要收集出来用⼀个Watcher来维护它们，此过程称为依赖收集 多个Watcher需要⼀个Dep来管理，需要更新时由Dep统⼀通知 实现思路 defineReactive时为每⼀个key创建⼀个Dep实例 初始化视图时读取某个key，例如name1，创建⼀个watcher1 由于触发name1的getter方法，便将watcher1添加到name1对应的Dep中 当name1更新，setter触发时，便可通过对应Dep通知其管理所有Watcher更新 1234567891011121314151617181920// 负责更新视图class Watcher &#123; constructor(vm, key, updater) &#123; this.vm = vm this.key = key this.updaterFn = updater // 创建实例时，把当前实例指定到Dep.target静态属性上 Dep.target = this // 读一下key，触发get vm[key] // 置空 Dep.target = null &#125; // 未来执行dom更新函数，由dep调用的 update() &#123; this.updaterFn.call(this.vm, this.vm[this.key]) &#125;&#125; 声明Dep 1234567891011class Dep &#123; constructor() &#123; this.deps = []; // 依赖管理 &#125; addDep(dep) &#123; this.deps.push(dep); &#125; notify() &#123; this.deps.forEach((dep) =&gt; dep.update()); &#125;&#125; 创建watcher时触发getter 1234567class Watcher &#123; constructor(vm, key, updateFn) &#123; Dep.target = this; this.vm[this.key]; Dep.target = null; &#125;&#125; 依赖收集，创建Dep实例 1234567891011121314function defineReactive(obj, key, val) &#123; this.observe(val); const dep = new Dep(); Object.defineProperty(obj, key, &#123; get() &#123; Dep.target &amp;&amp; dep.addDep(Dep.target);// Dep.target也就是Watcher实例 return val; &#125;, set(newVal) &#123; if (newVal === val) return; dep.notify(); // 通知dep执行更新方法 &#125;, &#125;);&#125;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue中的过滤器了解吗？过滤器的应用场景有哪些？","slug":"vue.Vue中的过滤器了解吗？过滤器的应用场景有哪些？","date":"2022-07-26T02:22:43.202Z","updated":"2022-08-05T02:35:59.841Z","comments":true,"path":"2022/07/26/vue.Vue中的过滤器了解吗？过滤器的应用场景有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E4%B8%AD%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"Vue中的过滤器了解吗？过滤器的应用场景有哪些？ 一、是什么过滤器（filter）是输送介质管道上不可缺少的一种装置 大白话，就是把一些不必要的东西过滤掉 过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解其为一个纯函数 Vue 允许你自定义过滤器，可被用于一些常见的文本格式化 ps: Vue3中已废弃filter 二、如何用vue中的过滤器可以用在两个地方：双花括号插值和 v-bind 表达式，过滤器应该被添加在 JavaScript表达式的尾部，由“管道”符号指示： 12345&lt;!-- 在双花括号中 --&gt;&#123;&#123; message | capitalize &#125;&#125;&lt;!-- 在 `v-bind` 中 --&gt;&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt; 定义filter在组件的选项中定义本地的过滤器 1234567filters: &#123; capitalize: function (value) &#123; if (!value) return &#x27;&#x27; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) &#125;&#125; 定义全局过滤器： 123456789Vue.filter(&#x27;capitalize&#x27;, function (value) &#123; if (!value) return &#x27;&#x27; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1)&#125;)new Vue(&#123; // ...&#125;) 注意：当全局过滤器和局部过滤器重名时，会采用局部过滤器 过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，capitalize 过滤器函数将会收到 message 的值作为第一个参数 过滤器可以串联： 1&#123;&#123; message | filterA | filterB &#125;&#125; 在这个例子中，filterA 被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将 filterA 的结果传递到 filterB 中。 过滤器是 JavaScript函数，因此可以接收参数： 1&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125; 这里，filterA 被定义为接收三个参数的过滤器函数。 其中 message 的值作为第一个参数，普通字符串 &#39;arg1&#39; 作为第二个参数，表达式 arg2的值作为第三个参数 举个例子： 1234567891011&lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123; msg | msgFormat(&#x27;疯狂&#x27;,&#x27;--&#x27;)&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt; // 定义一个 Vue 全局的过滤器，名字叫做 msgFormat Vue.filter(&#x27;msgFormat&#x27;, function(msg, arg, arg2) &#123; // 字符串的 replace 方法，第一个参数，除了可写一个 字符串之外，还可以定义一个正则 return msg.replace(/单纯/g, arg+arg2) &#125;)&lt;/script&gt; 小结： 部过滤器优先于全局过滤器被调用 一个表达式可以使用多个过滤器。过滤器之间需要用管道符“|”隔开。其执行顺序从左往右 三、应用场景平时开发中，需要用到过滤器的地方有很多，比如单位转换、数字打点、文本格式化、时间格式化之类的等 比如我们要实现将30000 =&gt; 30,000，这时候我们就需要使用过滤器 12345Vue.filter(&#x27;toThousandFilter&#x27;, function (value) &#123; if (!value) return &#x27;&#x27; value = value.toString() return .replace(str.indexOf(&#x27;.&#x27;) &gt; -1 ? /(\\d)(?=(\\d&#123;3&#125;)+\\.)/g : /(\\d)(?=(?:\\d&#123;3&#125;)+$)/g, &#x27;$1,&#x27;)&#125;) 四、原理分析使用过滤器 1&#123;&#123; message | capitalize &#125;&#125; 在模板编译阶段过滤器表达式将会被编译为过滤器函数，主要是用过parseFilters，我们放到最后讲 1_s(_f(&#x27;filterFormat&#x27;)(message)) 首先分析一下_f： _f 函数全名是：resolveFilter，这个函数的作用是从this.$options.filters中找出注册的过滤器并返回 12// 变为this.$options.filters[&#x27;filterFormat&#x27;](message) // message为参数 关于resolveFilter 12345import &#123; indentity,resolveAsset &#125; from &#x27;core/util/index&#x27; export function resolveFilter(id)&#123; return resolveAsset(this.$options,&#x27;filters&#x27;,id,true) || identity&#125; 内部直接调用resolveAsset，将option对象，类型，过滤器id，以及一个触发警告的标志作为参数传递，如果找到，则返回过滤器； resolveAsset的代码如下： 12345678910111213141516171819202122export function resolveAsset(options,type,id,warnMissing)&#123; // 因为我们找的是过滤器，所以在 resolveFilter函数中调用时 type 的值直接给的 &#x27;filters&#x27;,实际这个函数还可以拿到其他很多东西 if(typeof id !== &#x27;string&#x27;)&#123; // 判断传递的过滤器id 是不是字符串，不是则直接返回 return &#125; const assets = options[type] // 将我们注册的所有过滤器保存在变量中 // 接下来的逻辑便是判断id是否在assets中存在，即进行匹配 if(hasOwn(assets,id)) return assets[id] // 如找到，直接返回过滤器 // 没有找到，代码继续执行 const camelizedId = camelize(id) // 万一你是驼峰的呢 if(hasOwn(assets,camelizedId)) return assets[camelizedId] // 没找到，继续执行 const PascalCaseId = capitalize(camelizedId) // 万一你是首字母大写的驼峰呢 if(hasOwn(assets,PascalCaseId)) return assets[PascalCaseId] // 如果还是没找到，则检查原型链(即访问属性) const result = assets[id] || assets[camelizedId] || assets[PascalCaseId] // 如果依然没找到，则在非生产环境的控制台打印警告 if(process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warnMissing &amp;&amp; !result)&#123; warn(&#x27;Failed to resolve &#x27; + type.slice(0,-1) + &#x27;: &#x27; + id, options) &#125; // 无论是否找到，都返回查找结果 return result&#125; 下面再来分析一下_s： _s 函数的全称是 toString,过滤器处理后的结果会当作参数传递给 toString函数，最终 toString函数执行后的结果会保存到Vnode中的text属性中，渲染到视图中 1234567function toString(value)&#123; return value == null ? &#x27;&#x27; : typeof value === &#x27;object&#x27; ? JSON.stringify(value,null,2)// JSON.stringify()第三个参数可用来控制字符串里面的间距 : String(value)&#125; 最后，在分析下parseFilters，在模板编译阶段使用该函数阶段将模板过滤器解析为过滤器函数调用表达式 1234567891011121314151617181920212223function parseFilters (filter) &#123; let filters = filter.split(&#x27;|&#x27;) let expression = filters.shift().trim() // shift()删除数组第一个元素并将其返回，该方法会更改原数组 let i if (filters) &#123; for(i = 0;i &lt; filters.length;i++)&#123; experssion = warpFilter(expression,filters[i].trim()) // 这里传进去的expression实际上是管道符号前面的字符串，即过滤器的第一个参数 &#125; &#125; return expression&#125;// warpFilter函数实现function warpFilter(exp,filter)&#123; // 首先判断过滤器是否有其他参数 const i = filter.indexof(&#x27;(&#x27;) if(i&lt;0)&#123; // 不含其他参数，直接进行过滤器表达式字符串的拼接 return `_f(&quot;$&#123;filter&#125;&quot;)($&#123;exp&#125;)` &#125;else&#123; const name = filter.slice(0,i) // 过滤器名称 const args = filter.slice(i+1) // 参数，但还多了 ‘)’ return `_f(&#x27;$&#123;name&#125;&#x27;)($&#123;exp&#125;,$&#123;args&#125;` // 注意这一步少给了一个 &#x27;)&#x27; &#125;&#125; 小结： 在编译阶段通过parseFilters将过滤器编译成函数调用（串联过滤器则是一个嵌套的函数调用，前一个过滤器执行的结果是后一个过滤器函数的参数） 编译后通过调用resolveFilter函数找到对应过滤器并返回结果 执行结果作为参数传递给toString函数，而toString执行后，其结果会保存在Vnode的text属性中，渲染到视图","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对slot的理解？slot使用场景有哪些？","slug":"vue.说说你对slot的理解？slot使用场景有哪些？","date":"2022-07-26T02:22:43.201Z","updated":"2022-08-05T02:33:36.565Z","comments":true,"path":"2022/07/26/vue.说说你对slot的理解？slot使用场景有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9slot%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9Fslot%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"说说你对slot的理解？slot使用场景有哪些？ 一、slot是什么在HTML中 slot 元素 ，作为 Web Components 技术套件的一部分，是Web组件内的一个占位符 该占位符可以在后期使用自己的标记语言填充 举个栗子 123456789&lt;template id=&quot;element-details-template&quot;&gt; &lt;slot name=&quot;element-name&quot;&gt;Slot template&lt;/slot&gt;&lt;/template&gt;&lt;element-details&gt; &lt;span slot=&quot;element-name&quot;&gt;1&lt;/span&gt;&lt;/element-details&gt;&lt;element-details&gt; &lt;span slot=&quot;element-name&quot;&gt;2&lt;/span&gt;&lt;/element-details&gt; template不会展示到页面中，需要用先获取它的引用，然后添加到DOM中， 1234567891011customElements.define(&#x27;element-details&#x27;, class extends HTMLElement &#123; constructor() &#123; super(); const template = document .getElementById(&#x27;element-details-template&#x27;) .content; const shadowRoot = this.attachShadow(&#123;mode: &#x27;open&#x27;&#125;) .appendChild(template.cloneNode(true)); &#125;&#125;) 在Vue中的概念也是如此 Slot 艺名插槽，花名“占坑”，我们可以理解为solt在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中slot位置），作为承载分发内容的出口 可以将其类比为插卡式的FC游戏机，游戏机暴露卡槽（插槽）让用户插入不同的游戏磁条（自定义内容） 放张图感受一下 二、使用场景通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理 如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情 通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用 比如布局组件、表格列、下拉选、弹框显示内容等 三、分类slot可以分来以下三种： 默认插槽 具名插槽 作用域插槽 默认插槽子组件用&lt;slot&gt;标签来确定渲染的位置，标签里面可以放DOM结构，当父组件使用的时候没有往插槽传入内容，标签内DOM结构就会显示在页面 父组件在使用的时候，直接在子组件的标签内写入内容即可 子组件Child.vue 12345&lt;template&gt; &lt;slot&gt; &lt;p&gt;插槽后备的内容&lt;/p&gt; &lt;/slot&gt;&lt;/template&gt; 父组件 123&lt;Child&gt; &lt;div&gt;默认插槽&lt;/div&gt; &lt;/Child&gt; 具名插槽子组件用name属性来表示插槽的名字，不传为默认插槽 父组件中在使用时在默认插槽的基础上加上slot属性，值为子组件插槽name属性值 子组件Child.vue 1234&lt;template&gt; &lt;slot&gt;插槽后备的内容&lt;/slot&gt; &lt;slot name=&quot;content&quot;&gt;插槽后备的内容&lt;/slot&gt;&lt;/template&gt; 父组件 12345&lt;child&gt; &lt;template v-slot:default&gt;具名插槽&lt;/template&gt; &lt;!-- 具名插槽⽤插槽名做参数 --&gt; &lt;template v-slot:content&gt;内容...&lt;/template&gt;&lt;/child&gt; 作用域插槽子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件v-slot接受的对象上 父组件中在使用时通过v-slot:（简写：#）获取子组件的信息，在内容中使用 子组件Child.vue 12345&lt;template&gt; &lt;slot name=&quot;footer&quot; testProps=&quot;子组件的值&quot;&gt; &lt;h3&gt;没传footer插槽&lt;/h3&gt; &lt;/slot&gt;&lt;/template&gt; 父组件 123456789&lt;child&gt; &lt;!-- 把v-slot的值指定为作⽤域上下⽂对象 --&gt; &lt;template v-slot:default=&quot;slotProps&quot;&gt; 来⾃⼦组件数据：&#123;&#123;slotProps.testProps&#125;&#125; &lt;/template&gt; &lt;template #default=&quot;slotProps&quot;&gt; 来⾃⼦组件数据：&#123;&#123;slotProps.testProps&#125;&#125; &lt;/template&gt;&lt;/child&gt; 小结： v-slot属性只能在&lt;template&gt;上使用，但在只有默认插槽时可以在组件标签上使用 默认插槽名为default，可以省略default直接写v-slot 缩写为#时不能不写参数，写成#default 可以通过解构获取v-slot=&#123;user&#125;，还可以重命名v-slot=&quot;&#123;user: newName&#125;&quot;和定义默认值v-slot=&quot;&#123;user = &#39;默认值&#39;&#125;&quot; 四、原理分析slot本质上是返回VNode的函数，一般情况下，Vue中的组件要渲染到页面上需要经过template -&gt; render function -&gt; VNode -&gt; DOM 过程，这里看看slot如何实现： 编写一个buttonCounter组件，使用匿名插槽 123Vue.component(&#x27;button-counter&#x27;, &#123; template: &#x27;&lt;div&gt; &lt;slot&gt;我是默认内容&lt;/slot&gt;&lt;/div&gt;&#x27;&#125;) 使用该组件 12345new Vue(&#123; el: &#x27;#app&#x27;, template: &#x27;&lt;button-counter&gt;&lt;span&gt;我是slot传入内容&lt;/span&gt;&lt;/button-counter&gt;&#x27;, components:&#123;buttonCounter&#125;&#125;) 获取buttonCounter组件渲染函数 123(function anonymous() &#123;with(this)&#123;return _c(&#x27;div&#x27;,[_t(&quot;default&quot;,[_v(&quot;我是默认内容&quot;)])],2)&#125;&#125;) _v表示穿件普通文本节点，_t表示渲染插槽的函数 渲染插槽函数renderSlot（做了简化） 1234567891011121314function renderSlot ( name, fallback, props, bindObject) &#123; // 得到渲染插槽内容的函数 var scopedSlotFn = this.$scopedSlots[name]; var nodes; // 如果存在插槽渲染函数，则执行插槽渲染函数，生成nodes节点返回 // 否则使用默认值 nodes = scopedSlotFn(props) || fallback; return nodes;&#125; name属性表示定义插槽的名字，默认值为default，fallback表示子组件中的slot节点的默认值 关于this.$scopredSlots是什么，我们可以先看看vm.slot 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354function initRender (vm) &#123; ... vm.$slots = resolveSlots(options._renderChildren, renderContext); ...&#125;resolveSlots`函数会对`children`节点做归类和过滤处理，返回`slotsfunction resolveSlots ( children, context ) &#123; if (!children || !children.length) &#123; return &#123;&#125; &#125; var slots = &#123;&#125;; for (var i = 0, l = children.length; i &lt; l; i++) &#123; var child = children[i]; var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node if (data &amp;&amp; data.attrs &amp;&amp; data.attrs.slot) &#123; delete data.attrs.slot; &#125; // named slots should only be respected if the vnode was rendered in the // same context. if ((child.context === context || child.fnContext === context) &amp;&amp; data &amp;&amp; data.slot != null ) &#123; // 如果slot存在(slot=&quot;header&quot;) 则拿对应的值作为key var name = data.slot; var slot = (slots[name] || (slots[name] = [])); // 如果是tempalte元素 则把template的children添加进数组中，这也就是为什么你写的template标签并不会渲染成另一个标签到页面 if (child.tag === &#x27;template&#x27;) &#123; slot.push.apply(slot, child.children || []); &#125; else &#123; slot.push(child); &#125; &#125; else &#123; // 如果没有就默认是default (slots.default || (slots.default = [])).push(child); &#125; &#125; // ignore slots that contains only whitespace for (var name$1 in slots) &#123; if (slots[name$1].every(isWhitespace)) &#123; delete slots[name$1]; &#125; &#125; return slots&#125;_render`渲染函数通过`normalizeScopedSlots`得到`vm.$scopedSlotsvm.$scopedSlots = normalizeScopedSlots( _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots); 作用域插槽中父组件能够得到子组件的值是因为在renderSlot的时候执行会传入props，也就是上述_t第三个参数，父组件则能够得到子组件传递过来的值","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"为什么Vue中的v-if和v-for不建议一起用?","slug":"vue.为什么Vue中的v-if和v-for不建议一起用_","date":"2022-07-26T02:22:43.200Z","updated":"2022-08-05T02:34:32.755Z","comments":true,"path":"2022/07/26/vue.为什么Vue中的v-if和v-for不建议一起用_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%B8%BA%E4%BB%80%E4%B9%88Vue%E4%B8%AD%E7%9A%84v-if%E5%92%8Cv-for%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%B8%80%E8%B5%B7%E7%94%A8_/","excerpt":"","text":"为什么Vue中的v-if和v-for不建议一起用? 一、作用v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 true值的时候被渲染 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组或者对象，而 item 则是被迭代的数组元素的别名 在 v-for 的时候，建议设置key值，并且保证每个key值是独一无二的，这便于diff算法进行优化 两者在用法上 12345&lt;Modal v-if=&quot;isShow&quot; /&gt;&lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt; &#123;&#123; item.label &#125;&#125;&lt;/li&gt; 二、优先级v-if与v-for都是vue模板系统中的指令 在vue模板编译的时候，会将指令系统转化成可执行的render函数 示例编写一个p标签，同时使用v-if与 v-for 12345&lt;div id=&quot;app&quot;&gt; &lt;p v-if=&quot;isShow&quot; v-for=&quot;item in items&quot;&gt; &#123;&#123; item.title &#125;&#125; &lt;/p&gt;&lt;/div&gt; 创建vue实例，存放isShow与items数据 123456789101112131415const app = new Vue(&#123; el: &quot;#app&quot;, data() &#123; return &#123; items: [ &#123; title: &quot;foo&quot; &#125;, &#123; title: &quot;baz&quot; &#125;] &#125; &#125;, computed: &#123; isShow() &#123; return this.items &amp;&amp; this.items.length &gt; 0 &#125; &#125;&#125;) 模板指令的代码都会生成在render函数中，通过app.$options.render就能得到渲染函数 123456ƒ anonymous() &#123; with (this) &#123; return _c(&#x27;div&#x27;, &#123; attrs: &#123; &quot;id&quot;: &quot;app&quot; &#125; &#125;, _l((items), function (item) &#123; return (isShow) ? _c(&#x27;p&#x27;, [_v(&quot;\\n&quot; + _s(item.title) + &quot;\\n&quot;)]) : _e() &#125;), 0) &#125;&#125; _l是vue的列表渲染函数，函数内部都会进行一次if判断 初步得到结论：v-for优先级是比v-if高 再将v-for与v-if置于不同标签 12345&lt;div id=&quot;app&quot;&gt; &lt;template v-if=&quot;isShow&quot;&gt; &lt;p v-for=&quot;item in items&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/p&gt; &lt;/template&gt;&lt;/div&gt; 再输出下render函数 123456ƒ anonymous() &#123; with(this)&#123;return _c(&#x27;div&#x27;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;, [(isShow)?[_v(&quot;\\n&quot;), _l((items),function(item)&#123;return _c(&#x27;p&#x27;,[_v(_s(item.title))])&#125;)]:_e()],2)&#125;&#125; 这时候我们可以看到，v-for与v-if作用在不同标签时候，是先进行判断，再进行列表的渲染 我们再在查看下vue源码 源码位置：\\vue-dev\\src\\compiler\\codegen\\index.js 1234567891011121314151617181920export function genElement (el: ASTElement, state: CodegenState): string &#123; if (el.parent) &#123; el.pre = el.pre || el.parent.pre &#125; if (el.staticRoot &amp;&amp; !el.staticProcessed) &#123; return genStatic(el, state) &#125; else if (el.once &amp;&amp; !el.onceProcessed) &#123; return genOnce(el, state) &#125; else if (el.for &amp;&amp; !el.forProcessed) &#123; return genFor(el, state) &#125; else if (el.if &amp;&amp; !el.ifProcessed) &#123; return genIf(el, state) &#125; else if (el.tag === &#x27;template&#x27; &amp;&amp; !el.slotTarget &amp;&amp; !state.pre) &#123; return genChildren(el, state) || &#x27;void 0&#x27; &#125; else if (el.tag === &#x27;slot&#x27;) &#123; return genSlot(el, state) &#125; else &#123; // component or element ...&#125; 在进行if判断的时候，v-for是比v-if先进行判断 最终结论：v-for优先级比v-if高 三、注意事项 永远不要把 v-if 和 v-for 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断） 如果避免出现这种情况，则在外层嵌套template（页面渲染不生成dom节点），在这一层进行v-if判断，然后在内部进行v-for循环 123&lt;template v-if=&quot;isShow&quot;&gt; &lt;p v-for=&quot;item in items&quot;&gt;&lt;/template&gt; 如果条件出现在循环内部，可通过计算属性computed提前过滤掉那些不需要显示的项 1234567 computed: &#123; items: function() &#123; return this.list.filter(function (item) &#123; return item.isShow &#125;) &#125;&#125;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue要做权限管理该怎么做？控制到按钮级别的权限怎么做？","slug":"vue.Vue要做权限管理该怎么做？控制到按钮级别的权限怎么做？","date":"2022-07-26T02:22:43.199Z","updated":"2022-08-05T02:35:45.595Z","comments":true,"path":"2022/07/26/vue.Vue要做权限管理该怎么做？控制到按钮级别的权限怎么做？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E8%A6%81%E5%81%9A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F%E6%8E%A7%E5%88%B6%E5%88%B0%E6%8C%89%E9%92%AE%E7%BA%A7%E5%88%AB%E7%9A%84%E6%9D%83%E9%99%90%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F/","excerpt":"","text":"Vue要做权限管理该怎么做？控制到按钮级别的权限怎么做？ 一、是什么权限是对特定资源的访问许可，所谓权限控制，也就是确保用户只能访问到被分配的资源 而前端权限归根结底是请求的发起权，请求的发起可能有下面两种形式触发 页面加载触发 页面上的按钮点击触发 总的来说，所有的请求发起都触发自前端路由或视图 所以我们可以从这两方面入手，对触发权限的源头进行控制，最终要实现的目标是： 路由方面，用户登录后只能看到自己有权访问的导航菜单，也只能访问自己有权访问的路由地址，否则将跳转 4xx 提示页 视图方面，用户只能看到自己有权浏览的内容和有权操作的控件 最后再加上请求控制作为最后一道防线，路由可能配置失误，按钮可能忘了加权限，这种时候请求控制可以用来兜底，越权请求将在前端被拦截 二、如何做前端权限控制可以分为四个方面： 接口权限 按钮权限 菜单权限 路由权限 接口权限接口权限目前一般采用jwt的形式来验证，没有通过的话一般返回401，跳转到登录页面重新进行登录 登录完拿到token，将token存起来，通过axios请求拦截器进行拦截，每次请求的时候头部携带token 123456789axios.interceptors.request.use(config =&gt; &#123; config.headers[&#x27;token&#x27;] = cookie.get(&#x27;token&#x27;) return config&#125;)axios.interceptors.response.use(res=&gt;&#123;&#125;,&#123;response&#125;=&gt;&#123; if (response.data.code === 40099 || response.data.code === 40098) &#123; //token过期或者错误 router.push(&#x27;/login&#x27;) &#125;&#125;) 路由权限控制方案一 初始化即挂载全部路由，并且在路由上标记相应的权限信息，每次路由跳转前做校验 1234567891011121314151617181920212223242526272829const routerMap = [ &#123; path: &#x27;/permission&#x27;, component: Layout, redirect: &#x27;/permission/index&#x27;, alwaysShow: true, // will always show the root menu meta: &#123; title: &#x27;permission&#x27;, icon: &#x27;lock&#x27;, roles: [&#x27;admin&#x27;, &#x27;editor&#x27;] // you can set roles in root nav &#125;, children: [&#123; path: &#x27;page&#x27;, component: () =&gt; import(&#x27;@/views/permission/page&#x27;), name: &#x27;pagePermission&#x27;, meta: &#123; title: &#x27;pagePermission&#x27;, roles: [&#x27;admin&#x27;] // or you can only set roles in sub nav &#125; &#125;, &#123; path: &#x27;directive&#x27;, component: () =&gt; import(&#x27;@/views/permission/directive&#x27;), name: &#x27;directivePermission&#x27;, meta: &#123; title: &#x27;directivePermission&#x27; // if do not set roles, means: this page does not require permission &#125; &#125;] &#125;] 这种方式存在以下四种缺点： 加载所有的路由，如果路由很多，而用户并不是所有的路由都有权限访问，对性能会有影响。 全局路由守卫里，每次路由跳转都要做权限判断。 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识 方案二 初始化的时候先挂载不需要权限控制的路由，比如登录页，404等错误页。如果用户通过URL进行强制访问，则会直接进入404，相当于从源头上做了控制 登录后，获取用户的权限信息，然后筛选有权限访问的路由，在全局路由守卫里进行调用addRoutes添加路由 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import router from &#x27;./router&#x27;import store from &#x27;./store&#x27;import &#123; Message &#125; from &#x27;element-ui&#x27;import NProgress from &#x27;nprogress&#x27; // progress barimport &#x27;nprogress/nprogress.css&#x27;// progress bar styleimport &#123; getToken &#125; from &#x27;@/utils/auth&#x27; // getToken from cookieNProgress.configure(&#123; showSpinner: false &#125;)// NProgress Configuration// permission judge functionfunction hasPermission(roles, permissionRoles) &#123; if (roles.indexOf(&#x27;admin&#x27;) &gt;= 0) return true // admin permission passed directly if (!permissionRoles) return true return roles.some(role =&gt; permissionRoles.indexOf(role) &gt;= 0)&#125;const whiteList = [&#x27;/login&#x27;, &#x27;/authredirect&#x27;]// no redirect whitelistrouter.beforeEach((to, from, next) =&gt; &#123; NProgress.start() // start progress bar if (getToken()) &#123; // determine if there has token /* has token*/ if (to.path === &#x27;/login&#x27;) &#123; next(&#123; path: &#x27;/&#x27; &#125;) NProgress.done() // if current page is dashboard will not trigger afterEach hook, so manually handle it &#125; else &#123; if (store.getters.roles.length === 0) &#123; // 判断当前用户是否已拉取完user_info信息 store.dispatch(&#x27;GetUserInfo&#x27;).then(res =&gt; &#123; // 拉取user_info const roles = res.data.roles // note: roles must be a array! such as: [&#x27;editor&#x27;,&#x27;develop&#x27;] store.dispatch(&#x27;GenerateRoutes&#x27;, &#123; roles &#125;).then(() =&gt; &#123; // 根据roles权限生成可访问的路由表 router.addRoutes(store.getters.addRouters) // 动态添加可访问路由表 next(&#123; ...to, replace: true &#125;) // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record &#125;) &#125;).catch((err) =&gt; &#123; store.dispatch(&#x27;FedLogOut&#x27;).then(() =&gt; &#123; Message.error(err || &#x27;Verification failed, please login again&#x27;) next(&#123; path: &#x27;/&#x27; &#125;) &#125;) &#125;) &#125; else &#123; // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓ if (hasPermission(store.getters.roles, to.meta.roles)) &#123; next()// &#125; else &#123; next(&#123; path: &#x27;/401&#x27;, replace: true, query: &#123; noGoBack: true &#125;&#125;) &#125; // 可删 ↑ &#125; &#125; &#125; else &#123; /* has no token*/ if (whiteList.indexOf(to.path) !== -1) &#123; // 在免登录白名单，直接进入 next() &#125; else &#123; next(&#x27;/login&#x27;) // 否则全部重定向到登录页 NProgress.done() // if current page is login will not trigger afterEach hook, so manually handle it &#125; &#125;&#125;)router.afterEach(() =&gt; &#123; NProgress.done() // finish progress bar&#125;) 按需挂载，路由就需要知道用户的路由权限，也就是在用户登录进来的时候就要知道当前用户拥有哪些路由权限 这种方式也存在了以下的缺点： 全局路由守卫里，每次路由跳转都要做判断 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识 菜单权限菜单权限可以理解成将页面与理由进行解耦 方案一菜单与路由分离，菜单由后端返回 前端定义路由信息 12345&#123; name: &quot;login&quot;, path: &quot;/login&quot;, component: () =&gt; import(&quot;@/pages/Login.vue&quot;)&#125; name字段都不为空，需要根据此字段与后端返回菜单做关联，后端返回的菜单信息中必须要有name对应的字段，并且做唯一性校验 全局路由守卫里做判断 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758function hasPermission(router, accessMenu) &#123; if (whiteList.indexOf(router.path) !== -1) &#123; return true; &#125; let menu = Util.getMenuByName(router.name, accessMenu); if (menu.name) &#123; return true; &#125; return false;&#125;Router.beforeEach(async (to, from, next) =&gt; &#123; if (getToken()) &#123; let userInfo = store.state.user.userInfo; if (!userInfo.name) &#123; try &#123; await store.dispatch(&quot;GetUserInfo&quot;) await store.dispatch(&#x27;updateAccessMenu&#x27;) if (to.path === &#x27;/login&#x27;) &#123; next(&#123; name: &#x27;home_index&#x27; &#125;) &#125; else &#123; //Util.toDefaultPage([...routers], to.name, router, next); next(&#123; ...to, replace: true &#125;)//菜单权限更新完成,重新进一次当前路由 &#125; &#125; catch (e) &#123; if (whiteList.indexOf(to.path) !== -1) &#123; // 在免登录白名单，直接进入 next() &#125; else &#123; next(&#x27;/login&#x27;) &#125; &#125; &#125; else &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#123; name: &#x27;home_index&#x27; &#125;) &#125; else &#123; if (hasPermission(to, store.getters.accessMenu)) &#123; Util.toDefaultPage(store.getters.accessMenu,to, routes, next); &#125; else &#123; next(&#123; path: &#x27;/403&#x27;,replace:true &#125;) &#125; &#125; &#125; &#125; else &#123; if (whiteList.indexOf(to.path) !== -1) &#123; // 在免登录白名单，直接进入 next() &#125; else &#123; next(&#x27;/login&#x27;) &#125; &#125; let menu = Util.getMenuByName(to.name, store.getters.accessMenu); Util.title(menu.title);&#125;);Router.afterEach((to) =&gt; &#123; window.scrollTo(0, 0);&#125;); 每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的name与路由的name是一一对应的，而后端返回的菜单就已经是经过权限过滤的 如果根据路由name找不到对应的菜单，就表示用户有没权限访问 如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过addRoutes动态挂载 这种方式的缺点： 菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用 全局路由守卫里，每次路由跳转都要做判断 方案二菜单和路由都由后端返回 前端统一定义路由组件 123456const Home = () =&gt; import(&quot;../pages/Home.vue&quot;);const UserInfo = () =&gt; import(&quot;../pages/UserInfo.vue&quot;);export default &#123; home: Home, userInfo: UserInfo&#125;; 后端路由组件返回以下格式 123456789101112[ &#123; name: &quot;home&quot;, path: &quot;/&quot;, component: &quot;home&quot; &#125;, &#123; name: &quot;home&quot;, path: &quot;/userinfo&quot;, component: &quot;userInfo&quot; &#125;] 在将后端返回路由通过addRoutes动态挂载之间，需要将数据处理一下，将component字段换为真正的组件 如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段，前端拿到数据也要做相应的处理 这种方法也会存在缺点： 全局路由守卫里，每次路由跳转都要做判断 前后端的配合要求更高 按钮权限方案一按钮权限也可以用v-if判断 但是如果页面过多，每个页面页面都要获取用户权限role和路由表里的meta.btnPermissions，然后再做判断 这种方式就不展开举例了 方案二通过自定义指令进行按钮权限的判断 首先配置路由 12345678910111213141516171819202122232425&#123; path: &#x27;/permission&#x27;, component: Layout, name: &#x27;权限测试&#x27;, meta: &#123; btnPermissions: [&#x27;admin&#x27;, &#x27;supper&#x27;, &#x27;normal&#x27;] &#125;, //页面需要的权限 children: [&#123; path: &#x27;supper&#x27;, component: _import(&#x27;system/supper&#x27;), name: &#x27;权限测试页&#x27;, meta: &#123; btnPermissions: [&#x27;admin&#x27;, &#x27;supper&#x27;] &#125; //页面需要的权限 &#125;, &#123; path: &#x27;normal&#x27;, component: _import(&#x27;system/normal&#x27;), name: &#x27;权限测试页&#x27;, meta: &#123; btnPermissions: [&#x27;admin&#x27;] &#125; //页面需要的权限 &#125;]&#125; 自定义权限鉴定指令 1234567891011121314151617181920212223242526272829303132import Vue from &#x27;vue&#x27;/**权限指令**/const has = Vue.directive(&#x27;has&#x27;, &#123; bind: function (el, binding, vnode) &#123; // 获取页面按钮权限 let btnPermissionsArr = []; if(binding.value)&#123; // 如果指令传值，获取指令参数，根据指令参数和当前登录人按钮权限做比较。 btnPermissionsArr = Array.of(binding.value); &#125;else&#123; // 否则获取路由中的参数，根据路由的btnPermissionsArr和当前登录人按钮权限做比较。 btnPermissionsArr = vnode.context.$route.meta.btnPermissions; &#125; if (!Vue.prototype.$_has(btnPermissionsArr)) &#123; el.parentNode.removeChild(el); &#125; &#125;&#125;);// 权限检查方法Vue.prototype.$_has = function (value) &#123; let isExist = false; // 获取用户按钮权限 let btnPermissionsStr = sessionStorage.getItem(&quot;btnPermissions&quot;); if (btnPermissionsStr == undefined || btnPermissionsStr == null) &#123; return false; &#125; if (value.indexOf(btnPermissionsStr) &gt; -1) &#123; isExist = true; &#125; return isExist;&#125;;export &#123;has&#125; 在使用的按钮中只需要引用v-has指令 1&lt;el-button @click=&#x27;editClick&#x27; type=&quot;primary&quot; v-has&gt;编辑&lt;/el-button&gt; 小结关于权限如何选择哪种合适的方案，可以根据自己项目的方案项目，如考虑路由与菜单是否分离 权限需要前后端结合，前端尽可能的去控制，更多的需要后台判断","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"了解过vue中的diff算法吗？说说看","slug":"vue.了解过vue中的diff算法吗？说说看","date":"2022-07-26T02:22:43.198Z","updated":"2022-08-05T02:32:45.651Z","comments":true,"path":"2022/07/26/vue.了解过vue中的diff算法吗？说说看/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%BA%86%E8%A7%A3%E8%BF%87vue%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%90%97%EF%BC%9F%E8%AF%B4%E8%AF%B4%E7%9C%8B/","excerpt":"","text":"了解过vue中的diff算法吗？说说看 一、是什么diff 算法是一种通过同层的树节点进行比较的高效算法 其有两个特点： 比较只会在同层级进行, 不会跨层级比较 在diff比较的过程中，循环从两边向中间比较 diff 算法的在很多场景下都有应用，在 vue 中，作用于虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较 二、比较方式diff整体策略为：深度优先，同层比较 比较只会在同层级进行, 不会跨层级比较 比较的过程中，循环从两边向中间收拢 下面举个vue通过diff算法更新的例子： 新旧VNode节点如下图所示： 第一次循环后，发现旧节点D与新节点D相同，直接复用旧节点D作为diff后的第一个真实节点，同时旧节点endIndex移动到C，新节点的 startIndex 移动到了 C 第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，diff 后创建了 C 的真实节点插入到第一次创建的 B 节点后面。同时旧节点的 endIndex 移动到了 B，新节点的 startIndex 移动到了 E 第三次循环中，发现E没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 startIndex 移动到了 A。旧节点的 startIndex 和 endIndex 都保持不动 第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 diff 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 startIndex 移动到了 B，新节点的startIndex 移动到了 B 第五次循环中，情形同第四次循环一样，因此 diff 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 startIndex移动到了 C，新节点的 startIndex 移动到了 F 新节点的 startIndex 已经大于 endIndex 了，需要创建 newStartIdx 和 newEndIdx之间的所有节点，也就是节点F，直接创建 F 节点对应的真实节点放到 B 节点后面 三、原理分析当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图 源码位置：src/core/vdom/patch.js 12345678910111213141516171819202122232425262728293031323334353637function patch(oldVnode, vnode, hydrating, removeOnly) &#123; if (isUndef(vnode)) &#123; // 没有新节点，直接执行destory钩子函数 if (isDef(oldVnode)) invokeDestroyHook(oldVnode) return &#125; let isInitialPatch = false const insertedVnodeQueue = [] if (isUndef(oldVnode)) &#123; isInitialPatch = true createElm(vnode, insertedVnodeQueue) // 没有旧节点，直接用新节点生成dom元素 &#125; else &#123; const isRealElement = isDef(oldVnode.nodeType) if (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123; // 判断旧节点和新节点自身一样，一致执行patchVnode patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly) &#125; else &#123; // 否则直接销毁及旧节点，根据新节点生成dom元素 if (isRealElement) &#123; if (oldVnode.nodeType === 1 &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) &#123; oldVnode.removeAttribute(SSR_ATTR) hydrating = true &#125; if (isTrue(hydrating)) &#123; if (hydrate(oldVnode, vnode, insertedVnodeQueue)) &#123; invokeInsertHook(vnode, insertedVnodeQueue, true) return oldVnode &#125; &#125; oldVnode = emptyNodeAt(oldVnode) &#125; return vnode.elm &#125; &#125;&#125; patch函数前两个参数位为oldVnode 和 Vnode ，分别代表新的节点和之前的旧节点，主要做了四个判断： 没有新节点，直接触发旧节点的destory钩子 没有旧节点，说明是页面刚开始初始化的时候，此时，根本不需要比较了，直接全是新建，所以只调用 createElm 旧节点和新节点自身一样，通过 sameVnode 判断节点是否一样，一样时，直接调用 patchVnode去处理这两个节点 旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点 下面主要讲的是patchVnode部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) &#123; // 如果新旧节点一致，什么都不做 if (oldVnode === vnode) &#123; return &#125; // 让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化 const elm = vnode.elm = oldVnode.elm // 异步占位符 if (isTrue(oldVnode.isAsyncPlaceholder)) &#123; if (isDef(vnode.asyncFactory.resolved)) &#123; hydrate(oldVnode.elm, vnode, insertedVnodeQueue) &#125; else &#123; vnode.isAsyncPlaceholder = true &#125; return &#125; // 如果新旧都是静态节点，并且具有相同的key // 当vnode是克隆节点或是v-once指令控制的节点时，只需要把oldVnode.elm和oldVnode.child都复制到vnode上 // 也不用再有其他操作 if (isTrue(vnode.isStatic) &amp;&amp; isTrue(oldVnode.isStatic) &amp;&amp; vnode.key === oldVnode.key &amp;&amp; (isTrue(vnode.isCloned) || isTrue(vnode.isOnce)) ) &#123; vnode.componentInstance = oldVnode.componentInstance return &#125; let i const data = vnode.data if (isDef(data) &amp;&amp; isDef(i = data.hook) &amp;&amp; isDef(i = i.prepatch)) &#123; i(oldVnode, vnode) &#125; const oldCh = oldVnode.children const ch = vnode.children if (isDef(data) &amp;&amp; isPatchable(vnode)) &#123; for (i = 0; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode) if (isDef(i = data.hook) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode) &#125; // 如果vnode不是文本节点或者注释节点 if (isUndef(vnode.text)) &#123; // 并且都有子节点 if (isDef(oldCh) &amp;&amp; isDef(ch)) &#123; // 并且子节点不完全一致，则调用updateChildren if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly) // 如果只有新的vnode有子节点 &#125; else if (isDef(ch)) &#123; if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, &#x27;&#x27;) // elm已经引用了老的dom节点，在老的dom节点上添加子节点 addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue) // 如果新vnode没有子节点，而vnode有子节点，直接删除老的oldCh &#125; else if (isDef(oldCh)) &#123; removeVnodes(elm, oldCh, 0, oldCh.length - 1) // 如果老节点是文本节点 &#125; else if (isDef(oldVnode.text)) &#123; nodeOps.setTextContent(elm, &#x27;&#x27;) &#125; // 如果新vnode和老vnode是文本节点或注释节点 // 但是vnode.text != oldVnode.text时，只需要更新vnode.elm的文本内容就可以 &#125; else if (oldVnode.text !== vnode.text) &#123; nodeOps.setTextContent(elm, vnode.text) &#125; if (isDef(data)) &#123; if (isDef(i = data.hook) &amp;&amp; isDef(i = i.postpatch)) i(oldVnode, vnode) &#125; &#125; patchVnode主要做了几个判断： 新节点是否是文本节点，如果是，则直接更新dom的文本内容为新节点的文本内容 新节点和旧节点如果都有子节点，则处理比较更新子节点 只有新节点有子节点，旧节点没有，那么不用比较了，所有节点都是全新的，所以直接全部新建就好了，新建是指创建出所有新DOM，并且添加进父节点 只有旧节点有子节点而新节点没有，说明更新后的页面，旧节点全部都不见了，那么要做的，就是把所有的旧节点删除，也就是直接把DOM 删除 子节点不完全一致，则调用updateChildren 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) &#123; let oldStartIdx = 0 // 旧头索引 let newStartIdx = 0 // 新头索引 let oldEndIdx = oldCh.length - 1 // 旧尾索引 let newEndIdx = newCh.length - 1 // 新尾索引 let oldStartVnode = oldCh[0] // oldVnode的第一个child let oldEndVnode = oldCh[oldEndIdx] // oldVnode的最后一个child let newStartVnode = newCh[0] // newVnode的第一个child let newEndVnode = newCh[newEndIdx] // newVnode的最后一个child let oldKeyToIdx, idxInOld, vnodeToMove, refElm // removeOnly is a special flag used only by &lt;transition-group&gt; // to ensure removed elements stay in correct relative positions // during leaving transitions const canMove = !removeOnly // 如果oldStartVnode和oldEndVnode重合，并且新的也都重合了，证明diff完了，循环结束 while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123; // 如果oldVnode的第一个child不存在 if (isUndef(oldStartVnode)) &#123; // oldStart索引右移 oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left // 如果oldVnode的最后一个child不存在 &#125; else if (isUndef(oldEndVnode)) &#123; // oldEnd索引左移 oldEndVnode = oldCh[--oldEndIdx] // oldStartVnode和newStartVnode是同一个节点 &#125; else if (sameVnode(oldStartVnode, newStartVnode)) &#123; // patch oldStartVnode和newStartVnode， 索引左移，继续循环 patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue) oldStartVnode = oldCh[++oldStartIdx] newStartVnode = newCh[++newStartIdx] // oldEndVnode和newEndVnode是同一个节点 &#125; else if (sameVnode(oldEndVnode, newEndVnode)) &#123; // patch oldEndVnode和newEndVnode，索引右移，继续循环 patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue) oldEndVnode = oldCh[--oldEndIdx] newEndVnode = newCh[--newEndIdx] // oldStartVnode和newEndVnode是同一个节点 &#125; else if (sameVnode(oldStartVnode, newEndVnode)) &#123; // Vnode moved right // patch oldStartVnode和newEndVnode patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue) // 如果removeOnly是false，则将oldStartVnode.eml移动到oldEndVnode.elm之后 canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm)) // oldStart索引右移，newEnd索引左移 oldStartVnode = oldCh[++oldStartIdx] newEndVnode = newCh[--newEndIdx] // 如果oldEndVnode和newStartVnode是同一个节点 &#125; else if (sameVnode(oldEndVnode, newStartVnode)) &#123; // Vnode moved left // patch oldEndVnode和newStartVnode patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue) // 如果removeOnly是false，则将oldEndVnode.elm移动到oldStartVnode.elm之前 canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm) // oldEnd索引左移，newStart索引右移 oldEndVnode = oldCh[--oldEndIdx] newStartVnode = newCh[++newStartIdx] // 如果都不匹配 &#125; else &#123; if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 尝试在oldChildren中寻找和newStartVnode的具有相同的key的Vnode idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx) // 如果未找到，说明newStartVnode是一个新的节点 if (isUndef(idxInOld)) &#123; // New element // 创建一个新Vnode createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm) // 如果找到了和newStartVnodej具有相同的key的Vnode，叫vnodeToMove &#125; else &#123; vnodeToMove = oldCh[idxInOld] /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !vnodeToMove) &#123; warn( &#x27;It seems there are duplicate keys that is causing an update error. &#x27; + &#x27;Make sure each v-for item has a unique key.&#x27; ) &#125; // 比较两个具有相同的key的新节点是否是同一个节点 //不设key，newCh和oldCh只会进行头尾两端的相互比较，设key后，除了头尾两端的比较外，还会从用key生成的对象oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom。 if (sameVnode(vnodeToMove, newStartVnode)) &#123; // patch vnodeToMove和newStartVnode patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue) // 清除 oldCh[idxInOld] = undefined // 如果removeOnly是false，则将找到的和newStartVnodej具有相同的key的Vnode，叫vnodeToMove.elm // 移动到oldStartVnode.elm之前 canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm) // 如果key相同，但是节点不相同，则创建一个新的节点 &#125; else &#123; // same key but different element. treat as new element createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm) &#125; &#125; // 右移 newStartVnode = newCh[++newStartIdx] &#125; &#125; while循环主要处理了以下五种情景： 当新老 VNode 节点的 start 相同时，直接 patchVnode ，同时新老 VNode 节点的开始索引都加 1 当新老 VNode 节点的 end相同时，同样直接 patchVnode ，同时新老 VNode 节点的结束索引都减 1 当老 VNode 节点的 start 和新 VNode 节点的 end 相同时，这时候在 patchVnode后，还需要将当前真实 dom 节点移动到 oldEndVnode 的后面，同时老 VNode 节点开始索引加 1，新 VNode 节点的结束索引减 1 当老 VNode 节点的 end 和新 VNode 节点的 start 相同时，这时候在 patchVnode后，还需要将当前真实 dom 节点移动到 oldStartVnode 的前面，同时老 VNode 节点结束索引减 1，新 VNode 节点的开始索引加 1 如果都不满足以上四种情形，那说明没有相同的节点可以复用，则会分为以下两种情况： 从旧的 VNode 为 key 值，对应 index 序列为 value 值的哈希表中找到与 newStartVnode 一致 key 的旧的 VNode 节点，再进行patchVnode，同时将这个真实 dom移动到 oldStartVnode 对应的真实 dom 的前面 调用 createElm 创建一个新的 dom 节点放到当前 newStartIdx 的位置 小结 当数据发生改变时，订阅者watcher就会调用patch给真实的DOM打补丁 通过isSameVnode进行判断，相同则调用patchVnode方法 patchVnode做了以下操作： 找到对应的真实dom，称为el 如果都有都有文本节点且不相等，将el文本节点设置为Vnode的文本节点 如果oldVnode有子节点而VNode没有，则删除el子节点 如果oldVnode没有子节点而VNode有，则将VNode的子节点真实化后添加到el 如果两者都有子节点，则执行updateChildren函数比较子节点 updateChildren主要做了以下操作： 设置新旧VNode的头尾指针 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用patchVnode进行patch重复流程、调用createElem创建一个新节点，从哈希表寻找 key一致的VNode 节点再分情况操作","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？","slug":"vue.Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？","date":"2022-07-26T02:22:43.197Z","updated":"2022-08-05T02:35:10.011Z","comments":true,"path":"2022/07/26/vue.Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue3.0%E9%87%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%20Proxy%20API%20%E6%9B%BF%E4%BB%A3%20defineProperty%20API%20%EF%BC%9F/","excerpt":"","text":"Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？ 一、Object.defineProperty定义：Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象 为什么能实现响应式通过defineProperty 两个属性，get及set get 属性的 getter 函数，当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值 set 属性的 setter 函数，当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined 下面通过代码展示： 定义一个响应式函数defineReactive 123456789101112131415161718function update() &#123; app.innerText = obj.foo&#125;function defineReactive(obj, key, val) &#123; Object.defineProperty(obj, key, &#123; get() &#123; console.log(`get $&#123;key&#125;:$&#123;val&#125;`); return val &#125;, set(newVal) &#123; if (newVal !== val) &#123; val = newVal update() &#125; &#125; &#125;)&#125; 调用defineReactive，数据发生变化触发update方法，实现数据响应式 12345const obj = &#123;&#125;defineReactive(obj, &#x27;foo&#x27;, &#x27;&#x27;)setTimeout(()=&gt;&#123; obj.foo = new Date().toLocaleTimeString()&#125;,1000) 在对象存在多个key情况下，需要进行遍历 12345678function observe(obj) &#123; if (typeof obj !== &#x27;object&#x27; || obj == null) &#123; return &#125; Object.keys(obj).forEach(key =&gt; &#123; defineReactive(obj, key, obj[key]) &#125;)&#125; 如果存在嵌套对象的情况，还需要在defineReactive中进行递归 123456789101112131415function defineReactive(obj, key, val) &#123; observe(val) Object.defineProperty(obj, key, &#123; get() &#123; console.log(`get $&#123;key&#125;:$&#123;val&#125;`); return val &#125;, set(newVal) &#123; if (newVal !== val) &#123; val = newVal update() &#125; &#125; &#125;)&#125; 当给key赋值为对象的时候，还需要在set属性中进行递归 123456set(newVal) &#123; if (newVal !== val) &#123; observe(newVal) // 新值是对象的情况 notifyUpdate() &#125;&#125; 上述例子能够实现对一个对象的基本响应式，但仍然存在诸多问题 现在对一个对象进行删除与添加属性操作，无法劫持到 1234567const obj = &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot;&#125;observe(obj)delete obj.foo // no okobj.jar = &#x27;xxx&#x27; // no ok 当我们对一个数组进行监听的时候，并不那么好使了 1234567const arrData = [1,2,3,4,5];arrData.forEach((val,index)=&gt;&#123; defineProperty(arrData,index,val)&#125;)arrData.push() // no okarrData.pop() // no okarrDate[0] = 99 // ok 可以看到数据的api无法劫持到，从而无法实现数据响应式， 所以在Vue2中，增加了set、delete API，并且对数组api方法进行一个重写 还有一个问题则是，如果存在深层的嵌套对象关系，需要深层的进行监听，造成了性能的极大问题 小结 检测不到对象属性的添加和删除 数组API方法无法监听到 需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题 二、proxyProxy的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性了 在ES6系列中，我们详细讲解过Proxy的使用，就不再述说了 下面通过代码进行展示： 定义一个响应式方法reactive 123456789101112131415161718192021222324function reactive(obj) &#123; if (typeof obj !== &#x27;object&#x27; &amp;&amp; obj != null) &#123; return obj &#125; // Proxy相当于在对象外层加拦截 const observed = new Proxy(obj, &#123; get(target, key, receiver) &#123; const res = Reflect.get(target, key, receiver) console.log(`获取$&#123;key&#125;:$&#123;res&#125;`) return res &#125;, set(target, key, value, receiver) &#123; const res = Reflect.set(target, key, value, receiver) console.log(`设置$&#123;key&#125;:$&#123;value&#125;`) return res &#125;, deleteProperty(target, key) &#123; const res = Reflect.deleteProperty(target, key) console.log(`删除$&#123;key&#125;:$&#123;res&#125;`) return res &#125; &#125;) return observed&#125; 测试一下简单数据的操作，发现都能劫持 1234567891011const state = reactive(&#123; foo: &#x27;foo&#x27;&#125;)// 1.获取state.foo // ok// 2.设置已存在属性state.foo = &#x27;fooooooo&#x27; // ok// 3.设置不存在属性state.dong = &#x27;dong&#x27; // ok// 4.删除属性delete state.dong // ok 再测试嵌套对象情况，这时候发现就不那么 OK 了 123456const state = reactive(&#123; bar: &#123; a: 1 &#125;&#125;)// 设置嵌套对象属性state.bar.a = 10 // no ok 如果要解决，需要在get之上再进行一层代理 12345678910111213function reactive(obj) &#123; if (typeof obj !== &#x27;object&#x27; &amp;&amp; obj != null) &#123; return obj &#125; // Proxy相当于在对象外层加拦截 const observed = new Proxy(obj, &#123; get(target, key, receiver) &#123; const res = Reflect.get(target, key, receiver) console.log(`获取$&#123;key&#125;:$&#123;res&#125;`) return isObject(res) ? reactive(res) : res &#125;, return observed&#125; 三、总结Object.defineProperty只能遍历对象属性进行劫持 12345678function observe(obj) &#123; if (typeof obj !== &#x27;object&#x27; || obj == null) &#123; return &#125; Object.keys(obj).forEach(key =&gt; &#123; defineReactive(obj, key, obj[key]) &#125;)&#125; Proxy直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的 123456789101112131415161718192021222324function reactive(obj) &#123; if (typeof obj !== &#x27;object&#x27; &amp;&amp; obj != null) &#123; return obj &#125; // Proxy相当于在对象外层加拦截 const observed = new Proxy(obj, &#123; get(target, key, receiver) &#123; const res = Reflect.get(target, key, receiver) console.log(`获取$&#123;key&#125;:$&#123;res&#125;`) return res &#125;, set(target, key, value, receiver) &#123; const res = Reflect.set(target, key, value, receiver) console.log(`设置$&#123;key&#125;:$&#123;value&#125;`) return res &#125;, deleteProperty(target, key) &#123; const res = Reflect.deleteProperty(target, key) console.log(`删除$&#123;key&#125;:$&#123;res&#125;`) return res &#125; &#125;) return observed&#125; Proxy可以直接监听数组的变化（push、shift、splice） 123const obj = [1,2,3]const proxtObj = reactive(obj)obj.psuh(4) // ok Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等，这是Object.defineProperty不具备的 正因为defineProperty自身的缺陷，导致Vue2在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外set、delete方法） 12345678910111213// 数组重写const originalProto = Array.prototypeconst arrayProto = Object.create(originalProto)[&#x27;push&#x27;, &#x27;pop&#x27;, &#x27;shift&#x27;, &#x27;unshift&#x27;, &#x27;splice&#x27;, &#x27;reverse&#x27;, &#x27;sort&#x27;].forEach(method =&gt; &#123; arrayProto[method] = function () &#123; originalProto[method].apply(this.arguments) dep.notice() &#125;&#125;);// set、deleteVue.set(obj,&#x27;bar&#x27;,&#x27;newbar&#x27;)Vue.delete(obj),&#x27;bar&#x27;) Proxy 不兼容IE，也没有 polyfill, defineProperty 能支持到IE9","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue3.0 性能提升主要是通过哪几方面体现的？","slug":"vue.Vue3.0 性能提升主要是通过哪几方面体现的？","date":"2022-07-26T02:22:43.196Z","updated":"2022-08-05T02:35:00.067Z","comments":true,"path":"2022/07/26/vue.Vue3.0 性能提升主要是通过哪几方面体现的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue3.0%20%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E4%B8%BB%E8%A6%81%E6%98%AF%E9%80%9A%E8%BF%87%E5%93%AA%E5%87%A0%E6%96%B9%E9%9D%A2%E4%BD%93%E7%8E%B0%E7%9A%84%EF%BC%9F/","excerpt":"","text":"Vue3.0 性能提升主要是通过哪几方面体现的？ 一、编译阶段回顾Vue2，我们知道每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把用到的数据property记录为依赖，当依赖发生改变，触发setter，则会通知watcher，从而使关联的组件重新渲染 试想一下，一个组件结构如下图 12345678910&lt;template&gt; &lt;div id=&quot;content&quot;&gt; &lt;p class=&quot;text&quot;&gt;静态文本&lt;/p&gt; &lt;p class=&quot;text&quot;&gt;静态文本&lt;/p&gt; &lt;p class=&quot;text&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;p class=&quot;text&quot;&gt;静态文本&lt;/p&gt; ... &lt;p class=&quot;text&quot;&gt;静态文本&lt;/p&gt; &lt;/div&gt;&lt;/template&gt; 可以看到，组件内部只有一个动态节点，剩余一堆都是静态节点，所以这里很多 diff 和遍历其实都是不需要的，造成性能浪费 因此，Vue3在编译阶段，做了进一步优化。主要有如下： diff算法优化 静态提升 事件监听缓存 SSR优化 diff算法优化vue3在diff算法中相比vue2增加了静态标记 关于这个静态标记，其作用是为了会发生变化的地方添加一个flag标记，下次发生变化的时候直接找该地方进行比较 下图这里，已经标记静态节点的p标签在diff过程中则不会比较，把性能进一步提高 关于静态类型枚举如下 123456789101112131415export const enum PatchFlags &#123; TEXT = 1,// 动态的文本节点 CLASS = 1 &lt;&lt; 1, // 2 动态的 class STYLE = 1 &lt;&lt; 2, // 4 动态的 style PROPS = 1 &lt;&lt; 3, // 8 动态属性，不包括类名和样式 FULL_PROPS = 1 &lt;&lt; 4, // 16 动态 key，当 key 变化时需要完整的 diff 算法做比较 HYDRATE_EVENTS = 1 &lt;&lt; 5, // 32 表示带有事件监听器的节点 STABLE_FRAGMENT = 1 &lt;&lt; 6, // 64 一个不会改变子节点顺序的 Fragment KEYED_FRAGMENT = 1 &lt;&lt; 7, // 128 带有 key 属性的 Fragment UNKEYED_FRAGMENT = 1 &lt;&lt; 8, // 256 子节点没有 key 的 Fragment NEED_PATCH = 1 &lt;&lt; 9, // 512 DYNAMIC_SLOTS = 1 &lt;&lt; 10, // 动态 solt HOISTED = -1, // 特殊标志是负整数表示永远不会用作 diff BAIL = -2 // 一个特殊的标志，指代差异算法&#125; 静态提升Vue3中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用 这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用 123&lt;span&gt;你好&lt;/span&gt;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt; 没有做静态提升之前 123456export function render(_ctx, _cache, $props, $setup, $data, $options) &#123; return (_openBlock(), _createBlock(_Fragment, null, [ _createVNode(&quot;span&quot;, null, &quot;你好&quot;), _createVNode(&quot;div&quot;, null, _toDisplayString(_ctx.message), 1 /* TEXT */) ], 64 /* STABLE_FRAGMENT */))&#125; 做了静态提升之后 12345678910const _hoisted_1 = /*#__PURE__*/_createVNode(&quot;span&quot;, null, &quot;你好&quot;, -1 /* HOISTED */)export function render(_ctx, _cache, $props, $setup, $data, $options) &#123; return (_openBlock(), _createBlock(_Fragment, null, [ _hoisted_1, _createVNode(&quot;div&quot;, null, _toDisplayString(_ctx.message), 1 /* TEXT */) ], 64 /* STABLE_FRAGMENT */))&#125;// Check the console for the AST 静态内容_hoisted_1被放置在render 函数外，每次渲染的时候只要取 _hoisted_1 即可 同时 _hoisted_1 被打上了 PatchFlag ，静态标记值为 -1 ，特殊标志是负整数表示永远不会用于 Diff 事件监听缓存默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化 123&lt;div&gt; &lt;button @click = &#x27;onClick&#x27;&gt;点我&lt;/button&gt;&lt;/div&gt; 没开启事件监听器缓存 123456export const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) &#123; return (_openBlock(), _createBlock(&quot;div&quot;, null, [ _createVNode(&quot;button&quot;, &#123; onClick: _ctx.onClick &#125;, &quot;点我&quot;, 8 /* PROPS */, [&quot;onClick&quot;]) // PROPS=1&lt;&lt;3,// 8 //动态属性，但不包含类名和样式 ]))&#125;) 开启事件侦听器缓存后 1234567export function render(_ctx, _cache, $props, $setup, $data, $options) &#123; return (_openBlock(), _createBlock(&quot;div&quot;, null, [ _createVNode(&quot;button&quot;, &#123; onClick: _cache[1] || (_cache[1] = (...args) =&gt; (_ctx.onClick(...args))) &#125;, &quot;点我&quot;) ]))&#125; 上述发现开启了缓存后，没有了静态标记。也就是说下次diff算法的时候直接使用 SSR优化当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染 123456789div&gt; &lt;div&gt; &lt;span&gt;你好&lt;/span&gt; &lt;/div&gt; ... // 很多个静态属性 &lt;div&gt; &lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; 编译后 1234567891011import &#123; mergeProps as _mergeProps &#125; from &quot;vue&quot;import &#123; ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate &#125; from &quot;@vue/server-renderer&quot;export function ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) &#123; const _cssVars = &#123; style: &#123; color: _ctx.color &#125;&#125; _push(`&lt;div$&#123; _ssrRenderAttrs(_mergeProps(_attrs, _cssVars)) &#125;&gt;&lt;div&gt;&lt;span&gt;你好&lt;/span&gt;...&lt;div&gt;&lt;span&gt;你好&lt;/span&gt;&lt;div&gt;&lt;span&gt;$&#123; _ssrInterpolate(_ctx.message) &#125;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;`)&#125; 二、源码体积相比Vue2，Vue3整体体积变小了，除了移出一些不常用的API，再重要的是Tree shanking 任何一个函数，如ref、reavtived、computed等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小 123456789101112131415161718import &#123; computed, defineComponent, ref &#125; from &#x27;vue&#x27;;export default defineComponent(&#123; setup(props, context) &#123; const age = ref(18) let state = reactive(&#123; name: &#x27;test&#x27; &#125;) const readOnlyAge = computed(() =&gt; age.value++) // 19 return &#123; age, state, readOnlyAge &#125; &#125;&#125;); 三、响应式系统vue2中采用 defineProperty来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加getter和setter，实现响应式 vue3采用proxy重写了响应式系统，因为proxy可以对整个对象进行监听，所以不需要深度遍历 可以监听动态属性的添加 可以监听到数组的索引和数组length属性 可以监听删除属性 关于这两个 API 具体的不同，我们下篇文章会进行一个更加详细的介绍","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对Vue生命周期的理解?","slug":"vue.说说你对Vue生命周期的理解_","date":"2022-07-26T02:22:43.195Z","updated":"2022-08-05T02:33:58.590Z","comments":true,"path":"2022/07/26/vue.说说你对Vue生命周期的理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说你对Vue生命周期的理解? 一、生命周期是什么生命周期（Life Cycle）的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”（Cradle-to-Grave）的整个过程 在Vue中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程 我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作 PS：在Vue生命周期钩子会自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算 这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos()) 二、生命周期有哪些Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期 生命周期 描述 beforeCreate 组件实例被创建之初 created 组件实例已经完全创建 beforeMount 组件挂载之前 mounted 组件挂载到实例上去之后 beforeUpdate 组件数据发生变化，更新之前 updated 数据数据更新之后 beforeDestroy 组件实例销毁之前 destroyed 组件实例销毁之后 activated keep-alive 缓存的组件激活时 deactivated keep-alive 缓存的组件停用时调用 errorCaptured 捕获一个来自子孙组件的错误时被调用 三、生命周期整体流程Vue生命周期流程图 具体分析beforeCreate -&gt; created 初始化vue实例，进行数据观测 created 完成数据观测，属性与方法的运算，watch、event事件回调的配置 可调用methods中的方法，访问和修改data数据触发响应式渲染dom，可通过computed和watch完成数据计算 此时vm.$el 并没有被创建 created -&gt; beforeMount 判断是否存在el选项，若不存在则停止编译，直到调用vm.$mount(el)才会继续编译 优先级：render &gt; template &gt; outerHTML vm.el获取到的是挂载DOM的 beforeMount 在此阶段可获取到vm.el 此阶段vm.el虽已完成DOM初始化，但并未挂载在el选项上 beforeMount -&gt; mounted 此阶段vm.el完成挂载，vm.$el生成的DOM替换了el选项所对应的DOM mounted vm.el已完成DOM的挂载与渲染，此刻打印vm.$el，发现之前的挂载点及内容已被替换成新的DOM beforeUpdate 更新的数据必须是被渲染在模板上的（el、template、render之一） 此时view层还未更新 若在beforeUpdate中再次修改数据，不会再次触发更新方法 updated 完成view层的更新 若在updated中再次修改数据，会再次触发更新方法（beforeUpdate、updated） beforeDestroy 实例被销毁前调用，此时实例属性与方法仍可访问 destroyed 完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器 并不能清除DOM，仅仅销毁实例 使用场景分析 生命周期 描述 beforeCreate 执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务 created 组件初始化完毕，各种数据可以使用，常用于异步数据获取 beforeMount 未执行渲染、更新，dom未创建 mounted 初始化结束，dom已创建，可用于获取访问数据和dom元素 beforeUpdate 更新前，可用于获取更新前各种状态 updated 更新后，所有状态已是最新 beforeDestroy 销毁前，可用于一些定时器或订阅的取消 destroyed 组件已销毁，作用同上 四、题外话：数据请求在created和mouted的区别created是在组件实例一旦创建完成的时候立刻调用，这时候页面dom节点并未生成 mounted是在页面dom节点渲染完毕之后就立刻执行的 触发时机上created是比mounted要更早的 两者相同点：都能拿到实例对象的属性和方法 讨论这个问题本质就是触发的时机，放在mounted请求有可能导致页面闪动（页面dom结构已经生成），但如果在页面加载前完成则不会出现此情况 建议：放在create生命周期当中","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue中的$nextTick怎么理解?","slug":"vue.Vue中的$nextTick怎么理解_","date":"2022-07-26T02:22:43.194Z","updated":"2022-08-05T02:35:54.013Z","comments":true,"path":"2022/07/26/vue.Vue中的$nextTick怎么理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E4%B8%AD%E7%9A%84$nextTick%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3_/","excerpt":"","text":"Vue中的$nextTick怎么理解? 一、NextTick是什么官方对其的定义 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM 什么意思呢？ 我们可以理解成，Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新 举例一下 Html结构 1&lt;div id=&quot;app&quot;&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt; 构建一个vue实例 123456const vm = new Vue(&#123; el: &#x27;#app&#x27;, data: &#123; message: &#x27;原始值&#x27; &#125;&#125;) 修改message 123this.message = &#x27;修改后的值1&#x27;this.message = &#x27;修改后的值2&#x27;this.message = &#x27;修改后的值3&#x27; 这时候想获取页面最新的DOM节点，却发现获取到的是旧值 1console.log(vm.$el.textContent) // 原始值 这是因为message数据在发现变化的时候，vue并不会立刻去更新Dom，而是将修改数据的操作放在了一个异步操作队列中 如果我们一直修改相同数据，异步操作队列还会进行去重 等待同一事件循环中的所有数据变化完成之后，会将队列中的事件拿来进行处理，进行DOM的更新 为什么要有nexttick举个例子 1234&#123;&#123;num&#125;&#125;for(let i=0; i&lt;100000; i++)&#123; num = i&#125; 如果没有 nextTick 更新机制，那么 num 每次更新值都会触发视图更新(上面这段代码也就是会更新10万次视图)，有了nextTick机制，只需要更新一次，所以nextTick本质是一种优化策略 二、使用场景如果想要在修改数据后立刻得到更新后的DOM结构，可以使用Vue.nextTick() 第一个参数为：回调函数（可以获取最近的DOM结构） 第二个参数为：执行函数上下文 12345678// 修改数据vm.message = &#x27;修改后的值&#x27;// DOM 还没有更新console.log(vm.$el.textContent) // 原始的值Vue.nextTick(function () &#123; // DOM 更新了 console.log(vm.$el.textContent) // 修改后的值&#125;) 组件内使用 vm.$nextTick() 实例方法只需要通过this.$nextTick()，并且回调函数中的 this 将自动绑定到当前的 Vue 实例上 12345this.message = &#x27;修改后的值&#x27;console.log(this.$el.textContent) // =&gt; &#x27;原始的值&#x27;this.$nextTick(function () &#123; console.log(this.$el.textContent) // =&gt; &#x27;修改后的值&#x27;&#125;) $nextTick() 会返回一个 Promise 对象，可以是用async/await完成相同作用的事情 1234this.message = &#x27;修改后的值&#x27;console.log(this.$el.textContent) // =&gt; &#x27;原始的值&#x27;await this.$nextTick()console.log(this.$el.textContent) // =&gt; &#x27;修改后的值&#x27; 三、实现原理源码位置：/src/core/util/next-tick.js callbacks也就是异步操作队列 callbacks新增回调函数后又执行了timerFunc函数，pending是用来标识同一个时间只能执行一次 123456789101112131415161718192021222324252627282930export function nextTick(cb?: Function, ctx?: Object) &#123; let _resolve; // cb 回调函数会经统一处理压入 callbacks 数组 callbacks.push(() =&gt; &#123; if (cb) &#123; // 给 cb 回调函数执行加上了 try-catch 错误处理 try &#123; cb.call(ctx); &#125; catch (e) &#123; handleError(e, ctx, &#x27;nextTick&#x27;); &#125; &#125; else if (_resolve) &#123; _resolve(ctx); &#125; &#125;); // 执行异步延迟函数 timerFunc if (!pending) &#123; pending = true; timerFunc(); &#125; // 当 nextTick 没有传入函数参数的时候，返回一个 Promise 化的调用 if (!cb &amp;&amp; typeof Promise !== &#x27;undefined&#x27;) &#123; return new Promise(resolve =&gt; &#123; _resolve = resolve; &#125;); &#125;&#125; timerFunc函数定义，这里是根据当前环境支持什么方法则确定调用哪个，分别有： Promise.then、MutationObserver、setImmediate、setTimeout 通过上面任意一种方法，进行降级操作 123456789101112131415161718192021222324252627282930313233343536export let isUsingMicroTask = falseif (typeof Promise !== &#x27;undefined&#x27; &amp;&amp; isNative(Promise)) &#123; //判断1：是否原生支持Promise const p = Promise.resolve() timerFunc = () =&gt; &#123; p.then(flushCallbacks) if (isIOS) setTimeout(noop) &#125; isUsingMicroTask = true&#125; else if (!isIE &amp;&amp; typeof MutationObserver !== &#x27;undefined&#x27; &amp;&amp; ( isNative(MutationObserver) || MutationObserver.toString() === &#x27;[object MutationObserverConstructor]&#x27;)) &#123; //判断2：是否原生支持MutationObserver let counter = 1 const observer = new MutationObserver(flushCallbacks) const textNode = document.createTextNode(String(counter)) observer.observe(textNode, &#123; characterData: true &#125;) timerFunc = () =&gt; &#123; counter = (counter + 1) % 2 textNode.data = String(counter) &#125; isUsingMicroTask = true&#125; else if (typeof setImmediate !== &#x27;undefined&#x27; &amp;&amp; isNative(setImmediate)) &#123; //判断3：是否原生支持setImmediate timerFunc = () =&gt; &#123; setImmediate(flushCallbacks) &#125;&#125; else &#123; //判断4：上面都不行，直接用setTimeout timerFunc = () =&gt; &#123; setTimeout(flushCallbacks, 0) &#125;&#125; 无论是微任务还是宏任务，都会放到flushCallbacks使用 这里将callbacks里面的函数复制一份，同时callbacks置空 依次执行callbacks里面的函数 12345678function flushCallbacks () &#123; pending = false const copies = callbacks.slice(0) callbacks.length = 0 for (let i = 0; i &lt; copies.length; i++) &#123; copies[i]() &#125;&#125; 小结： 把回调函数放入callbacks等待执行 将执行函数放到微任务或者宏任务中 事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue中的v-show和v-if怎么理解？","slug":"vue.Vue中的v-show和v-if怎么理解？","date":"2022-07-26T02:22:43.193Z","updated":"2022-08-05T02:36:07.693Z","comments":true,"path":"2022/07/26/vue.Vue中的v-show和v-if怎么理解？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E4%B8%AD%E7%9A%84v-show%E5%92%8Cv-if%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%EF%BC%9F/","excerpt":"","text":"Vue中的v-show和v-if怎么理解？ 一、v-show与v-if的共同点我们都知道在 vue 中 v-show 与 v-if 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示 在用法上也是相同的 12&lt;Model v-show=&quot;isShow&quot; /&gt;&lt;Model v-if=&quot;isShow&quot; /&gt; 当表达式为true的时候，都会占据页面的位置 当表达式都为false时，都不会占据页面位置 二、v-show与v-if的区别 控制手段不同 编译过程不同 编译条件不同 性能消耗不同 控制手段：v-show隐藏则是为该元素添加css--display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除 编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换 编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染 v-show 由false变为true的时候不会触发组件的生命周期 v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestroy、destroyed方法 性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗 三、v-show与v-if原理分析具体解析流程这里不展开讲，大致流程如下 将模板template转为ast结构的JS对象 用ast得到的JS对象拼装render和staticRenderFns函数 render和staticRenderFns函数被调用后生成虚拟VNODE节点，该节点包含创建DOM节点所需信息 vm.patch函数通过虚拟DOM算法利用VNODE节点创建真实DOM节点 v-show原理不管初始条件是什么，元素总是会被渲染 我们看一下在vue中是如何实现的 代码很好理解，有transition就执行transition，没有就直接设置display属性 12345678910111213141516171819202122// https://github.com/vuejs/vue-next/blob/3cd30c5245da0733f9eb6f29d220f39c46518162/packages/runtime-dom/src/directives/vShow.tsexport const vShow: ObjectDirective&lt;VShowElement&gt; = &#123; beforeMount(el, &#123; value &#125;, &#123; transition &#125;) &#123; el._vod = el.style.display === &#x27;none&#x27; ? &#x27;&#x27; : el.style.display if (transition &amp;&amp; value) &#123; transition.beforeEnter(el) &#125; else &#123; setDisplay(el, value) &#125; &#125;, mounted(el, &#123; value &#125;, &#123; transition &#125;) &#123; if (transition &amp;&amp; value) &#123; transition.enter(el) &#125; &#125;, updated(el, &#123; value, oldValue &#125;, &#123; transition &#125;) &#123; // ... &#125;, beforeUnmount(el, &#123; value &#125;) &#123; setDisplay(el, value) &#125;&#125; v-if原理v-if在实现上比v-show要复杂的多，因为还有else else-if 等条件需要处理，这里我们也只摘抄源码中处理 v-if 的一小部分 返回一个node节点，render函数通过表达式的值来决定是否生成DOM 1234567891011121314151617181920212223242526// https://github.com/vuejs/vue-next/blob/cdc9f336fd/packages/compiler-core/src/transforms/vIf.tsexport const transformIf = createStructuralDirectiveTransform( /^(if|else|else-if)$/, (node, dir, context) =&gt; &#123; return processIf(node, dir, context, (ifNode, branch, isRoot) =&gt; &#123; // ... return () =&gt; &#123; if (isRoot) &#123; ifNode.codegenNode = createCodegenNodeForBranch( branch, key, context ) as IfConditionalExpression &#125; else &#123; // attach this branch&#x27;s codegen node to the v-if root. const parentCondition = getParentCondition(ifNode.codegenNode!) parentCondition.alternate = createCodegenNodeForBranch( branch, key + ifNode.branches.length - 1, context ) &#125; &#125; &#125;) &#125;) 四、v-show与v-if的使用场景v-if 与 v-show 都能控制dom元素在页面的显示 v-if 相比 v-show 开销更大（直接操作dom节点增加与删除） 如果需要非常频繁地切换，则使用 v-show 较好 如果在运行时条件很少改变，则使用 v-if 较好","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"为什么data属性是一个函数而不是一个对象？","slug":"vue.为什么data属性是一个函数而不是一个对象？","date":"2022-07-26T02:22:43.193Z","updated":"2022-08-05T02:34:26.866Z","comments":true,"path":"2022/07/26/vue.为什么data属性是一个函数而不是一个对象？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%B8%BA%E4%BB%80%E4%B9%88data%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%9F/","excerpt":"","text":"为什么data属性是一个函数而不是一个对象？ 一、实例和组件定义data的区别vue实例的时候定义data属性既可以是一个对象，也可以是一个函数 12345678910111213const app = new Vue(&#123; el:&quot;#app&quot;, // 对象格式 data:&#123; foo:&quot;foo&quot; &#125;, // 函数格式 data()&#123; return &#123; foo:&quot;foo&quot; &#125; &#125;&#125;) 组件中定义data属性，只能是一个函数 如果为组件data直接定义为一个对象 123456Vue.component(&#x27;component1&#x27;,&#123; template:`&lt;div&gt;组件&lt;/div&gt;`, data:&#123; foo:&quot;foo&quot; &#125;&#125;) 则会得到警告信息 警告说明：返回的data应该是一个函数在每一个组件实例中 二、组件data定义函数与对象的区别上面讲到组件data必须是一个函数，不知道大家有没有思考过这是为什么呢？ 在我们定义好一个组件的时候，vue最终都会通过Vue.extend()构成组件实例 这里我们模仿组件构造函数，定义data属性，采用对象的形式 123456function Component()&#123; &#125;Component.prototype.data = &#123; count : 0&#125; 创建两个组件实例 12const componentA = new Component()const componentB = new Component() 修改componentA组件data属性的值，componentB中的值也发生了改变 123console.log(componentB.data.count) // 0componentA.data.count = 1console.log(componentB.data.count) // 1 产生这样的原因这是两者共用了同一个内存地址，componentA修改的内容，同样对componentB产生了影响 如果我们采用函数的形式，则不会出现这种情况（函数返回的对象内存地址并不相同） 12345678function Component()&#123; this.data = this.data()&#125;Component.prototype.data = function ()&#123; return &#123; count : 0 &#125;&#125; 修改componentA组件data属性的值，componentB中的值不受影响 123console.log(componentB.data.count) // 0componentA.data.count = 1console.log(componentB.data.count) // 0 vue组件可能会有很多个实例，采用函数返回一个全新data形式，使每个实例对象的数据不会受到其他实例对象数据的污染 三、原理分析首先可以看看vue初始化data的代码，data的定义可以是函数也可以是对象 源码位置：/vue-dev/src/core/instance/state.js 1234567function initData (vm: Component) &#123; let data = vm.$options.data data = vm._data = typeof data === &#x27;function&#x27; ? getData(data, vm) : data || &#123;&#125; ...&#125; data既能是object也能是function，那为什么还会出现上文警告呢？ 别急，继续看下文 组件在创建的时候，会进行选项的合并 源码位置：/vue-dev/src/core/util/options.js 自定义组件会进入mergeOptions进行选项合并 1234567891011121314151617Vue.prototype._init = function (options?: Object) &#123; ... // merge options if (options &amp;&amp; options._isComponent) &#123; // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options) &#125; else &#123; vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor), options || &#123;&#125;, vm ) &#125; ... &#125; 定义data会进行数据校验 源码位置：/vue-dev/src/core/instance/init.js 这时候vm实例为undefined，进入if判断，若data类型不是function，则出现警告提示 123456789101112131415161718192021strats.data = function ( parentVal: any, childVal: any, vm?: Component): ?Function &#123; if (!vm) &#123; if (childVal &amp;&amp; typeof childVal !== &quot;function&quot;) &#123; process.env.NODE_ENV !== &quot;production&quot; &amp;&amp; warn( &#x27;The &quot;data&quot; option should be a function &#x27; + &quot;that returns a per-instance value in component &quot; + &quot;definitions.&quot;, vm ); return parentVal; &#125; return mergeDataOrFn(parentVal, childVal); &#125; return mergeDataOrFn(parentVal, childVal, vm);&#125;; 四、总结 根实例对象data可以是对象也可以是函数（根实例是单例），不会产生数据污染情况 组件实例对象data必须为函数，目的是为了防止多个组件实例对象之间共用一个data，产生数据污染。采用函数的形式，initData时会将其作为工厂函数都会返回全新data对象","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue实例挂载的过程中发生了什么?","slug":"vue.Vue实例挂载的过程中发生了什么_","date":"2022-07-26T02:22:43.192Z","updated":"2022-08-05T02:35:26.035Z","comments":true,"path":"2022/07/26/vue.Vue实例挂载的过程中发生了什么_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E5%AE%9E%E4%BE%8B%E6%8C%82%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88_/","excerpt":"","text":"Vue实例挂载的过程中发生了什么? 一、思考我们都听过知其然知其所以然这句话 那么不知道大家是否思考过new Vue()这个过程中究竟做了些什么？ 过程中是如何完成数据的绑定，又是如何将数据渲染到视图的等等 一、分析首先找到vue的构造函数 源码位置：src\\core\\instance\\index.js 12345678function Vue (options) &#123; if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !(this instanceof Vue) ) &#123; warn(&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;) &#125; this._init(options)&#125; options是用户传递过来的配置项，如data、methods等常用的方法 vue构建函数调用_init方法，但我们发现本文件中并没有此方法，但仔细可以看到文件下方定定义了很多初始化方法 12345initMixin(Vue); // 定义 _initstateMixin(Vue); // 定义 $set $get $delete $watch 等eventsMixin(Vue); // 定义事件 $on $once $off $emitlifecycleMixin(Vue);// 定义 _update $forceUpdate $destroyrenderMixin(Vue); // 定义 _render 返回虚拟dom 首先可以看initMixin方法，发现该方法在Vue原型上定义了_init方法 源码位置：src\\core\\instance\\init.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162Vue.prototype._init = function (options?: Object) &#123; const vm: Component = this // a uid vm._uid = uid++ let startTag, endTag /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123; startTag = `vue-perf-start:$&#123;vm._uid&#125;` endTag = `vue-perf-end:$&#123;vm._uid&#125;` mark(startTag) &#125; // a flag to avoid this being observed vm._isVue = true // merge options // 合并属性，判断初始化的是否是组件，这里合并主要是 mixins 或 extends 的方法 if (options &amp;&amp; options._isComponent) &#123; // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options) &#125; else &#123; // 合并vue属性 vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor), options || &#123;&#125;, vm ) &#125; /* istanbul ignore else */ if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; // 初始化proxy拦截器 initProxy(vm) &#125; else &#123; vm._renderProxy = vm &#125; // expose real self vm._self = vm // 初始化组件生命周期标志位 initLifecycle(vm) // 初始化组件事件侦听 initEvents(vm) // 初始化渲染方法 initRender(vm) callHook(vm, &#x27;beforeCreate&#x27;) // 初始化依赖注入内容，在初始化data、props之前 initInjections(vm) // resolve injections before data/props // 初始化props/data/method/watch/methods initState(vm) initProvide(vm) // resolve provide after data/props callHook(vm, &#x27;created&#x27;) /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123; vm._name = formatComponentName(vm, false) mark(endTag) measure(`vue $&#123;vm._name&#125; init`, startTag, endTag) &#125; // 挂载元素 if (vm.$options.el) &#123; vm.$mount(vm.$options.el) &#125; &#125; 仔细阅读上面的代码，我们得到以下结论： 在调用beforeCreate之前，数据初始化并未完成，像data、props这些属性无法访问到 到了created的时候，数据已经初始化完成，能够访问data、props这些属性，但这时候并未完成dom的挂载，因此无法访问到dom元素 挂载方法是调用vm.$mount方法 initState方法是完成props/data/method/watch/methods的初始化 源码位置：src\\core\\instance\\state.js 12345678910111213141516171819export function initState (vm: Component) &#123; // 初始化组件的watcher列表 vm._watchers = [] const opts = vm.$options // 初始化props if (opts.props) initProps(vm, opts.props) // 初始化methods方法 if (opts.methods) initMethods(vm, opts.methods) if (opts.data) &#123; // 初始化data initData(vm) &#125; else &#123; observe(vm._data = &#123;&#125;, true /* asRootData */) &#125; if (opts.computed) initComputed(vm, opts.computed) if (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123; initWatch(vm, opts.watch) &#125;&#125; 我们和这里主要看初始化data的方法为initData，它与initState在同一文件上 12345678910111213141516171819202122232425262728293031323334353637383940414243444546function initData (vm: Component) &#123; let data = vm.$options.data // 获取到组件上的data data = vm._data = typeof data === &#x27;function&#x27; ? getData(data, vm) : data || &#123;&#125; if (!isPlainObject(data)) &#123; data = &#123;&#125; process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn( &#x27;data functions should return an object:\\n&#x27; + &#x27;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;, vm ) &#125; // proxy data on instance const keys = Object.keys(data) const props = vm.$options.props const methods = vm.$options.methods let i = keys.length while (i--) &#123; const key = keys[i] if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; // 属性名不能与方法名重复 if (methods &amp;&amp; hasOwn(methods, key)) &#123; warn( `Method &quot;$&#123;key&#125;&quot; has already been defined as a data property.`, vm ) &#125; &#125; // 属性名不能与state名称重复 if (props &amp;&amp; hasOwn(props, key)) &#123; process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn( `The data property &quot;$&#123;key&#125;&quot; is already declared as a prop. ` + `Use prop default value instead.`, vm ) &#125; else if (!isReserved(key)) &#123; // 验证key值的合法性 // 将_data中的数据挂载到组件vm上,这样就可以通过this.xxx访问到组件上的数据 proxy(vm, `_data`, key) &#125; &#125; // observe data // 响应式监听data是数据的变化 observe(data, true /* asRootData */)&#125; 仔细阅读上面的代码，我们可以得到以下结论： 初始化顺序：props、methods、data data定义的时候可选择函数形式或者对象形式（组件只能为函数形式） 关于数据响应式在这就不展开详细说明 上文提到挂载方法是调用vm.$mount方法 源码位置：/src/platforms/web/entry-runtime-with-compiler.js#L18 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean): Component &#123; // 获取或查询元素 el = el &amp;&amp; query(el) /* istanbul ignore if */ // vue 不允许直接挂载到body或页面文档上 if (el === document.body || el === document.documentElement) &#123; process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn( `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.` ) return this &#125; const options = this.$options // resolve template/el and convert to render function if (!options.render) &#123; let template = options.template // 存在template模板，解析vue模板文件 if (template) &#123; if (typeof template === &#x27;string&#x27;) &#123; if (template.charAt(0) === &#x27;#&#x27;) &#123; template = idToTemplate(template) /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !template) &#123; warn( `Template element not found or is empty: $&#123;options.template&#125;`, this ) &#125; &#125; &#125; else if (template.nodeType) &#123; template = template.innerHTML &#125; else &#123; if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; warn(&#x27;invalid template option:&#x27; + template, this) &#125; return this &#125; &#125; else if (el) &#123; // 通过选择器获取元素内容 template = getOuterHTML(el) &#125; if (template) &#123; /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123; mark(&#x27;compile&#x27;) &#125; /** * 1.将temmplate解析ast tree * 2.将ast tree转换成render语法字符串 * 3.生成render方法 */ const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123; outputSourceRange: process.env.NODE_ENV !== &#x27;production&#x27;, shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments &#125;, this) options.render = render options.staticRenderFns = staticRenderFns /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123; mark(&#x27;compile end&#x27;) measure(`vue $&#123;this._name&#125; compile`, &#x27;compile&#x27;, &#x27;compile end&#x27;) &#125; &#125; &#125; return mount.call(this, el, hydrating)&#125; 阅读上面代码，我们能得到以下结论： 不要将根元素放到body或者html上 可以在对象中定义template/render或者直接使用template、el表示元素选择器 最终都会解析成render函数，调用compileToFunctions，会将template解析成render函数 对template的解析步骤大致分为以下几步： 将html文档片段解析成ast描述符 将ast描述符解析成字符串 生成render函数 生成render函数，挂载到vm上后，会再次调用mount方法 源码位置：src\\platforms\\web\\runtime\\index.js 123456789// public mount methodVue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean): Component &#123; el = el &amp;&amp; inBrowser ? query(el) : undefined // 渲染组件 return mountComponent(this, el, hydrating)&#125; 调用mountComponent渲染组件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980export function mountComponent ( vm: Component, el: ?Element, hydrating?: boolean): Component &#123; vm.$el = el // 如果没有获取解析的render函数，则会抛出警告 // render是解析模板文件生成的 if (!vm.$options.render) &#123; vm.$options.render = createEmptyVNode if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; /* istanbul ignore if */ if ((vm.$options.template &amp;&amp; vm.$options.template.charAt(0) !== &#x27;#&#x27;) || vm.$options.el || el) &#123; warn( &#x27;You are using the runtime-only build of Vue where the template &#x27; + &#x27;compiler is not available. Either pre-compile the templates into &#x27; + &#x27;render functions, or use the compiler-included build.&#x27;, vm ) &#125; else &#123; // 没有获取到vue的模板文件 warn( &#x27;Failed to mount component: template or render function not defined.&#x27;, vm ) &#125; &#125; &#125; // 执行beforeMount钩子 callHook(vm, &#x27;beforeMount&#x27;) let updateComponent /* istanbul ignore if */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123; updateComponent = () =&gt; &#123; const name = vm._name const id = vm._uid const startTag = `vue-perf-start:$&#123;id&#125;` const endTag = `vue-perf-end:$&#123;id&#125;` mark(startTag) const vnode = vm._render() mark(endTag) measure(`vue $&#123;name&#125; render`, startTag, endTag) mark(startTag) vm._update(vnode, hydrating) mark(endTag) measure(`vue $&#123;name&#125; patch`, startTag, endTag) &#125; &#125; else &#123; // 定义更新函数 updateComponent = () =&gt; &#123; // 实际调⽤是在lifeCycleMixin中定义的_update和renderMixin中定义的_render vm._update(vm._render(), hydrating) &#125; &#125; // we set this to vm._watcher inside the watcher&#x27;s constructor // since the watcher&#x27;s initial patch may call $forceUpdate (e.g. inside child // component&#x27;s mounted hook), which relies on vm._watcher being already defined // 监听当前组件状态，当有数据变化时，更新组件 new Watcher(vm, updateComponent, noop, &#123; before () &#123; if (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123; // 数据更新引发的组件更新 callHook(vm, &#x27;beforeUpdate&#x27;) &#125; &#125; &#125;, true /* isRenderWatcher */) hydrating = false // manually mounted instance, call mounted on self // mounted is called for render-created child components in its inserted hook if (vm.$vnode == null) &#123; vm._isMounted = true callHook(vm, &#x27;mounted&#x27;) &#125; return vm&#125; 阅读上面代码，我们得到以下结论： 会触发boforeCreate钩子 定义updateComponent渲染页面视图的方法 监听组件数据，一旦发生变化，触发beforeUpdate生命钩子 updateComponent方法主要执行在vue初始化时声明的render，update方法 1render`的作用主要是生成`vnode 源码位置：src\\core\\instance\\render.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// 定义vue 原型上的render方法Vue.prototype._render = function (): VNode &#123; const vm: Component = this // render函数来自于组件的option const &#123; render, _parentVnode &#125; = vm.$options if (_parentVnode) &#123; vm.$scopedSlots = normalizeScopedSlots( _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots ) &#125; // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode // render self let vnode try &#123; // There&#x27;s no need to maintain a stack because all render fns are called // separately from one another. Nested component&#x27;s render fns are called // when parent component is patched. currentRenderingInstance = vm // 调用render方法，自己的独特的render方法， 传入createElement参数，生成vNode vnode = render.call(vm._renderProxy, vm.$createElement) &#125; catch (e) &#123; handleError(e, vm, `render`) // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; vm.$options.renderError) &#123; try &#123; vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) &#125; catch (e) &#123; handleError(e, vm, `renderError`) vnode = vm._vnode &#125; &#125; else &#123; vnode = vm._vnode &#125; &#125; finally &#123; currentRenderingInstance = null &#125; // if the returned array contains only a single node, allow it if (Array.isArray(vnode) &amp;&amp; vnode.length === 1) &#123; vnode = vnode[0] &#125; // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) &#123; if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; Array.isArray(vnode)) &#123; warn( &#x27;Multiple root nodes returned from render function. Render function &#x27; + &#x27;should return a single root node.&#x27;, vm ) &#125; vnode = createEmptyVNode() &#125; // set parent vnode.parent = _parentVnode return vnode&#125; _update主要功能是调用patch，将vnode转换为真实DOM，并且更新到页面中 源码位置：src\\core\\instance\\lifecycle.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// 定义vue 原型上的render方法Vue.prototype._render = function (): VNode &#123; const vm: Component = this // render函数来自于组件的option const &#123; render, _parentVnode &#125; = vm.$options if (_parentVnode) &#123; vm.$scopedSlots = normalizeScopedSlots( _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots ) &#125; // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode // render self let vnode try &#123; // There&#x27;s no need to maintain a stack because all render fns are called // separately from one another. Nested component&#x27;s render fns are called // when parent component is patched. currentRenderingInstance = vm // 调用render方法，自己的独特的render方法， 传入createElement参数，生成vNode vnode = render.call(vm._renderProxy, vm.$createElement) &#125; catch (e) &#123; handleError(e, vm, `render`) // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; vm.$options.renderError) &#123; try &#123; vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) &#125; catch (e) &#123; handleError(e, vm, `renderError`) vnode = vm._vnode &#125; &#125; else &#123; vnode = vm._vnode &#125; &#125; finally &#123; currentRenderingInstance = null &#125; // if the returned array contains only a single node, allow it if (Array.isArray(vnode) &amp;&amp; vnode.length === 1) &#123; vnode = vnode[0] &#125; // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) &#123; if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; Array.isArray(vnode)) &#123; warn( &#x27;Multiple root nodes returned from render function. Render function &#x27; + &#x27;should return a single root node.&#x27;, vm ) &#125; vnode = createEmptyVNode() &#125; // set parent vnode.parent = _parentVnode return vnode&#125; 三、结论 new Vue的时候调用会调用_init方法 定义 $set、$get 、$delete、$watch 等方法 定义 $on、$off、$emit、$off等事件 定义 _update、$forceUpdate、$destroy生命周期 调用$mount进行页面的挂载 挂载的时候主要是通过mountComponent方法 定义updateComponent更新函数 执行render生成虚拟DOM _update将虚拟DOM生成真实DOM结构，并且渲染到页面中","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"你是怎么处理vue项目中的错误的？","slug":"vue.你是怎么处理vue项目中的错误的？","date":"2022-07-26T02:22:43.191Z","updated":"2022-08-05T02:32:58.206Z","comments":true,"path":"2022/07/26/vue.你是怎么处理vue项目中的错误的？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E7%9A%84%EF%BC%9F/","excerpt":"","text":"你是怎么处理vue项目中的错误的？ 一、错误类型任何一个框架，对于错误的处理都是一种必备的能力 在Vue 中，则是定义了一套对应的错误处理规则给到使用者，且在源代码级别，对部分必要的过程做了一定的错误处理。 主要的错误来源包括： 后端接口错误 代码中本身逻辑错误 二、如何处理后端接口错误通过axios的interceptor实现网络请求的response先进行一层拦截 12345678910111213apiClient.interceptors.response.use( response =&gt; &#123; return response; &#125;, error =&gt; &#123; if (error.response.status == 401) &#123; router.push(&#123; name: &quot;Login&quot; &#125;); &#125; else &#123; message.error(&quot;出错了&quot;); return Promise.reject(error); &#125; &#125;); 代码逻辑问题全局设置错误处理设置全局错误处理函数 12345Vue.config.errorHandler = function (err, vm, info) &#123; // handle error // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子 // 只在 2.2.0+ 可用&#125; errorHandler指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例 不过值得注意的是，在不同Vue 版本中，该全局 API 作用的范围会有所不同： 从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 undefined 时，被捕获的错误会通过 console.error 输出而避免应用崩 从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了 从 2.6.0 起，这个钩子也会捕获 v-on DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理 生命周期钩子errorCaptured是 2.5.0 新增的一个生命钩子函数，当捕获到一个来自子孙组件的错误时被调用 基本类型 1(err: Error, vm: Component, info: string) =&gt; ?boolean 此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播 参考官网，错误传播规则如下： 默认情况下，如果全局的 config.errorHandler 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报 如果一个组件的继承或父级从属链路中存在多个 errorCaptured 钩子，则它们将会被相同的错误逐个唤起。 如果此 errorCaptured 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 config.errorHandler 一个 errorCaptured 钩子能够返回 false 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler 下面来看个例子 定义一个父组件cat 123456789101112131415161718Vue.component(&#x27;cat&#x27;, &#123; template:` &lt;div&gt; &lt;h1&gt;Cat: &lt;/h1&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt;`, props:&#123; name:&#123; required:true, type:String &#125; &#125;, errorCaptured(err,vm,info) &#123; console.log(`cat EC: $&#123;err.toString()&#125;\\ninfo: $&#123;info&#125;`); return false; &#125;&#125;); 定义一个子组件kitten，其中dontexist()并没有定义，存在错误 123456789Vue.component(&#x27;kitten&#x27;, &#123; template:&#x27;&lt;div&gt;&lt;h1&gt;Kitten: &#123;&#123; dontexist() &#125;&#125;&lt;/h1&gt;&lt;/div&gt;&#x27;, props:&#123; name:&#123; required:true, type:String &#125; &#125;&#125;); 页面中使用组件 12345&lt;div id=&quot;app&quot; v-cloak&gt; &lt;cat name=&quot;my cat&quot;&gt; &lt;kitten&gt;&lt;/kitten&gt; &lt;/cat&gt;&lt;/div&gt; 在父组件的errorCaptured则能够捕获到信息 12cat EC: TypeError: dontexist is not a functioninfo: render 三、源码分析异常处理源码 源码位置：/src/core/util/error.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112// Vue 全局配置,也就是上面的Vue.configimport config from &#x27;../config&#x27;import &#123; warn &#125; from &#x27;./debug&#x27;// 判断环境import &#123; inBrowser, inWeex &#125; from &#x27;./env&#x27;// 判断是否是Promise，通过val.then === &#x27;function&#x27; &amp;&amp; val.catch === &#x27;function&#x27;, val ！=== null &amp;&amp; val !== undefinedimport &#123; isPromise &#125; from &#x27;shared/util&#x27;// 当错误函数处理错误时，停用deps跟踪以避免可能出现的infinite rendering// 解决以下出现的问题https://github.com/vuejs/vuex/issues/1505的问题import &#123; pushTarget, popTarget &#125; from &#x27;../observer/dep&#x27;export function handleError (err: Error, vm: any, info: string) &#123; // Deactivate deps tracking while processing error handler to avoid possible infinite rendering. pushTarget() try &#123; // vm指当前报错的组件实例 if (vm) &#123; let cur = vm // 首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用errorCaptured 方法。 // 在遍历调用完所有 errorCaptured 方法、或 errorCaptured 方法有报错时，调用 globalHandleError 方法 while ((cur = cur.$parent)) &#123; const hooks = cur.$options.errorCaptured // 判断是否存在errorCaptured钩子函数 if (hooks) &#123; // 选项合并的策略，钩子函数会被保存在一个数组中 for (let i = 0; i &lt; hooks.length; i++) &#123; // 如果errorCaptured 钩子执行自身抛出了错误， // 则用try&#123;&#125;catch&#123;&#125;捕获错误，将这个新错误和原本被捕获的错误都会发送给全局的config.errorHandler // 调用globalHandleError方法 try &#123; // 当前errorCaptured执行，根据返回是否是false值 // 是false，capture = true，阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler // 是true capture = fale，组件的继承或父级从属链路中存在的多个 errorCaptured 钩子，会被相同的错误逐个唤起 // 调用对应的钩子函数，处理错误 const capture = hooks[i].call(cur, err, vm, info) === false if (capture) return &#125; catch (e) &#123; globalHandleError(e, cur, &#x27;errorCaptured hook&#x27;) &#125; &#125; &#125; &#125; &#125; // 除非禁止错误向上传播，否则都会调用全局的错误处理函数 globalHandleError(err, vm, info) &#125; finally &#123; popTarget() &#125;&#125;// 异步错误处理函数export function invokeWithErrorHandling (handler: Function, context: any, args: null | any[], vm: any, info: string ) &#123; let res try &#123; // 根据参数选择不同的handle执行方式 res = args ? handler.apply(context, args) : handler.call(context) // handle返回结果存在 // res._isVue an flag to avoid this being observed，如果传入值的_isVue为ture时(即传入的值是Vue实例本身)不会新建observer实例 // isPromise(res) 判断val.then === &#x27;function&#x27; &amp;&amp; val.catch === &#x27;function&#x27;, val ！=== null &amp;&amp; val !== undefined // !res._handled _handle是Promise 实例的内部变量之一，默认是false，代表onFulfilled,onRejected是否被处理 if (res &amp;&amp; !res._isVue &amp;&amp; isPromise(res) &amp;&amp; !res._handled) &#123; res.catch(e =&gt; handleError(e, vm, info + ` (Promise/async)`)) // avoid catch triggering multiple times when nested calls // 避免嵌套调用时catch多次的触发 res._handled = true &#125; &#125; catch (e) &#123; // 处理执行错误 handleError(e, vm, info) &#125; return res &#125;//全局错误处理function globalHandleError (err, vm, info) &#123; // 获取全局配置，判断是否设置处理函数，默认undefined // 已配置 if (config.errorHandler) &#123; // try&#123;&#125;catch&#123;&#125; 住全局错误处理函数 try &#123; // 执行设置的全局错误处理函数，handle error 想干啥就干啥💗 return config.errorHandler.call(null, err, vm, info) &#125; catch (e) &#123; // 如果开发者在errorHandler函数中手动抛出同样错误信息throw err // 判断err信息是否相等，避免log两次 // 如果抛出新的错误信息throw err Error(&#x27;你好毒&#x27;)，将会一起log输出 if (e !== err) &#123; logError(e, null, &#x27;config.errorHandler&#x27;) &#125; &#125; &#125; // 未配置常规log输出 logError(err, vm, info)&#125;// 错误输出函数function logError (err, vm, info) &#123; if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123; warn(`Error in $&#123;info&#125;: &quot;$&#123;err.toString()&#125;&quot;`, vm) &#125; /* istanbul ignore else */ if ((inBrowser || inWeex) &amp;&amp; typeof console !== &#x27;undefined&#x27;) &#123; console.error(err) &#125; else &#123; throw err &#125;&#125; 小结 handleError在需要捕获异常的地方调用，首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用errorCaptured 方法，在遍历调用完所有 errorCaptured 方法或 errorCaptured 方法有报错时，调用 globalHandleError 方法 globalHandleError调用全局的 errorHandler 方法，再通过logError判断环境输出错误信息 invokeWithErrorHandling更好的处理异步错误信息 logError判断环境，选择不同的抛错方式。非生产环境下，调用warn方法处理错误","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue中给对象添加新属性界面不刷新?","slug":"vue.Vue中给对象添加新属性界面不刷新_","date":"2022-07-26T02:22:43.190Z","updated":"2022-08-05T02:36:13.667Z","comments":true,"path":"2022/07/26/vue.Vue中给对象添加新属性界面不刷新_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E4%B8%AD%E7%BB%99%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%B1%9E%E6%80%A7%E7%95%8C%E9%9D%A2%E4%B8%8D%E5%88%B7%E6%96%B0_/","excerpt":"","text":"Vue中给对象添加新属性界面不刷新? 一、直接添加属性的问题我们从一个例子开始 定义一个p标签，通过v-for指令进行遍历 然后给botton标签绑定点击事件，我们预期点击按钮时，数据新增一个属性，界面也新增一行 1234&lt;p v-for=&quot;(value,key) in item&quot; :key=&quot;key&quot;&gt; &#123;&#123; value &#125;&#125;&lt;/p&gt;&lt;button @click=&quot;addProperty&quot;&gt;动态添加新属性&lt;/button&gt; 实例化一个vue实例，定义data属性和methods方法 1234567891011121314const app = new Vue(&#123; el:&quot;#app&quot;, data:()=&gt;&#123; item:&#123; oldProperty:&quot;旧属性&quot; &#125; &#125;, methods:&#123; addProperty()&#123; this.items.newProperty = &quot;新属性&quot; // 为items添加新属性 console.log(this.items) // 输出带有newProperty的items &#125; &#125;&#125;) 点击按钮，发现结果不及预期，数据虽然更新了（console打印出了新属性），但页面并没有更新 二、原理分析为什么产生上面的情况呢？ 下面来分析一下 vue2是用过Object.defineProperty实现数据响应式 1234567891011121314const obj = &#123;&#125;Object.defineProperty(obj, &#x27;foo&#x27;, &#123; get() &#123; console.log(`get foo:$&#123;val&#125;`); return val &#125;, set(newVal) &#123; if (newVal !== val) &#123; console.log(`set foo:$&#123;newVal&#125;`); val = newVal &#125; &#125; &#125;)&#125; 当我们访问foo属性或者设置foo值的时候都能够触发setter与getter 12obj.foo obj.foo = &#x27;new&#x27; 但是我们为obj添加新属性的时候，却无法触发事件属性的拦截 1obj.bar = &#x27;新属性&#x27; 原因是一开始obj的foo属性被设成了响应式数据，而bar是后面新增的属性，并没有通过Object.defineProperty设置成响应式数据 三、解决方案Vue 不允许在已经创建的实例上动态添加新的响应式属性 若想实现数据与视图同步更新，可采取下面三种解决方案： Vue.set() Object.assign() $forcecUpdated() Vue.set()Vue.set( target, propertyName/index, value ) 参数 &#123;Object | Array&#125; target &#123;string | number&#125; propertyName/index &#123;any&#125; value 返回值：设置的值 通过Vue.set向响应式对象中添加一个property，并确保这个新 property同样是响应式的，且触发视图更新 关于Vue.set源码（省略了很多与本节不相关的代码） 源码位置：src\\core\\observer\\index.js 123456function set (target: Array&lt;any&gt; | Object, key: any, val: any): any &#123; ... defineReactive(ob.value, key, val) ob.dep.notify() return val&#125; 这里无非再次调用defineReactive方法，实现新增属性的响应式 关于defineReactive方法，内部还是通过Object.defineProperty实现属性拦截 大致代码如下： 1234567891011121314function defineReactive(obj, key, val) &#123; Object.defineProperty(obj, key, &#123; get() &#123; console.log(`get $&#123;key&#125;:$&#123;val&#125;`); return val &#125;, set(newVal) &#123; if (newVal !== val) &#123; console.log(`set $&#123;key&#125;:$&#123;newVal&#125;`); val = newVal &#125; &#125; &#125;)&#125; Object.assign()直接使用Object.assign()添加到对象的新属性不会触发更新 应创建一个新的对象，合并原对象和混入对象的属性 1this.someObject = Object.assign(&#123;&#125;,this.someObject,&#123;newProperty1:1,newProperty2:2 ...&#125;) $forceUpdate如果你发现你自己需要在 Vue中做一次强制更新，99.9% 的情况，是你在某个地方做错了事 $forceUpdate迫使Vue 实例重新渲染 PS：仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。 小结 如果为对象添加少量的新属性，可以直接采用Vue.set() 如果需要为新对象添加大量的新属性，则通过Object.assign()创建新对象 如果你需要进行强制刷新时，可采取$forceUpdate() (不建议) PS：vue3是用过proxy实现数据响应式的，直接动态添加新属性仍可以实现数据响应式","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对vue的理解?","slug":"vue.说说你对vue的理解_","date":"2022-07-26T02:22:43.189Z","updated":"2022-08-05T02:33:47.717Z","comments":true,"path":"2022/07/26/vue.说说你对vue的理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9vue%E7%9A%84%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说你对vue的理解? 一、从历史说起Web是World Wide Web的简称，中文译为万维网 我们可以将它规划成如下的几个时代来进行理解 石器时代 文明时代 工业革命时代 百花齐放时代 石器时代石器时代指的就是我们的静态网页，可以欣赏一下1997的Apple官网 最早的网页是没有数据库的，可以理解成就是一张可以在网络上浏览的报纸，直到CGI技术的出现 通过 CGI Perl 运行一小段代码与数据库或文件系统进行交互，如当时的Google（1998年） 文明时代ASP，JSP大家应该都不会太陌生，最早出现于 2005 年左右，先后出现了微软的 ASP 和 Java Server Pages [JSP] 等技术,取代了 CGI ，增强了 WEB 与服务端的交互的安全性，类似于下面这样，其实就是Java + HTML 123456789101112&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;JSP demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;http://localhost:8080/web05_session/1.jpg&quot; width=200 height=100 /&gt;&lt;/body&gt;&lt;/html&gt; JSP有一个很大的缺点，就是不太灵活，因为JSP是在服务器端执行的，通常返回该客户端的就是一个HTML文本。我们每次的请求：获取的数据、内容的加载，都是服务器为我们返回渲染完成之后的 DOM，这也就使得我们开发网站的灵活度大打折扣 在这种情况下，同年：Ajax火了(小细节，这里为什么说火了，因为 Ajax 技术并不是 2005 年出现的，他的雏形是 1999 年)，现在看来很常见的技术手段，在当时可是珍贵无比 工业革命时代到这里大家就更熟悉了， 移动设备的普及，Jquery的出现，以及SPA（Single Page Application 单页面应用）的雏形，Backbone EmberJS AngularJS 这样一批前端框架随之出现，但当时SPA的路不好走，例如SEO问题，SPA 过多的页面、复杂场景下 View 的绑定等，都没有很好的处理 经过这几年的飞速发展，节约了开发人员大量的精力、降低了开发者和开发过程的门槛，极大提升了开发效率和迭代速度，我们可以称之其为工业时代 百花齐放时代这里没有文字，放一张图感受一下 PS：这里为什么要说这么多Web的历史，我们可以看到Web技术的变化之大与快，每一种新的技术出现都是一些特定场景的解决方案，那我们今天的主角Vue又是为了解决什么呢？ 我们接着往下看 二、vue是什么Vue.js（/vjuː/，或简称为Vue） 是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。2016年一项针对JavaScript的调查表明，Vue有着89%的开发者满意度。在GitHub上，该项目平均每天能收获95颗星，为Github有史以来星标数第3多的项目 同时也是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互 PS: Vue作者尤雨溪是在为AngularJS工作之后开发出了这一框架。他声称自己的思路是提取Angular中为自己所喜欢的部分，构建出一款相当轻量的框架 最早发布于2014年2月 三、Vue核心特性数据驱动（MVVM)MVVM表示的是 Model-View-ViewModel Model：模型层，负责处理业务逻辑以及和服务器端进行交互 View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面 ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁 这时候需要一张直观的关系图，如下 组件化1.什么是组件化 一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件 2.组件化的优势 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级 指令系统解释：指令 (Directives) 是带有 v- 前缀的特殊属性 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM 常用的指令 条件渲染指令 v-if 列表渲染指令v-for 属性绑定指令v-bind 事件绑定指令v-on 双向数据绑定指令v-model 没有指令之前我们是怎么做的？是不是先要获取到DOM然后在….干点啥 四、Vue跟传统开发的区别没有落地使用场景的革命不是好革命，就以一个高频的应用场景来示意吧 注册账号这个需求大家应该很熟悉了，如下 用jquery来实现大概的思路就是选择流程dom对象，点击按钮隐藏当前活动流程dom对象，显示下一流程dom对象 如下图(代码就不上了，上了就篇文章就没了..) 用vue来实现，我们知道vue基本不操作dom节点， 双向绑定使dom节点跟视图绑定后，通过修改变量的值控制dom节点的各类属性。 所以其实现思路为：视图层使用一变量控制dom节点显示与否，点击按钮则改变该变量，如下图 总结就是： Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM 五、Vue和React对比这里就做几个简单的类比吧，当然没有好坏之分，只是使用场景不同 相同点 都有组件化思想 都支持服务器端渲染 都有Virtual DOM（虚拟dom） 数据驱动视图 都有支持native的方案：Vue的weex、React的React native 都有自己的构建工具：Vue的vue-cli、React的Create React App 区别 数据流向的不同。react从诞生开始就推崇单向数据流，而Vue是双向数据流 数据变化的实现原理不同。react使用的是不可变数据，而Vue使用的是可变的数据 组件化通信的不同。react中我们通过使用回调函数来进行通信的，而Vue中子组件向父组件传递消息有两种方式：事件和回调函数 diff算法不同。react主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。Vue 使用双向指针，边对比，边更新DOM","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？","slug":"vue.说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？","date":"2022-07-26T02:22:43.188Z","updated":"2022-08-05T02:34:20.973Z","comments":true,"path":"2022/07/26/vue.说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E4%B8%8B%E4%BD%A0%E7%9A%84vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%AF%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E4%BD%A0%E8%AF%A5%E6%80%8E%E4%B9%88%E5%88%92%E5%88%86%E7%BB%93%E6%9E%84%E5%92%8C%E5%88%92%E5%88%86%E7%BB%84%E4%BB%B6%E5%91%A2%EF%BC%9F/","excerpt":"","text":"说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？ 一、为什么要划分使用vue构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高 在划分项目结构的时候，需要遵循一些基本的原则： 文件夹和文件夹内部文件的语义一致性 单一入口/出口 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用 公共的文件应该以绝对路径的方式从根目录引用 /src 外的文件不应该被引入 文件夹和文件夹内部文件的语义一致性我们的目录结构都会有一个文件夹是按照路由模块来划分的，如pages文件夹，这个文件夹里面应该包含我们项目所有的路由模块，并且仅应该包含路由模块，而不应该有别的其他的非路由模块的文件夹 这样做的好处在于一眼就从 pages文件夹看出这个项目的路由有哪些 单一入口/出口举个例子，在pages文件夹里面存在一个seller文件夹，这时候seller 文件夹应该作为一个独立的模块由外部引入，并且 seller/index.js 应该作为外部引入 seller 模块的唯一入口 12345// 错误用法import sellerReducer from &#x27;src/pages/seller/reducer&#x27;// 正确用法import &#123; reducer as sellerReducer &#125; from &#x27;src/pages/seller&#x27; 这样做的好处在于，无论你的模块文件夹内部有多乱，外部引用的时候，都是从一个入口文件引入，这样就很好的实现了隔离，如果后续有重构需求，你就会发现这种方式的优点 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用使用相对路径可以保证模块内部的独立性 1234// 正确用法import styles from &#x27;./index.module.scss&#x27;// 错误用法import styles from &#x27;src/pages/seller/index.module.scss&#x27; 举个例子 假设我们现在的 seller 目录是在 src/pages/seller，如果我们后续发生了路由变更，需要加一个层级，变成 src/pages/user/seller。 如果我们采用第一种相对路径的方式，那就可以直接将整个文件夹拖过去就好，seller 文件夹内部不需要做任何变更。 但是如果我们采用第二种绝对路径的方式，移动文件夹的同时，还需要对每个 import 的路径做修改 公共的文件应该以绝对路径的方式从根目录引用公共指的是多个路由模块共用，如一些公共的组件，我们可以放在src/components下 在使用到的页面中，采用绝对路径的形式引用 1234// 错误用法import Input from &#x27;../../components/input&#x27;// 正确用法import Input from &#x27;src/components/input&#x27; 同样的，如果我们需要对文件夹结构进行调整。将 /src/components/input 变成 /src/components/new/input，如果使用绝对路径，只需要全局搜索替换 再加上绝对路径有全局的语义，相对路径有独立模块的语义 /src 外的文件不应该被引入vue-cli脚手架已经帮我们做了相关的约束了，正常我们的前端项目都会有个src文件夹，里面放着所有的项目需要的资源，js,css, png, svg 等等。src 外会放一些项目配置，依赖，环境等文件 这样的好处是方便划分项目代码文件和配置文件 二、目录结构单页面目录结构 1234567891011121314151617181920212223242526272829303132333435project│ .browserslistrc│ .env.production│ .eslintrc.js│ .gitignore│ babel.config.js│ package-lock.json│ package.json│ README.md│ vue.config.js│ yarn-error.log│ yarn.lock│├─public│ favicon.ico│ index.html│|-- src |-- components |-- input |-- index.js |-- index.module.scss |-- pages |-- seller |-- components |-- input |-- index.js |-- index.module.scss |-- reducer.js |-- saga.js |-- index.js |-- index.module.scss |-- buyer |-- index.js |-- index.js 多页面目录结构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101my-vue-test:.│ .browserslistrc│ .env.production│ .eslintrc.js│ .gitignore│ babel.config.js│ package-lock.json│ package.json│ README.md│ vue.config.js│ yarn-error.log│ yarn.lock│├─public│ favicon.ico│ index.html│└─src ├─apis //接口文件根据页面或实例模块化 │ index.js │ login.js │ ├─components //全局公共组件 │ └─header │ index.less │ index.vue │ ├─config //配置（环境变量配置不同passid等） │ env.js │ index.js │ ├─contant //常量 │ index.js │ ├─images //图片 │ logo.png │ ├─pages //多页面vue项目，不同的实例 │ ├─index //主实例 │ │ │ index.js │ │ │ index.vue │ │ │ main.js │ │ │ router.js │ │ │ store.js │ │ │ │ │ ├─components //业务组件 │ │ └─pages //此实例中的各个路由 │ │ ├─amenu │ │ │ index.vue │ │ │ │ │ └─bmenu │ │ index.vue │ │ │ └─login //另一个实例 │ index.js │ index.vue │ main.js │ ├─scripts //包含各种常用配置，工具函数 │ │ map.js │ │ │ └─utils │ helper.js │ ├─store //vuex仓库 │ │ index.js │ │ │ ├─index │ │ actions.js │ │ getters.js │ │ index.js │ │ mutation-types.js │ │ mutations.js │ │ state.js │ │ │ └─user │ actions.js │ getters.js │ index.js │ mutation-types.js │ mutations.js │ state.js │ └─styles //样式统一配置 │ components.less │ ├─animation │ index.less │ slide.less │ ├─base │ index.less │ style.less │ var.less │ widget.less │ └─common index.less reset.less style.less transition.less 小结项目的目录结构很重要，因为目录结构能体现很多东西，怎么规划目录结构可能每个人有自己的理解，但是按照一定的规范去进行目录的设计，能让项目整个架构看起来更为简洁，更加易用","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说对observable的理解","slug":"vue.说说对observable的理解","date":"2022-07-26T02:22:43.187Z","updated":"2022-08-05T02:33:15.797Z","comments":true,"path":"2022/07/26/vue.说说对observable的理解/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E5%AF%B9observable%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"说说对observable的理解 一、Observable 是什么Observable 翻译过来我们可以理解成可观察的 我们先来看一下其在Vue中的定义 Vue.observable，让一个对象变成响应式数据。Vue 内部会用它来处理 data 函数返回的对象 返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器 1Vue.observable(&#123; count : 1&#125;) 其作用等同于 1new vue(&#123; count : 1&#125;) 在 Vue 2.x 中，被传入的对象会直接被 Vue.observable 变更，它和被返回的对象是同一个对象 在 Vue 3.x 中，则会返回一个可响应的代理，而对源对象直接进行变更仍然是不可响应的 二、使用场景在非父子组件通信时，可以使用通常的bus或者使用vuex，但是实现的功能不是太复杂，而使用上面两个又有点繁琐。这时，observable就是一个很好的选择 创建一个js文件 12345678910111213141516// 引入vueimport Vue from &#x27;vue// 创建state对象，使用observable让state对象可响应export let state = Vue.observable(&#123; name: &#x27;张三&#x27;, &#x27;age&#x27;: 38&#125;)// 创建对应的方法export let mutations = &#123; changeName(name) &#123; state.name = name &#125;, setAge(age) &#123; state.age = age &#125;&#125; 在.vue文件中直接使用即可 12345678910111213141516171819202122232425&lt;template&gt; &lt;div&gt; 姓名：&#123;&#123; name &#125;&#125; 年龄：&#123;&#123; age &#125;&#125; &lt;button @click=&quot;changeName(&#x27;李四&#x27;)&quot;&gt;改变姓名&lt;/button&gt; &lt;button @click=&quot;setAge(18)&quot;&gt;改变年龄&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;import &#123; state, mutations &#125; from &#x27;@/storeexport default &#123; // 在计算属性中拿到值 computed: &#123; name() &#123; return state.name &#125;, age() &#123; return state.age &#125; &#125;, // 调用mutations里面的方法，更新数据 methods: &#123; changeName: mutations.changeName, setAge: mutations.setAge &#125;&#125; 三、原理分析源码位置：src\\core\\observer\\index.js 1234567891011121314151617181920212223export function observe (value: any, asRootData: ?boolean): Observer | void &#123; if (!isObject(value) || value instanceof VNode) &#123; return &#125; let ob: Observer | void // 判断是否存在__ob__响应式属性 if (hasOwn(value, &#x27;__ob__&#x27;) &amp;&amp; value.__ob__ instanceof Observer) &#123; ob = value.__ob__ &#125; else if ( shouldObserve &amp;&amp; !isServerRendering() &amp;&amp; (Array.isArray(value) || isPlainObject(value)) &amp;&amp; Object.isExtensible(value) &amp;&amp; !value._isVue ) &#123; // 实例化Observer响应式对象 ob = new Observer(value) &#125; if (asRootData &amp;&amp; ob) &#123; ob.vmCount++ &#125; return ob&#125; Observer类 12345678910111213141516171819202122export class Observer &#123; value: any; dep: Dep; vmCount: number; // number of vms that have this object as root $data constructor (value: any) &#123; this.value = value this.dep = new Dep() this.vmCount = 0 def(value, &#x27;__ob__&#x27;, this) if (Array.isArray(value)) &#123; if (hasProto) &#123; protoAugment(value, arrayMethods) &#125; else &#123; copyAugment(value, arrayMethods, arrayKeys) &#125; this.observeArray(value) &#125; else &#123; // 实例化对象是一个对象，进入walk方法 this.walk(value) &#125;&#125; walk函数 1234567walk (obj: Object) &#123; const keys = Object.keys(obj) // 遍历key，通过defineReactive创建响应式对象 for (let i = 0; i &lt; keys.length; i++) &#123; defineReactive(obj, keys[i]) &#125;&#125; defineReactive方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162export function defineReactive ( obj: Object, key: string, val: any, customSetter?: ?Function, shallow?: boolean) &#123; const dep = new Dep() const property = Object.getOwnPropertyDescriptor(obj, key) if (property &amp;&amp; property.configurable === false) &#123; return &#125; // cater for pre-defined getter/setters const getter = property &amp;&amp; property.get const setter = property &amp;&amp; property.set if ((!getter || setter) &amp;&amp; arguments.length === 2) &#123; val = obj[key] &#125; let childOb = !shallow &amp;&amp; observe(val) // 接下来调用Object.defineProperty()给对象定义响应式属性 Object.defineProperty(obj, key, &#123; enumerable: true, configurable: true, get: function reactiveGetter () &#123; const value = getter ? getter.call(obj) : val if (Dep.target) &#123; dep.depend() if (childOb) &#123; childOb.dep.depend() if (Array.isArray(value)) &#123; dependArray(value) &#125; &#125; &#125; return value &#125;, set: function reactiveSetter (newVal) &#123; const value = getter ? getter.call(obj) : val /* eslint-disable no-self-compare */ if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123; return &#125; /* eslint-enable no-self-compare */ if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; customSetter) &#123; customSetter() &#125; // #7981: for accessor properties without setter if (getter &amp;&amp; !setter) return if (setter) &#123; setter.call(obj, newVal) &#125; else &#123; val = newVal &#125; childOb = !shallow &amp;&amp; observe(newVal) // 对观察者watchers进行通知,state就成了全局响应式对象 dep.notify() &#125; &#125;)&#125;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"Vue组件间通信方式都有哪些?","slug":"vue.Vue组件间通信方式都有哪些_","date":"2022-07-26T02:22:43.185Z","updated":"2022-08-05T02:36:22.876Z","comments":true,"path":"2022/07/26/vue.Vue组件间通信方式都有哪些_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B_/","excerpt":"","text":"Vue组件间通信方式都有哪些? 一、组件间通信的概念开始之前，我们把组件间通信这个词进行拆分 组件 通信 都知道组件是vue最强大的功能之一，vue中每一个.vue我们都可以视之为一个组件 通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。广义上，任何信息的交通都是通信 组件间通信即指组件(.vue)通过某种方式来传递信息以达到某个目的 举个栗子 我们在使用UI框架中的table组件，可能会往table组件中传入某些数据，这个本质就形成了组件之间的通信 二、组件间通信解决了什么在古代，人们通过驿站、飞鸽传书、烽火报警、符号、语言、眼神、触碰等方式进行信息传递，到了今天，随着科技水平的飞速发展，通信基本完全利用有线或无线电完成，相继出现了有线电话、固定电话、无线电话、手机、互联网甚至视频电话等各种通信方式 从上面这段话，我们可以看到通信的本质是信息同步，共享 回到vue中，每个组件之间的都有独自的作用域，组件间的数据是无法共享的 但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的 要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统 二、组件间通信的分类组件间通信的分类可以分成以下 父子组件之间的通信 兄弟组件之间的通信 祖孙与后代组件之间的通信 非关系组件间之间的通信 关系图: 三、组件间通信的方案整理vue中8种常规的通信方案 通过 props 传递 通过 $emit 触发自定义事件 使用 ref EventBus 或root attrs 与 listeners Provide 与 Inject Vuex props传递数据 适用场景：父组件传递数据给子组件 子组件设置props属性，定义接收父组件传递过来的参数 父组件在使用子组件标签中通过字面量来传递值 1234567891011Children.vueprops:&#123; // 字符串形式 name:String // 接收的类型参数 // 对象形式 age:&#123; type:Number, // 接收的类型为数值 defaule:18, // 默认值为18 require:true // age属性必须传递 &#125;&#125; Father.vue组件 1&lt;Children name:&quot;jack&quot; age=18 /&gt; $emit 触发自定义事件 适用场景：子组件传递数据给父组件 子组件通过$emit触发自定义事件，$emit第二个参数为传递的数值 父组件绑定监听器获取到子组件传递过来的参数 1234Chilfen.vuethis.$emit(&#x27;add&#x27;, good)Father.vue&lt;Children @add=&quot;cartAdd($event)&quot; /&gt; ref 父组件在使用子组件的时候设置ref 父组件通过设置子组件ref来获取数据 父组件 123&lt;Children ref=&quot;foo&quot; /&gt;this.$refs.foo // 获取子组件实例，通过子组件实例我们就能拿到对应的数据 EventBus 使用场景：兄弟组件传值 创建一个中央时间总线EventBus 兄弟组件通过$emit触发自定义事件，$emit第二个参数为传递的数值 另一个兄弟组件通过$on监听自定义事件 12345678910111213141516171819202122232425Bus.js// 创建一个中央时间总线类class Bus &#123; constructor() &#123; this.callbacks = &#123;&#125;; // 存放事件的名字 &#125; $on(name, fn) &#123; this.callbacks[name] = this.callbacks[name] || []; this.callbacks[name].push(fn); &#125; $emit(name, args) &#123; if (this.callbacks[name]) &#123; this.callbacks[name].forEach((cb) =&gt; cb(args)); &#125; &#125;&#125;// main.jsVue.prototype.$bus = new Bus() // 将$bus挂载到vue实例的原型上// 另一种方式Vue.prototype.$bus = new Vue() // Vue已经实现了Bus的功能Children1.vuethis.$bus.$emit(&#x27;foo&#x27;)Children2.vuethis.$bus.$on(&#x27;foo&#x27;, this.handle) 或 root 通过共同祖辈$parent或者$root搭建通信侨联 兄弟组件 1this.$parent.on(&#x27;add&#x27;,this.add) 另一个兄弟组件 1this.$parent.emit(&#x27;add&#x27;) 与 listeners 适用场景：祖先传递数据给子孙 设置批量向下传属性$attrs和 $listeners 包含了父级作用域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。 可以通过 v-bind=&quot;$attrs&quot; 传⼊内部组件 123456789101112131415// child：并未在props中声明foo&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;/p&gt;// parent&lt;HelloWorld foo=&quot;foo&quot;/&gt;// 给Grandson隔代传值，communication/index.vue&lt;Child2 msg=&quot;lalala&quot; @some-event=&quot;onSomeEvent&quot;&gt;&lt;/Child2&gt;// Child2做展开&lt;Grandson v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/Grandson&gt;// Grandson使⽤&lt;div @click=&quot;$emit(&#x27;some-event&#x27;, &#x27;msg from grandson&#x27;)&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt; provide 与 inject 在祖先组件定义provide属性，返回传递的值 在后代组件通过inject接收组件传递过来的值 祖先组件 12345provide()&#123; return &#123; foo:&#x27;foo&#x27; &#125;&#125; 后代组件 1inject:[&#x27;foo&#x27;] // 获取到祖先组件传递过来的值 vuex 适用场景: 复杂关系的组件数据传递 Vuex作用相当于一个用来存储共享变量的容器 state用来存放共享变量的地方 getter，可以增加一个getter派生状态，(相当于store中的计算属性），用来获得共享变量的值 mutations用来存放修改state的方法。 actions也是用来存放修改state的方法，不过action是在mutations的基础上进行。常用来做一些异步操作 小结 父子关系的组件数据传递选择 props 与 $emit进行传递，也可选择ref 兄弟关系的组件数据传递可选择$bus，其次可以选择$parent进行传递 祖先与后代组件数据传递可选择attrs与listeners或者 Provide与 Inject 复杂关系的组件数据传递可以通过vuex存放共享的变量","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"说说你对SPA（单页应用）的理解?","slug":"vue.说说你对SPA（单页应用）的理解_","date":"2022-07-26T02:22:43.184Z","updated":"2022-08-05T02:33:41.564Z","comments":true,"path":"2022/07/26/vue.说说你对SPA（单页应用）的理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2022/07/26/vue.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9SPA%EF%BC%88%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%EF%BC%89%E7%9A%84%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说你对SPA（单页应用）的理解? 一、什么是SPASPA（single-page application），翻译过来就是单页应用 SPA是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验 在单页应用中，所有必要的代码（HTML、JavaScript和CSS）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面 页面在任何时间点都不会重新加载，也不会将控制转移到其他页面 举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子 结构如下图 我们熟知的JS框架如react,vue,angular,ember都属于SPA 二、SPA和MPA的区别上面大家已经对单页面有所了解了，下面来讲讲多页应用 MPA（MultiPage-page application），翻译过来就是多页应用 在MPA中，每个页面都是一个主页面，都是独立的 当我们在访问另一个页面的时候，都需要重新加载html、css、js文件，公共文件则根据需求按需加载 如下图 单页应用与多页应用的区别 单页面应用（SPA） 多页面应用（MPA） 组成 一个主页面和多个页面片段 多个主页面 刷新方式 局部刷新 整页刷新 url模式 哈希模式 历史模式 SEO搜索引擎优化 难实现，可使用SSR方式改善 容易实现 数据传递 容易 通过url、cookie、localStorage等传递 页面切换 速度快，用户体验良好 切换加载资源，速度慢，用户体验差 维护成本 相对容易 相对复杂 单页应用优缺点优点： 具有桌面应用的即时性、网站的可移植性和可访问性 用户体验好、快，内容的改变不需要重新加载整个页面 良好的前后端分离，分工更明确 缺点： 不利于搜索引擎的抓取 首次渲染速度相对较慢 三、实现一个SPA原理 监听地址栏中hash变化驱动界面变化 用pushsate记录浏览器的历史，驱动界面发送变化 实现hash 模式核心通过监听url中的hash来进行路由跳转 123456789101112131415161718192021222324252627// 定义 Routerclass Router &#123; constructor () &#123; this.routes = &#123;&#125;; // 存放路由path及callback this.currentUrl = &#x27;&#x27;; // 监听路由change调用相对应的路由回调 window.addEventListener(&#x27;load&#x27;, this.refresh, false); window.addEventListener(&#x27;hashchange&#x27;, this.refresh, false); &#125; route(path, callback)&#123; this.routes[path] = callback; &#125; push(path) &#123; this.routes[path] &amp;&amp; this.routes[path]() &#125;&#125;// 使用 routerwindow.miniRouter = new Router();miniRouter.route(&#x27;/&#x27;, () =&gt; console.log(&#x27;page1&#x27;))miniRouter.route(&#x27;/page2&#x27;, () =&gt; console.log(&#x27;page2&#x27;))miniRouter.push(&#x27;/&#x27;) // page1miniRouter.push(&#x27;/page2&#x27;) // page2 history模式history 模式核心借用 HTML5 history api，api 提供了丰富的 router 相关属性 先了解一个几个相关的api history.pushState 浏览器历史纪录添加记录 history.replaceState修改浏览器历史纪录中当前纪录 history.popState 当 history 发生变化时触发 12345678910111213141516171819202122232425262728293031323334353637// 定义 Routerclass Router &#123; constructor () &#123; this.routes = &#123;&#125;; this.listerPopState() &#125; init(path) &#123; history.replaceState(&#123;path: path&#125;, null, path); this.routes[path] &amp;&amp; this.routes[path](); &#125; route(path, callback)&#123; this.routes[path] = callback; &#125; push(path) &#123; history.pushState(&#123;path: path&#125;, null, path); this.routes[path] &amp;&amp; this.routes[path](); &#125; listerPopState () &#123; window.addEventListener(&#x27;popstate&#x27; , e =&gt; &#123; const path = e.state &amp;&amp; e.state.path; this.routers[path] &amp;&amp; this.routers[path]() &#125;) &#125;&#125;// 使用 Routerwindow.miniRouter = new Router();miniRouter.route(&#x27;/&#x27;, ()=&gt; console.log(&#x27;page1&#x27;))miniRouter.route(&#x27;/page2&#x27;, ()=&gt; console.log(&#x27;page2&#x27;))// 跳转miniRouter.push(&#x27;/page2&#x27;) // page2 四、题外话：如何给SPA做SEO下面给出基于Vue的SPA如何实现SEO的三种方式 SSR服务端渲染 将组件或页面通过服务器生成html，再返回给浏览器，如nuxt.js 静态化 目前主流的静态化主要有两种： （1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中 （2）另外一种是通过WEB服务器的 URL Rewrite的方式，它的原理是通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址，一句话来说就是把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。这两种方法都达到了实现URL静态化的效果 使用Phantomjs针对爬虫处理 原理是通过Nginx配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个node server，再通过PhantomJS来解析完整的HTML，返回给爬虫。 下面是大致流程图","categories":[{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"}],"tags":[]},{"title":"HTML总结下","slug":"html.html面试总结下","date":"2020-09-30T06:08:26.000Z","updated":"2022-08-07T12:02:02.558Z","comments":true,"path":"2020/09/30/html.html面试总结下/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2020/09/30/html.html%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E4%B8%8B/","excerpt":"","text":"1. Canvas和SVG的区别（1）SVG：SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。其特点如下： 不依赖分辨率支持事件处理器最适合带有大型渲染区域的应用程序（比如谷歌地图）复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）不适合游戏应用 （2）Canvas：Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。其特点如下： 依赖分辨率不支持事件处理器弱的文本渲染能力能够以 .png 或 .jpg 格式保存结果图像最适合图像密集型的游戏，其中的许多对象会被频繁重绘 注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。 2. head 标签有什么作用，其中什么标签必不可少？ 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。下面这些标签可用在 head 部分： 1&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;。 其中 &lt;title&gt; 定义文档的标题，它是 head 部分中唯一必需的元素。 3. 文档声明（Doctype）和有何作用? 严格模式与混杂模式如何区分？它们有何意义?文档声明的作用： 文档声明是为了告诉浏览器，当前HTML文档使用什么版本的HTML来写的，这样浏览器才能按照声明的版本来正确的解析。作用： 的作用就是让浏览器进入标准模式，使用最新的 HTML5 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。严格模式与混杂模式的区分： 严格模式： 又称为标准模式，指浏览器按照W3C标准解析代码；混杂模式： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作； 区分：网页中的DTD，直接影响到使用的是严格模式还是浏览模式，可以说DTD的使用与这两种方式的区别息息相关。 如果文档包含严格的DOCTYPE ，那么它一般以严格模式呈现（严格 DTD ——严格模式）； 包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式）； DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现（DTD不存在或者格式不正确——混杂模式）； HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(HTML5 没有严格和混杂之分)。 总之，严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。 4. 浏览器乱码的原因是什么？如何解决？产生乱码的原因： 网页源代码是gbk的编码，而内容中的中文字是utf-8编码的，这样浏览器打开即会出现html乱码，反之也会出现乱码； html网页编码是gbk，而程序从数据库中调出呈现是utf-8编码的内容也会造成编码乱码； 浏览器不能自动检测网页编码，造成网页乱码。 解决办法： 使用软件编辑HTML网页内容； 如果网页设置编码是gbk，而数据库储存数据编码格式是UTF-8，此时需要程序查询数据库数据显示数据前进程序转码； 如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。 5. 渐进增强和优雅降级之间的区别（1）渐进增强（progressive enhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。（2）优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。 两者区别： 优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要； 降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。 “优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。 “渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。 5. 说一下 HTML5 drag API dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。 darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。 dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。 dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。 dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。 drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。 dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"HTML总结上","slug":"html.html面试总结上","date":"2020-09-28T06:08:26.000Z","updated":"2022-08-07T12:08:41.993Z","comments":true,"path":"2020/09/28/html.html面试总结上/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2020/09/28/html.html%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E4%B8%8A/","excerpt":"","text":"1. src和href的区别src和href都是用来引用外部的资源，它们的区别如下： src： 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。 href： 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。 2. 对HTML语义化的理解语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。通俗来讲就是用正确的标签做正确的事情。 语义化的优点如下： 1.对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录； 2.对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。 常见的语义化标签： &lt;header&gt;&lt;/header&gt; 头部 &lt;nav&gt;&lt;/nav&gt; 导航栏 &lt;section&gt;&lt;/section&gt; 区块（有语义化的div） &lt;main&gt;&lt;/main&gt; 主要区域 &lt;article&gt;&lt;/article&gt; 主要内容 &lt;aside&gt;&lt;/aside&gt; 侧边栏 &lt;footer&gt;&lt;/footer&gt; 底部 3. DOCTYPE(⽂档类型) 的作⽤DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。 浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是CSS1Compat）： CSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。 BackCompat：怪异模式(混杂模式)(Quick mode)，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。 4. script标签中defer和async的区别如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。 下图可以直观的看出三者之间的区别: 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。 defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：执行顺序： 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；脚本是否并行执行：async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行进行的，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。 5. 常⽤的meta标签有哪些meta 标签由 name 和 content 属性定义，用来描述网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。 常用的meta标签：（1）charset，用来描述HTML文档的编码类型： 1&lt;meta charset=&quot;UTF-8&quot; &gt; （2） keywords，页面关键词： 1&lt;meta name=&quot;keywords&quot; content=&quot;关键词&quot; /&gt; （3）description，页面描述： 1&lt;meta name=&quot;description&quot; content=&quot;页面描述内容&quot; /&gt; （4）refresh，页面重定向和刷新： 1&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt; （5）viewport，适配移动端，可以控制视口的大小和比例： 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt; 其中，content 参数有以下几种： width viewport ：宽度(数值/device-width) height viewport ：高度(数值/device-height) initial-scale ：初始缩放比例 maximum-scale ：最大缩放比例 minimum-scale ：最小缩放比例 user-scalable ：是否允许用户缩放(yes/no） （6）搜索引擎索引方式： 1&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; 其中，content 参数有以下几种： all：文件将被检索，且页面上的链接可以被查询； none：文件将不被检索，且页面上的链接不可以被查询； index：文件将被检索； follow：页面上的链接可以被查询； noindex：文件将不被检索； nofollow：页面上的链接不可以被查询。 6. HTML5有哪些更新1. 语义化标签header：定义文档的页眉（头部）； nav：定义导航链接的部分； footer：定义文档或节的页脚（底部）； article：定义文章内容； section：定义文档中的节（section、区段）； aside：定义其所处内容之外的内容（侧边）； 2. 媒体标签（1） audio：音频代码如下 1&lt;audio src=&#x27;&#x27; controls autoplay loop=&#x27;true&#x27;&gt;&lt;/audio&gt; 示例 属性： controls 控制面板autoplay 自动播放loop=‘true’ 循环播放 （2）video视频代码如下 1&lt;video src=&#x27;&#x27; poster=&#x27;imgs/aa.jpg&#x27; controls&gt;&lt;/video&gt; 示例 属性： poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。controls 控制面板widthheight （3）source标签因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。代码如下 1234&lt;video&gt; &lt;source src=&#x27;aa.flv&#x27; type=&#x27;video/flv&#x27;&gt;&lt;/source&gt; &lt;source src=&#x27;aa.mp4&#x27; type=&#x27;video/mp4&#x27;&gt;&lt;/source&gt;&lt;/video&gt; 3. 表单表单类型： email ：能够验证当前输入的邮箱地址是否合法url ： 验证URLnumber ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值color ： 提供了一个颜色拾取器time ： 时分秒data ： 日期选择年月日datatime ： 时间和日期(目前只有Safari支持)datatime-local ：日期时间控件week ：周控件month：月控件 表单属性： placeholder ：提示信息autofocus ：自动获取焦点autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提： 1.表单必须提交过 2.必须有name属性。required：要求输入框不能为空，必须有值才能够提交。pattern=” “ 里面写入想要的正则模式，例如手机号patte=”^(+86)?\\d{10}$”multiple：可以选择多个文件或者多个邮箱form=” form表单的ID” 表单事件： oninput 每当input里的输入框内容发生变化都会触发此事件。oninvalid 当验证不通过时触发此事件。 4. 进度条、度量器 *progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少 *meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持） *high/low：规定被视作高/低的范围 *max/min：规定最大/小值 *value：规定当前度量值 设置规则：min &lt; low &lt; high &lt; max 5.DOM查询操作document.querySelector()document.querySelectorAll() 它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#) 6. Web存储HTML5 提供了两种在客户端存储数据的新方法： localStorage - 没有时间限制的数据存储sessionStorage - 针对一个 session 的数据存储 7. 其他 拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：1&lt;img draggable=&quot;true&quot; /&gt; 画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。1&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt; SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准 地理定位：Geolocation（地理定位）用于定位用户的位置。‘ 总结：（1）新增语义化标签：nav、header、footer、aside、section、article（2）音频、视频标签：audio、video（3）数据存储：localStorage、sessionStorage（4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议）（5）input标签新增属性：placeholder、autocomplete、autofocus、required（6）history API：go、forward、back、pushstate移除的元素有： 纯表现的元素：basefont，big，center，font, s，strike，tt，u;对可用性产生负面影响的元素：frame，frameset，noframes； 7. img的srcset属性的作⽤？响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下： 1&lt;img src=&quot;image-128.png&quot; srcset=&quot;image-256.png 2x&quot; /&gt; 使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。 按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下： 123&lt;img src=&quot;image-128.png&quot; srcset=&quot;image-128.png 128w, image-256.png 256w, image-512.png 512w&quot; sizes=&quot;(max-width: 360px) 340px, 128px&quot; /&gt; 其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。 sizes语法如下： sizes=”[media query] [length], [media query] [length] … “ sizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。 8. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？ 行内元素有：a b span img input select strong； 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p； 空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签： 常见的有：&lt;br&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;link&gt;、&lt;meta&gt;； 鲜见的有： 1&lt;area&gt;、&lt;base&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;keygen&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;。 9. 说一下 web worker在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。如何创建 web worker： 检测浏览器对于 web worker 的支持性 创建 web worker 文件（js，回传函数等） 创建 web worker 对象 10. HTML5的离线储存怎么使用，它的工作原理是什么离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。 原理：HTML5的离线存储是基于一个新建的 .appcache 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示 使用方法：（1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性： 1&lt;html lang=&quot;en&quot; manifest=&quot;index.manifest&quot;&gt; （2）在 cache.manifest 文件中编写需要离线存储的资源： 123456789CACHE MANIFEST #v0.11 CACHE: js/app.js css/style.css NETWORK: resourse/logo.png FALLBACK: / /offline.html CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。 NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。 FALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。 （3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。 如何更新缓存： （1）更新 manifest 文件 （2）通过 javascript 操作 （3）清除浏览器缓存 注意事项： （1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。 （2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。 （3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。 （4）FALLBACK 中的资源必须和 manifest 文件同源。 （5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。 （6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。 （7）当 manifest 文件发生改变时，资源请求本身也会触发更新。 11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。离线的情况下，浏览器会直接使用离线存储的资源。 12. title与h1的区别、b与strong的区别、i与em的区别？strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响i内容展示为斜体，em表示强调的文本 13. iframe 有那些优点和缺点？iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。优点： 用来加载速度较慢的内容（如广告）可以使脚本可以并行下载可以实现跨子域通信 缺点： iframe 会阻塞主页面的 onload 事件无法被一些搜索引擎索识别会产生很多页面，不容易管理 14. label 的作用是什么？如何使用？label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。 使用方法1： 12&lt;label for=&quot;mobile&quot;&gt;Number:&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;mobile&quot;/&gt; 使用方法2： 1&lt;label&gt;Date:&lt;input type=&quot;text&quot;/&gt;&lt;/label&gt;","categories":[{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"}],"tags":[]},{"title":"说说你对栈、队列的理解？应用场景？","slug":"算法.说说你对栈、队列的理解？应用场景？","date":"2020-04-10T16:00:00.000Z","updated":"2022-08-05T07:10:21.626Z","comments":true,"path":"2020/04/11/算法.说说你对栈、队列的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2020/04/11/%E7%AE%97%E6%B3%95.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对栈、队列的理解？应用场景？ 一、栈栈（stack）又名堆栈，它是一种运算受限的线性表，限定仅在表尾进行插入和删除操作的线性表 表尾这一端被称为栈顶，相反地另一端被称为栈底，向栈顶插入元素被称为进栈、入栈、压栈，从栈顶删除元素又称作出栈 所以其按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据，具有记忆作用 关于栈的简单实现，如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Stack &#123; constructor() &#123; this.items = []; &#125; /** * 添加一个（或几个）新元素到栈顶 * @param &#123;*&#125; element 新元素 */ push(element) &#123; this.items.push(element) &#125; /** * 移除栈顶的元素，同时返回被移除的元素 */ pop() &#123; return this.items.pop() &#125; /** * 返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返回它） */ peek() &#123; return this.items[this.items.length - 1] &#125; /** * 如果栈里没有任何元素就返回true,否则返回false */ isEmpty() &#123; return this.items.length === 0 &#125; /** * 移除栈里的所有元素 */ clear() &#123; this.items = [] &#125; /** * 返回栈里的元素个数。这个方法和数组的length属性很类似 */ size() &#123; return this.items.length &#125;&#125; 关于栈的操作主要的方法如下： push：入栈操作 pop：出栈操作 二、队列跟栈十分相似，队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作 进行插入操作的端称为队尾，进行删除操作的端称为队头，当队列中没有元素时，称为空队列 在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出 简单实现一个队列的方式，如下： 123456789101112131415class Queue &#123; constructor() &#123; this.list = [] this.frontIndex = 0 this.tailIndex = 0 &#125; enqueue(item) &#123; this.list[this.tailIndex++] = item &#125; unqueue() &#123; const item = this.list[this.frontIndex] this.frontIndex++ return item &#125;&#125; 上述这种入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用 当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作，该现象称为”假溢” 在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进： 无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置，这种队列也就是循环队列 下面实现一个循环队列，如下： 123456789101112131415161718192021222324252627282930class Queue &#123; constructor(size) &#123; this.size = size; // 长度需要限制, 来达到空间的利用, 代表空间的长度 this.list = []; this.font = 0; // 指向首元素 this.rear = 0; // 指向准备插入元素的位置 &#125; enQueue() &#123; if (this.isFull() == true) &#123; return false &#125; this.rear = this.rear % this.k; this._data[this.rear++] = value; return true &#125; deQueue() &#123; if(this.isEmpty())&#123; return false; &#125; this.font++; this.font = this.font % this.k; return true; &#125; isEmpty() &#123; return this.font == this.rear - 1; &#125; isFull() &#123; return this.rear % this.k == this.font; &#125;&#125; 上述通过求余的形式代表首尾指针增1 时超出了所分配的队列空间 三、应用场景栈借助栈的先进后出的特性，可以简单实现一个逆序数处的功能，首先把所有元素依次入栈，然后把所有元素出栈并输出 包括编译器的在对输入的语法进行分析的时候，例如&quot;()&quot;、&quot;&#123;&#125;&quot;、&quot;[]&quot;这些成对出现的符号，借助栈的特性，凡是遇到括号的前半部分，即把这个元素入栈，凡是遇到括号的后半部分就比对栈顶元素是否该元素相匹配，如果匹配，则前半部分出栈，否则就是匹配出错 包括函数调用和递归的时候，每调用一个函数，底层都会进行入栈操作，出栈则返回函数的返回值 生活中的例子，可以把乒乓球盒比喻成一个堆栈，球一个一个放进去（入栈），最先放进去的要等其后面的全部拿出来后才能出来（出栈），这种就是典型的先进后出模型 队列当我们需要按照一定的顺序来处理数据，而该数据的数据量在不断地变化的时候，则需要队列来帮助解题 队列的使用广泛应用在广度优先搜索中，例如层次遍历一个二叉树的节点值（后续的篇章比讲到） 生活中的例子，排队买票，排在队头的永远先处理，后面的必须等到前面的全部处理完毕再进行处理，这也是典型的先进先出模型","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"Node性能如何进行监控以及优化？","slug":"node.Node性能如何进行监控以及优化？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:40.660Z","comments":true,"path":"2019/11/10/node.Node性能如何进行监控以及优化？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.Node%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%9B%91%E6%8E%A7%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%9F/","excerpt":"","text":"Node性能如何进行监控以及优化？ 一、 是什么Node作为一门服务端语言，性能方面尤为重要，其衡量指标一般有如下： CPU 内存 I/O 网络 CPU主要分成了两部分： CPU负载：在某个时间段内，占用以及等待CPU的进程总数 CPU使用率：CPU时间占用状况，等于 1 - 空闲CPU时间(idle time) / CPU总时间 这两个指标都是用来评估系统当前CPU的繁忙程度的量化指标 Node应用一般不会消耗很多的CPU，如果CPU占用率高，则表明应用存在很多同步操作，导致异步任务回调被阻塞 内存指标内存是一个非常容易量化的指标。内存占用率是评判一个系统的内存瓶颈的常见指标。对于Node来说，内部内存堆栈的使用状态也是一个可以量化的指标 123456789101112131415161718// /app/lib/memory.jsconst os = require(&#x27;os&#x27;);// 获取当前Node内存堆栈情况const &#123; rss, heapUsed, heapTotal &#125; = process.memoryUsage();// 获取系统空闲内存const sysFree = os.freemem();// 获取系统总内存const sysTotal = os.totalmem();module.exports = &#123; memory: () =&gt; &#123; return &#123; sys: 1 - sysFree / sysTotal, // 系统内存占用率 heap: heapUsed / headTotal, // Node堆内存占用率 node: rss / sysTotal, // Node占用系统内存的比例 &#125; &#125;&#125; rss：表示node进程占用的内存总量。 heapTotal：表示堆内存的总量。 heapUsed：实际堆内存的使用量。 external ：外部程序的内存使用量，包含Node核心的C++程序的内存使用量 在Node中，一个进程的最大内存容量为1.5GB。因此我们需要减少内存泄露 磁盘 I/O硬盘的IO 开销是非常昂贵的，硬盘 IO 花费的 CPU 时钟周期是内存的 164000 倍 内存 IO比磁盘IO 快非常多，所以使用内存缓存数据是有效的优化方法。常用的工具如 redis、memcached等 并不是所有数据都需要缓存，访问频率高，生成代价比较高的才考虑是否缓存，也就是说影响你性能瓶颈的考虑去缓存，并且而且缓存还有缓存雪崩、缓存穿透等问题要解决 二、如何监控关于性能方面的监控，一般情况都需要借助工具来实现 这里采用Easy-Monitor 2.0，其是轻量级的 Node.js 项目内核性能监控 + 分析工具，在默认模式下，只需要在项目入口文件 require 一次，无需改动任何业务代码即可开启内核级别的性能监控分析 使用方法如下： 在你的项目入口文件中按照如下方式引入，当然请传入你的项目名称： 12const easyMonitor = require(&#x27;easy-monitor&#x27;);easyMonitor(&#x27;你的项目名称&#x27;); 打开你的浏览器，访问 http://localhost:12333 ，即可看到进程界面 关于定制化开发、通用配置项以及如何动态更新配置项详见官方文档 三、如何优化关于Node的性能优化的方式有： 使用最新版本Node.js 正确使用流 Stream 代码层面优化 内存管理优化 使用最新版本Node.js每个版本的性能提升主要来自于两个方面： V8 的版本更新 Node.js 内部代码的更新优化 正确使用流 Stream在Node中，很多对象都实现了流，对于一个大文件可以通过流的形式发送，不需要将其完全读入内存 123456789101112131415const http = require(&#x27;http&#x27;);const fs = require(&#x27;fs&#x27;);// badhttp.createServer(function (req, res) &#123; fs.readFile(__dirname + &#x27;/data.txt&#x27;, function (err, data) &#123; res.end(data); &#125;);&#125;);// goodhttp.createServer(function (req, res) &#123; const stream = fs.createReadStream(__dirname + &#x27;/data.txt&#x27;); stream.pipe(res);&#125;); 代码层面优化合并查询，将多次查询合并一次，减少数据库的查询次数 1234567891011// badfor user_id in userIds let account = user_account.findOne(user_id)// goodconst user_account_map = &#123;&#125; // 注意这个对象将会消耗大量内存。user_account.find(user_id in user_ids).forEach(account)&#123; user_account_map[account.user_id] = account&#125;for user_id in userIds var account = user_account_map[user_id] 内存管理优化在 V8 中，主要将内存分为新生代和老生代两代： 新生代：对象的存活时间较短。新生对象或只经过一次垃圾回收的对象 老生代：对象存活时间较长。经历过一次或多次垃圾回收的对象 若新生代内存空间不够，直接分配到老生代 通过减少内存占用，可以提高服务器的性能。如果有内存泄露，也会导致大量的对象存储到老生代中，服务器性能会大大降低 如下面情况： 123456789101112const buffer = fs.readFileSync(__dirname + &#x27;/source/index.htm&#x27;);app.use( mount(&#x27;/&#x27;, async (ctx) =&gt; &#123; ctx.status = 200; ctx.type = &#x27;html&#x27;; ctx.body = buffer; leak.push(fs.readFileSync(__dirname + &#x27;/source/index.htm&#x27;)); &#125;));const leak = []; leak的内存非常大，造成内存泄露，应当避免这样的操作，通过减少内存使用，是提高服务性能的手段之一 而节省内存最好的方式是使用池，其将频用、可复用对象存储起来，减少创建和销毁操作 例如有个图片请求接口，每次请求，都需要用到类。若每次都需要重新new这些类，并不是很合适，在大量请求时，频繁创建和销毁这些类，造成内存抖动 使用对象池的机制，对这种频繁需要创建和销毁的对象保存在一个对象池中。每次用到该对象时，就取对象池空闲的对象，并对它进行初始化操作，从而提高框架的性能","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"如何实现JWT鉴权机制？说说你的思路","slug":"node.如何实现JWT鉴权机制？说说你的思路","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:02.033Z","comments":true,"path":"2019/11/10/node.如何实现JWT鉴权机制？说说你的思路/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0JWT%E9%89%B4%E6%9D%83%E6%9C%BA%E5%88%B6%EF%BC%9F%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%9A%84%E6%80%9D%E8%B7%AF/","excerpt":"","text":"如何实现JWT鉴权机制？说说你的思路 一、是什么JWT（JSON Web Token），本质就是一个字符串书写规范，如下图，作用是用来在用户和服务器之间传递安全可靠的信息 在目前前后端分离的开发过程中，使用token鉴权机制用于身份验证是最常见的方案，流程如下： 服务器当验证用户账号和密码正确的时候，给用户颁发一个令牌，这个令牌作为后续用户访问一些接口的凭证 后续访问会根据这个令牌判断用户时候有权限进行访问 Token，分成了三部分，头部（Header）、载荷（Payload）、签名（Signature），并以.进行拼接。其中头部和载荷都是以JSON格式存放数据，只是进行了编码 header每个JWT都会带有头部信息，这里主要声明使用的算法。声明算法的字段名为alg，同时还有一个typ的字段，默认JWT即可。以下示例中算法为HS256 1&#123; &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot; &#125; 因为JWT是字符串，所以我们还需要对以上内容进行Base64编码，编码后字符串如下： 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 payload载荷即消息体，这里会存放实际的内容，也就是Token的数据声明，例如用户的id和name，默认情况下也会携带令牌的签发时间iat，通过还可以设置过期时间，如下： 12345&#123; &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;, &quot;iat&quot;: 1516239022&#125; 同样进行Base64编码后，字符串如下： 1eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ Signature签名是对头部和载荷内容进行签名，一般情况，设置一个secretKey，对前两个的结果进行HMACSHA25算法，公式如下： 1Signature = HMACSHA256(base64Url(header)+.+base64Url(payload),secretKey) 一旦前面两部分数据被篡改，只要服务器加密用的密钥没有泄露，得到的签名肯定和之前的签名不一致 二、如何实现Token的使用分成了两部分： 生成token：登录成功的时候，颁发token 验证token：访问某些资源或者接口时，验证token 生成 token借助第三方库jsonwebtoken，通过jsonwebtoken 的 sign 方法生成一个 token： 第一个参数指的是 Payload 第二个是秘钥，服务端特有 第三个参数是 option，可以定义 token 过期时间 12345678910111213141516171819202122232425262728293031323334353637383940414243const crypto = require(&quot;crypto&quot;), jwt = require(&quot;jsonwebtoken&quot;);// TODO:使用数据库// 这里应该是用数据库存储，这里只是演示用let userList = [];class UserController &#123; // 用户登录 static async login(ctx) &#123; const data = ctx.request.body; if (!data.name || !data.password) &#123; return ctx.body = &#123; code: &quot;000002&quot;, message: &quot;参数不合法&quot; &#125; &#125; const result = userList.find(item =&gt; item.name === data.name &amp;&amp; item.password === crypto.createHash(&#x27;md5&#x27;).update(data.password).digest(&#x27;hex&#x27;)) if (result) &#123; // 生成token const token = jwt.sign( &#123; name: result.name &#125;, &quot;test_token&quot;, // secret &#123; expiresIn: 60 * 60 &#125; // 过期时间：60 * 60 s ); return ctx.body = &#123; code: &quot;0&quot;, message: &quot;登录成功&quot;, data: &#123; token &#125; &#125;; &#125; else &#123; return ctx.body = &#123; code: &quot;000002&quot;, message: &quot;用户名或密码错误&quot; &#125;; &#125; &#125;&#125;module.exports = UserController; 在前端接收到token后，一般情况会通过localStorage进行缓存，然后将token放到HTTP请求头Authorization 中，关于Authorization 的设置，前面要加上 Bearer ，注意后面带有空格 12345axios.interceptors.request.use(config =&gt; &#123; const token = localStorage.getItem(&#x27;token&#x27;); config.headers.common[&#x27;Authorization&#x27;] = &#x27;Bearer &#x27; + token; // 留意这里的 Authorization return config;&#125;) 校验token使用 koa-jwt 中间件进行验证，方式比较简单 123456/ 注意：放在路由前面app.use(koajwt(&#123; secret: &#x27;test_token&#x27;&#125;).unless(&#123; // 配置白名单 path: [/\\/api\\/register/, /\\/api\\/login/]&#125;)) secret 必须和 sign 时候保持一致 可以通过 unless 配置接口白名单，也就是哪些 URL 可以不用经过校验，像登陆/注册都可以不用校验 校验的中间件需要放在需要校验的路由前面，无法对前面的 URL 进行校验 获取token用户的信息方法如下： 12345router.get(&#x27;/api/userInfo&#x27;,async (ctx,next) =&gt;&#123; const authorization = ctx.header.authorization // 获取jwt const token = authorization.replace(&#x27;Beraer &#x27;,&#x27;&#x27;) const result = jwt.verify(token,&#x27;test_token&#x27;) ctx.body = result 注意：上述的HMA256加密算法为单秘钥的形式，一旦泄露后果非常的危险 在分布式系统中，每个子系统都要获取到秘钥，那么这个子系统根据该秘钥可以发布和验证令牌，但有些服务器只需要验证令牌 这时候可以采用非对称加密，利用私钥发布令牌，公钥验证令牌，加密算法可以选择RS256 三、优缺点优点： json具有通用性，所以可以跨语言 组成简单，字节占用小，便于传输 服务端无需保存会话信息，很容易进行水平扩展 一处生成，多处使用，可以在分布式系统中，解决单点登录问题 可防护CSRF攻击 缺点： payload部分仅仅是进行简单编码，所以只能用于存储逻辑必需的非敏感信息 需要保护好加密密钥，一旦泄露后果不堪设想 为避免token被劫持，最好使用https协议","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"如何实现文件上传？说说你的思路","slug":"node.如何实现文件上传？说说你的思路","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:20:59.215Z","comments":true,"path":"2019/11/10/node.如何实现文件上传？说说你的思路/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%9F%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%9A%84%E6%80%9D%E8%B7%AF/","excerpt":"","text":"如何实现文件上传？说说你的思路 一、是什么文件上传在日常开发中应用很广泛，我们发微博、发微信朋友圈都会用到了图片上传功能 因为浏览器限制，浏览器不能直接操作文件系统，需要通过浏览器所暴露出来的统一接口，由用户主动授权发起来访问文件动作，然后读取文件内容进指定内存里，最后执行提交请求操作，将内存里的文件内容数据上传到服务端，服务端解析前端传来的数据信息后存入文件里 对于文件上传，我们需要设置请求头为content-type:multipart/form-data multipart互联网上的混合资源，就是资源由多种元素组成，form-data表示可以使用HTML Forms 和 POST 方法上传文件 结构如下： 1234567891011121314151617181920212223242526POST /t2/upload.do HTTP/1.1User-Agent: SOHUWapRebotAccept-Language: zh-cn,zh;q=0.5Accept-Charset: GBK,utf-8;q=0.7,*;q=0.7Connection: keep-aliveContent-Length: 60408Content-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXCHost: w.sohu.com--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXCContent-Disposition: form-data; name=&quot;city&quot;Santa colo--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXCContent-Disposition: form-data;name=&quot;desc&quot;Content-Type: text/plain; charset=UTF-8Content-Transfer-Encoding: 8bit ...--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXCContent-Disposition: form-data;name=&quot;pic&quot;; filename=&quot;photo.jpg&quot;Content-Type: application/octet-streamContent-Transfer-Encoding: binary ... binary data of the jpg ...--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC-- boundary表示分隔符，如果要上传多个表单项，就要使用boundary分割，每个表单项由———XXX开始，以———XXX结尾 而xxx是即时生成的字符串，用以确保整个分隔符不会在文件或表单项的内容中出现 每个表单项必须包含一个 Content-Disposition 头，其他的头信息则为可选项， 比如 Content-Type Content-Disposition 包含了 type和 一个名字为name的 parameter，type 是 form-data，name参数的值则为表单控件（也即 field）的名字，如果是文件，那么还有一个 filename参数，值就是文件名 1Content-Disposition: form-data; name=&quot;user&quot;; filename=&quot;logo.png&quot; 至于使用multipart/form-data，是因为文件是以二进制的形式存在，其作用是专门用于传输大型二进制数据，效率高 二、如何实现关于文件的上传的上传，我们可以分成两步骤： 文件的上传 文件的解析 文件上传传统前端文件上传的表单结构如下： 12345&lt;form action=&quot;http://localhost:8080/api/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; value=&quot;&quot; multiple=&quot;multiple&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;&lt;/form&gt;action` 就是我们的提交到的接口，`enctype=&quot;multipart/form-data&quot;` 就是指定上传文件格式，`input` 的 `name` 属性一定要等于`file 文件解析在服务器中，这里采用koa2中间件的形式解析上传的文件数据，分别有下面两种形式： koa-body koa-multer koa-body安装依赖 1npm install koa-body 引入koa-body中间件 1234567const koaBody = require(&#x27;koa-body&#x27;);app.use(koaBody(&#123; multipart: true, formidable: &#123; maxFileSize: 200*1024*1024 // 设置上传文件大小最大限制，默认2M &#125;&#125;)); 获取上传的文件 1const file = ctx.request.files.file; // 获取上传文件 获取文件数据后，可以通过fs模块将文件保存到指定目录 123456789101112router.post(&#x27;/uploadfile&#x27;, async (ctx, next) =&gt; &#123; // 上传单个文件 const file = ctx.request.files.file; // 获取上传文件 // 创建可读流 const reader = fs.createReadStream(file.path); let filePath = path.join(__dirname, &#x27;public/upload/&#x27;) + `/$&#123;file.name&#125;`; // 创建可写流 const upStream = fs.createWriteStream(filePath); // 可读流通过管道写入可写流 reader.pipe(upStream); return ctx.body = &quot;上传成功！&quot;;&#125;); koa-multer安装依赖： 1npm install koa-multer 使用 multer 中间件实现文件上传 1234567891011121314151617181920const storage = multer.diskStorage(&#123; destination: (req, file, cb) =&gt; &#123; cb(null, &quot;./upload/&quot;) &#125;, filename: (req, file, cb) =&gt; &#123; cb(null, Date.now() + path.extname(file.originalname)) &#125;&#125;)const upload = multer(&#123; storage&#125;);const fileRouter = new Router();fileRouter.post(&quot;/upload&quot;, upload.single(&#x27;file&#x27;), (ctx, next) =&gt; &#123; console.log(ctx.req.file); // 获取文件&#125;)app.use(fileRouter.routes());","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"如果让你来设计一个分页功能, 你会怎么设计? 前后端如何交互?","slug":"node.如果让你来设计一个分页功能, 你会怎么设计_ 前后端如何交互_","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:20:53.093Z","comments":true,"path":"2019/11/10/node.如果让你来设计一个分页功能, 你会怎么设计_ 前后端如何交互_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD,%20%E4%BD%A0%E4%BC%9A%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1_%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BA%A4%E4%BA%92_/","excerpt":"","text":"如果让你来设计一个分页功能, 你会怎么设计? 前后端如何交互? 一、是什么在我们做数据查询的时候，如果数据量很大，比如几万条数据，放在一个页面显示的话显然不友好，这时候就需要采用分页显示的形式，如每次只显示10条数据 要实现分页功能，实际上就是从结果集中显示第110条记录作为第1页，显示第1120条记录作为第2页，以此类推 因此，分页实际上就是从结果集中截取出第M~N条记录 二、如何实现前端实现分页功能，需要后端返回必要的数据，如总的页数，总的数据量，当前页，当前的数据 123456789&#123; &quot;totalCount&quot;: 1836, // 总的条数 &quot;totalPages&quot;: 92, // 总页数 &quot;currentPage&quot;: 1 // 当前页数 &quot;data&quot;: [ // 当前页的数据 &#123; ... &#125;] 后端采用mysql作为数据的持久性存储 前端向后端发送目标的页码page以及每页显示数据的数量pageSize，默认情况每次取10条数据，则每一条数据的起始位置start为： 1const start = (page - 1) * pageSize 当确定了limit和start的值后，就能够确定SQL语句： 1const sql = `SELECT * FROM record limit $&#123;pageSize&#125; OFFSET $&#123;start&#125;;` 上述SQL语句表达的意思为：截取从start到start+pageSize之间（左闭右开）的数据 关于查询数据总数的SQL语句为，record为表名： 1SELECT COUNT(*) FROM record 因此后端的处理逻辑为： 获取用户参数页码数page和每页显示的数目 pageSize ，其中page 是必须传递的参数，pageSize为可选参数，默认为10 编写 SQL 语句，利用 limit 和 OFFSET 关键字进行分页查询 查询数据库，返回总数据量、总页数、当前页、当前页数据给前端 代码如下所示： 123456789101112131415161718192021222324252627282930313233343536router.all(&#x27;/api&#x27;, function (req, res, next) &#123; var param = &#x27;&#x27;; // 获取参数 if (req.method == &quot;POST&quot;) &#123; param = req.body; &#125; else &#123; param = req.query || req.params; &#125; if (param.page == &#x27;&#x27; || param.page == null || param.page == undefined) &#123; res.end(JSON.stringify(&#123; msg: &#x27;请传入参数page&#x27;, status: &#x27;102&#x27; &#125;)); return; &#125; const pageSize = param.pageSize || 10; const start = (param.page - 1) * pageSize; const sql = `SELECT * FROM record limit $&#123;pageSize&#125; OFFSET $&#123;start&#125;;` pool.getConnection(function (err, connection) &#123; if (err) throw err; connection.query(sql, function (err, results) &#123; connection.release(); if (err) &#123; throw err &#125; else &#123; // 计算总页数 var allCount = results[0][0][&#x27;COUNT(*)&#x27;]; var allPage = parseInt(allCount) / 20; var pageStr = allPage.toString(); // 不能被整除 if (pageStr.indexOf(&#x27;.&#x27;) &gt; 0) &#123; allPage = parseInt(pageStr.split(&#x27;.&#x27;)[0]) + 1; &#125; var list = results[1]; res.end(JSON.stringify(&#123; msg: &#x27;操作成功&#x27;, status: &#x27;200&#x27;, totalPages: allPage, currentPage: param.page, totalCount: allCount, data: list &#125;)); &#125; &#125;) &#125;)&#125;); 三、总结通过上面的分析，可以看到分页查询的关键在于，要首先确定每页显示的数量pageSize，然后根据当前页的索引pageIndex（从1开始），确定LIMIT和OFFSET应该设定的值： LIMIT 总是设定为 pageSize OFFSET 计算公式为 pageSize * (pageIndex - 1) 确定了这两个值，就能查询出第 N页的数据","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说 Node. js 有哪些全局对象？","slug":"node.说说 Node. js 有哪些全局对象？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:09.300Z","comments":true,"path":"2019/11/10/node.说说 Node. js 有哪些全局对象？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%20Node.%20js%20%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%EF%BC%9F/","excerpt":"","text":"说说 Node. js 有哪些全局对象？ 一、是什么在浏览器 JavaScript 中，通常window 是全局对象， 而 Nodejs中的全局对象是 global 在NodeJS里，是不可能在最外层定义一个变量，因为所有的用户代码都是当前模块的，只在当前模块里可用，但可以通过exports对象的使用将其传递给模块外部 所以，在NodeJS中，用var声明的变量并不属于全局的变量，只在当前模块生效 像上述的global全局对象则在全局作用域中，任何全局变量、函数、对象都是该对象的一个属性值 二、有哪些将全局对象分成两类： 真正的全局对象 模块级别的全局变量 真正的全局对象下面给出一些常见的全局对象： Class:Buffer process console clearInterval、setInterval clearTimeout、setTimeout global Class:Buffer可以处理二进制以及非Unicode编码的数据 在Buffer类实例化中存储了原始数据。Buffer类似于一个整数数组，在V8堆原始存储空间给它分配了内存 一旦创建了Buffer实例，则无法改变大小 process进程对象，提供有关当前过程的信息和控制 包括在执行node程序的过程中，如果需要传递参数，我们想要获取这个参数需要在process内置对象中 启动进程： 1node index.js 参数1 参数2 参数3 index.js文件如下： 123process.argv.forEach((val, index) =&gt; &#123; console.log(`$&#123;index&#125;: $&#123;val&#125;`);&#125;); 输出如下： 12345/usr/local/bin/node/Users/mjr/work/node/process-args.js参数1参数2参数3 除此之外，还包括一些其他信息如版本、操作系统等 console用来打印stdout和stderr 最常用的输入内容的方式：console.log 1console.log(&quot;hello&quot;); 清空控制台：console.clear 1console.clear 打印函数的调用栈：console.trace 12345678910111213function test() &#123; demo();&#125;function demo() &#123; foo();&#125;function foo() &#123; console.trace();&#125;test(); clearInterval、setInterval设置定时器与清除定时器 1setInterval(callback, delay[, ...args]) callback每delay毫秒重复执行一次 clearInterval则为对应发取消定时器的方法 clearTimeout、setTimeout设置延时器与清除延时器 1setTimeout(callback,delay[,...args]) callback在delay毫秒后执行一次 clearTimeout则为对应取消延时器的方法 global全局命名空间对象，墙面讲到的process、console、setTimeout等都有放到global中 1console.log(process === global.process) // true 模块级别的全局对象这些全局对象是模块中的变量，只是每个模块都有，看起来就像全局变量，像在命令交互中是不可以使用，包括： __dirname __filename exports module require __dirname获取当前文件所在的路径，不包括后面的文件名 从 /Users/mjr 运行 node example.js： 12console.log(__dirname);// 打印: /Users/mjr __filename获取当前文件所在的路径和文件名称，包括后面的文件名称 从 /Users/mjr 运行 node example.js： 12console.log(__filename);// 打印: /Users/mjr/example.js exportsmodule.exports 用于指定一个模块所导出的内容，即可以通过 require() 访问的内容 123exports.name = name;exports.age = age;exports.sayHello = sayHello; module对当前模块的引用，通过module.exports 用于指定一个模块所导出的内容，即可以通过 require() 访问的内容 require用于引入模块、 JSON、或本地文件。可以从 node_modules 引入模块。 可以使用相对路径引入本地模块或JSON文件，路径会根据__dirname定义的目录名或当前工作目录进行处理","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?","slug":"node.说说 Node 文件查找的优先级以及 Require 方法的文件查找策略_","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:05.890Z","comments":true,"path":"2019/11/10/node.说说 Node 文件查找的优先级以及 Require 方法的文件查找策略_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%20Node%20%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E4%BB%A5%E5%8F%8A%20Require%20%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E7%AD%96%E7%95%A5_/","excerpt":"","text":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略? 一、模块规范NodeJS对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发： 在Node中每一个js文件都是一个单独的模块 模块中包括CommonJS规范的核心变量：exports、module.exports、require 通过上述变量进行模块化开发 而模块化的核心是导出与导入，在Node中通过exports与module.exports负责对模块中的内容进行导出，通过require函数导入其他模块（自定义模块、系统模块、第三方库模块）中的内容 二、查找策略require方法接收一下几种参数的传递： 原生模块：http、fs、path等 相对路径的文件模块：./mod或../mod 绝对路径的文件模块：/pathtomodule/mod 目录作为模块：./dirname 非原生模块的文件模块：mod require参数较为简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同，如下图： 从上图可以看见，文件模块存在缓存区，寻找模块路径的时候都会优先从缓存中加载已经存在的模块 原生模块而像原生模块这些，通过require方法在解析文件名之后，优先检查模块是否在原生模块列表中，如果在则从原生模块中加载 绝对路径、相对路径如果require绝对路径的文件，则直接查找对应的路径，速度最快 相对路径的模块则相对于当前调用require的文件去查找 如果按确切的文件名没有找到模块，则 NodeJs 会尝试带上 .js、.json或 .node拓展名再加载 目录作为模块默认情况是根据根目录中package.json文件的main来指定目录模块，如： 12&#123; &quot;name&quot; : &quot;some-library&quot;, &quot;main&quot; : &quot;main.js&quot; &#125; 如果这是在./some-library node_modules目录中，则 require(&#39;./some-library&#39;) 会试图加载 ./some-library/main.js 如果目录里没有 package.json文件，或者 main入口不存在或无法解析，则会试图加载目录下的 index.js 或 index.node 文件 非原生模块在每个文件中都存在module.paths，表示模块的搜索路径，require就是根据其来寻找文件 在window下输出如下： 12[ &#x27;c:\\\\nodejs\\\\node_modules&#x27;,&#x27;c:\\\\node_modules&#x27; ] 可以看出module path的生成规则为：从当前文件目录开始查找node_modules目录；然后依次进入父目录，查找父目录下的node_modules目录，依次迭代，直到根目录下的node_modules目录 当都找不到的时候，则会从系统NODE_PATH环境变量查找 举个例子：如果在/home/ry/projects/foo.js文件里调用了 require(&#39;bar.js&#39;)，则 Node.js 会按以下顺序查找： /home/ry/projects/node_modules/bar.js /home/ry/node_modules/bar.js /home/node_modules/bar.js /node_modules/bar.js 这使得程序本地化它们的依赖，避免它们产生冲突 三、总结通过上面模块的文件查找策略之后，总结下文件查找的优先级： 缓存的模块优先级最高 如果是内置模块，则直接返回，优先级仅次缓存的模块 如果是绝对路径 / 开头，则从根目录找 如果是相对路径 ./开头，则从当前require文件相对位置找 如果文件没有携带后缀，先从js、json、node按顺序查找 如果是目录，则根据 package.json的main属性值决定目录下入口文件，默认情况为 index.js 如果文件为第三方模块，则会引入 node_modules 文件，如果不在当前仓库文件中，则自动从上级递归查找，直到根目录","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说Node中的EventEmitter? 如何实现一个EventEmitter?","slug":"node.说说Node中的EventEmitter_ 如何实现一个EventEmitter_","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:37.317Z","comments":true,"path":"2019/11/10/node.说说Node中的EventEmitter_ 如何实现一个EventEmitter_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4Node%E4%B8%AD%E7%9A%84EventEmitter_%20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAEventEmitter_/","excerpt":"","text":"说说Node中的EventEmitter? 如何实现一个EventEmitter? 一、是什么我们了解到，Node采用了事件驱动机制，而EventEmitter就是Node实现事件驱动的基础 在EventEmitter的基础上，Node几乎所有的模块都继承了这个类，这些模块拥有了自己的事件，可以绑定／触发监听器，实现了异步操作 Node.js 里面的许多对象都会分发事件，比如 fs.readStream 对象会在文件被打开的时候触发一个事件 这些产生事件的对象都是 events.EventEmitter 的实例，这些对象有一个 eventEmitter.on() 函数，用于将一个或多个函数绑定到命名事件上 二、使用方法Node的events模块只提供了一个EventEmitter类，这个类实现了Node异步事件驱动架构的基本模式——观察者模式 在这种模式中，被观察者(主体)维护着一组其他对象派来(注册)的观察者，有新的对象对主体感兴趣就注册观察者，不感兴趣就取消订阅，主体有更新的话就依次通知观察者们 基本代码如下所示： 1234567891011const EventEmitter = require(&#x27;events&#x27;)class MyEmitter extends EventEmitter &#123;&#125;const myEmitter = new MyEmitter()function callback() &#123; console.log(&#x27;触发了event事件！&#x27;)&#125;myEmitter.on(&#x27;event&#x27;, callback)myEmitter.emit(&#x27;event&#x27;)myEmitter.removeListener(&#x27;event&#x27;, callback); 通过实例对象的on方法注册一个名为event的事件，通过emit方法触发该事件，而removeListener用于取消事件的监听 关于其常见的方法如下： emitter.addListener/on(eventName, listener) ：添加类型为 eventName 的监听事件到事件数组尾部 emitter.prependListener(eventName, listener)：添加类型为 eventName 的监听事件到事件数组头部 emitter.emit(eventName[, …args])：触发类型为 eventName 的监听事件 emitter.removeListener/off(eventName, listener)：移除类型为 eventName 的监听事件 emitter.once(eventName, listener)：添加类型为 eventName 的监听事件，以后只能执行一次并删除 emitter.removeAllListeners([eventName])：移除全部类型为 eventName 的监听事件 三、实现过程通过上面的方法了解，EventEmitter是一个构造函数，内部存在一个包含所有事件的对象 12345class EventEmitter &#123; constructor() &#123; this.events = &#123;&#125;; &#125;&#125; 其中events存放的监听事件的函数的结构如下： 12345&#123; &quot;event1&quot;: [f1,f2,f3]， &quot;event2&quot;: [f4,f5]， ...&#125; 然后开始一步步实现实例方法，首先是emit，第一个参数为事件的类型，第二个参数开始为触发事件函数的参数，实现如下： 12345emit(type, ...args) &#123; this.events[type].forEach((item) =&gt; &#123; Reflect.apply(item, this, args); &#125;);&#125; 当实现了emit方法之后，然后实现on、addListener、prependListener这三个实例方法，都是添加事件监听触发函数，实现也是大同小异 1234567891011121314151617on(type, handler) &#123; if (!this.events[type]) &#123; this.events[type] = []; &#125; this.events[type].push(handler);&#125;addListener(type,handler)&#123; this.on(type,handler)&#125;prependListener(type, handler) &#123; if (!this.events[type]) &#123; this.events[type] = []; &#125; this.events[type].unshift(handler);&#125; 紧接着就是实现事件监听的方法removeListener/on 12345678910removeListener(type, handler) &#123; if (!this.events[type]) &#123; return; &#125; this.events[type] = this.events[type].filter(item =&gt; item !== handler);&#125;off(type,handler)&#123; this.removeListener(type,handler)&#125; 最后再来实现once方法， 再传入事件监听处理函数的时候进行封装，利用闭包的特性维护当前状态，通过fired属性值判断事件函数是否执行过 123456789101112131415161718once(type, handler) &#123; this.on(type, this._onceWrap(type, handler, this)); &#125; _onceWrap(type, handler, target) &#123; const state = &#123; fired: false, handler, type , target&#125;; const wrapFn = this._onceWrapper.bind(state); state.wrapFn = wrapFn; return wrapFn; &#125; _onceWrapper(...args) &#123; if (!this.fired) &#123; this.fired = true; Reflect.apply(this.handler, this.target, args); this.target.off(this.type, this.wrapFn); &#125; &#125; 完整代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class EventEmitter &#123; constructor() &#123; this.events = &#123;&#125;; &#125; on(type, handler) &#123; if (!this.events[type]) &#123; this.events[type] = []; &#125; this.events[type].push(handler); &#125; addListener(type,handler)&#123; this.on(type,handler) &#125; prependListener(type, handler) &#123; if (!this.events[type]) &#123; this.events[type] = []; &#125; this.events[type].unshift(handler); &#125; removeListener(type, handler) &#123; if (!this.events[type]) &#123; return; &#125; this.events[type] = this.events[type].filter(item =&gt; item !== handler); &#125; off(type,handler)&#123; this.removeListener(type,handler) &#125; emit(type, ...args) &#123; this.events[type].forEach((item) =&gt; &#123; Reflect.apply(item, this, args); &#125;); &#125; once(type, handler) &#123; this.on(type, this._onceWrap(type, handler, this)); &#125; _onceWrap(type, handler, target) &#123; const state = &#123; fired: false, handler, type , target&#125;; const wrapFn = this._onceWrapper.bind(state); state.wrapFn = wrapFn; return wrapFn; &#125; _onceWrapper(...args) &#123; if (!this.fired) &#123; this.fired = true; Reflect.apply(this.handler, this.target, args); this.target.off(this.type, this.wrapFn); &#125; &#125;&#125; 测试代码如下： 12345678910111213141516const ee = new EventEmitter();// 注册所有事件ee.once(&#x27;wakeUp&#x27;, (name) =&gt; &#123; console.log(`$&#123;name&#125; 1`); &#125;);ee.on(&#x27;eat&#x27;, (name) =&gt; &#123; console.log(`$&#123;name&#125; 2`) &#125;);ee.on(&#x27;eat&#x27;, (name) =&gt; &#123; console.log(`$&#123;name&#125; 3`) &#125;);const meetingFn = (name) =&gt; &#123; console.log(`$&#123;name&#125; 4`) &#125;;ee.on(&#x27;work&#x27;, meetingFn);ee.on(&#x27;work&#x27;, (name) =&gt; &#123; console.log(`$&#123;name&#125; 5`) &#125;);ee.emit(&#x27;wakeUp&#x27;, &#x27;xx&#x27;);ee.emit(&#x27;wakeUp&#x27;, &#x27;xx&#x27;); // 第二次没有触发ee.emit(&#x27;eat&#x27;, &#x27;xx&#x27;);ee.emit(&#x27;work&#x27;, &#x27;xx&#x27;);ee.off(&#x27;work&#x27;, meetingFn); // 移除事件ee.emit(&#x27;work&#x27;, &#x27;xx&#x27;); // 再次工作","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说你对Node.js 的理解？优缺点？应用场景？","slug":"node.说说你对Node.js 的理解？优缺点？应用场景？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:33.954Z","comments":true,"path":"2019/11/10/node.说说你对Node.js 的理解？优缺点？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9Node.js%20%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说你对Node.js 的理解？优缺点？应用场景？ 一、是什么Node.js 是一个开源与跨平台的 JavaScript 运行时环境 在浏览器外运行 V8 JavaScript 引擎（Google Chrome 的内核），利用事件驱动、非阻塞和异步输入输出模型等技术提高性能 可以理解为 Node.js 就是一个服务器端的、非阻塞式I/O的、事件驱动的JavaScript运行环境 非阻塞异步Nodejs采用了非阻塞型I/O机制，在做I/O操作的时候不会造成任何的阻塞，当完成之后，以时间的形式通知执行操作 例如在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率 事件驱动事件驱动就是当进来一个新的请求的时，请求将会被压入一个事件队列中，然后通过一个循环来检测队列中的事件状态变化，如果检测到有状态变化的事件，那么就执行该事件对应的处理代码，一般都是回调函数 比如读取一个文件，文件读取完毕后，就会触发对应的状态，然后通过对应的回调函数来进行处理 二、优缺点优点： 处理高并发场景性能更佳 适合I/O密集型应用，指的是应用在运行极限时，CPU占用率仍然比较低，大部分时间是在做 I/O硬盘内存读写操作 因为Nodejs是单线程，带来的缺点有： 不适合CPU密集型应用 只支持单核CPU，不能充分利用CPU 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃 三、应用场景借助Nodejs的特点和弊端，其应用场景分类如下： 善于I/O，不善于计算。因为Nodejs是一个单线程，如果计算（同步）太多，则会阻塞这个线程 大量并发的I/O，应用程序内部并不需要进行非常复杂的处理 与 websocket 配合，开发长连接的实时交互应用程序 具体场景可以表现为如下： 第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序 第二大类：基于web、canvas等多人联网游戏 第三大类：基于web的多人实时聊天客户端、聊天室、图文直播 第四大类：单页面浏览器应用程序 第五大类：操作数据库、为前端和移动端提供基于json的API 其实，Nodejs能实现几乎一切的应用，只考虑适不适合使用它","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说对 Node 中的 Process 的理解？有哪些常用方法？","slug":"node.说说对 Node 中的 Process 的理解？有哪些常用方法？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:18.544Z","comments":true,"path":"2019/11/10/node.说说对 Node 中的 Process 的理解？有哪些常用方法？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E5%AF%B9%20Node%20%E4%B8%AD%E7%9A%84%20Process%20%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9F/","excerpt":"","text":"说说对 Node 中的 Process 的理解？有哪些常用方法？ 一、是什么process 对象是一个全局变量，提供了有关当前 Node.js进程的信息并对其进行控制，作为一个全局变量 我们都知道，进程计算机系统进行资源分配和调度的基本单位，是操作系统结构的基础，是线程的容器 当我们启动一个js文件，实际就是开启了一个服务进程，每个进程都拥有自己的独立空间地址、数据栈，像另一个进程无法访问当前进程的变量、数据结构，只有数据通信后，进程之间才可以数据共享 由于JavaScript是一个单线程语言，所以通过node xxx启动一个文件后，只有一条主线程 二、属性与方法关于process常见的属性有如下： process.env：环境变量，例如通过 `process.env.NODE_ENV 获取不同环境项目配置信息 process.nextTick：这个在谈及 EventLoop 时经常为会提到 process.pid：获取当前进程id process.ppid：当前进程对应的父进程 process.cwd()：获取当前进程工作目录， process.platform：获取当前进程运行的操作系统平台 process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值 进程事件：process.on(‘uncaughtException’,cb) 捕获异常信息、 process.on(‘exit’,cb）进程推出监听 三个标准流：process.stdout 标准输出、 process.stdin 标准输入、 process.stderr 标准错误输出 process.title 指定进程名称，有的时候需要给进程指定一个名称 下面再稍微介绍下某些方法的使用： process.cwd()返回当前 Node进程执行的目录 一个Node 模块 A 通过 NPM 发布，项目 B 中使用了模块 A。在 A 中需要操作 B 项目下的文件时，就可以用 process.cwd() 来获取 B 项目的路径 process.argv在终端通过 Node 执行命令的时候，通过 process.argv 可以获取传入的命令行参数，返回值是一个数组： 0: Node 路径（一般用不到，直接忽略） 1: 被执行的 JS 文件路径（一般用不到，直接忽略） 2~n: 真实传入命令的参数 所以，我们只要从 process.argv[2] 开始获取就好了 1const args = process.argv.slice(2); process.env返回一个对象，存储当前环境相关的所有信息，一般很少直接用到。 一般我们会在 process.env 上挂载一些变量标识当前的环境。比如最常见的用 process.env.NODE_ENV 区分 development 和 production 在 vue-cli 的源码中也经常会看到 process.env.VUE_CLI_DEBUG 标识当前是不是 DEBUG 模式 process.nextTick()我们知道NodeJs是基于事件轮询，在这个过程中，同一时间只会处理一件事情 在这种处理模式下，process.nextTick()就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行 例如下面例子将一个foo函数在下一个时间点调用 123456function foo() &#123; console.error(&#x27;foo&#x27;);&#125;process.nextTick(foo);console.error(&#x27;bar&#x27;); 输出结果为bar、foo 虽然下述方式也能实现同样效果： 12setTimeout(foo, 0);console.log(&#x27;bar&#x27;); 两者区别在于： process.nextTick()会在这一次event loop的call stack清空后（下一次event loop开始前）再调用callback setTimeout()是并不知道什么时候call stack清空的，所以何时调用callback函数是不确定的","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说对 Node 中的 Buffer 的理解？应用场景？","slug":"node.说说对 Node 中的 Buffer 的理解？应用场景？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:12.277Z","comments":true,"path":"2019/11/10/node.说说对 Node 中的 Buffer 的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E5%AF%B9%20Node%20%E4%B8%AD%E7%9A%84%20Buffer%20%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说对 Node 中的 Buffer 的理解？应用场景？ 一、是什么在Node应用中，需要处理网络协议、操作数据库、处理图片、接收上传文件等，在网络流和文件的操作中，要处理大量二进制数据，而Buffer就是在内存中开辟一片区域（初次初始化为8KB），用来存放二进制数据 在上述操作中都会存在数据流动，每个数据流动的过程中，都会有一个最小或最大数据量 如果数据到达的速度比进程消耗的速度快，那么少数早到达的数据会处于等待区等候被处理。反之，如果数据到达的速度比进程消耗的数据慢，那么早先到达的数据需要等待一定量的数据到达之后才能被处理 这里的等待区就指的缓冲区（Buffer），它是计算机中的一个小物理单位，通常位于计算机的 RAM 中 简单来讲，Nodejs不能控制数据传输的速度和到达时间，只能决定何时发送数据，如果还没到发送时间，则将数据放在Buffer中，即在RAM中，直至将它们发送完毕 上面讲到了Buffer是用来存储二进制数据，其的形式可以理解成一个数组，数组中的每一项，都可以保存8位二进制：00000000，也就是一个字节 例如： 1const buffer = Buffer.from(&quot;why&quot;) 其存储过程如下图所示： 二、使用方法Buffer 类在全局作用域中，无须require导入 创建Buffer的方法有很多种，我们讲讲下面的两种常见的形式： Buffer.from() Buffer.alloc() Buffer.from()123456const b1 = Buffer.from(&#x27;10&#x27;);const b2 = Buffer.from(&#x27;10&#x27;, &#x27;utf8&#x27;);const b3 = Buffer.from([10]);const b4 = Buffer.from(b3);console.log(b1, b2, b3, b4); // &lt;Buffer 31 30&gt; &lt;Buffer 31 30&gt; &lt;Buffer 0a&gt; &lt;Buffer 0a&gt; Buffer.alloc()1234const bAlloc1 = Buffer.alloc(10); // 创建一个大小为 10 个字节的缓冲区const bAlloc2 = Buffer.alloc(10, 1); // 建一个长度为 10 的 Buffer,其中全部填充了值为 `1` 的字节console.log(bAlloc1); // &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;console.log(bAlloc2); // &lt;Buffer 01 01 01 01 01 01 01 01 01 01&gt; 在上面创建buffer后，则能够toString的形式进行交互，默认情况下采取utf8字符编码形式，如下 123456const buffer = Buffer.from(&quot;你好&quot;);console.log(buffer);// &lt;Buffer e4 bd a0 e5 a5 bd&gt;const str = buffer.toString();console.log(str);// 你好 如果编码与解码不是相同的格式则会出现乱码的情况，如下： 123456const buffer = Buffer.from(&quot;你好&quot;,&quot;utf-8 &quot;);console.log(buffer);// &lt;Buffer e4 bd a0 e5 a5 bd&gt;const str = buffer.toString(&quot;ascii&quot;);console.log(str); // d= e%= 当设定的范围导致字符串被截断的时候，也会存在乱码情况，如下： 1234567const buf = Buffer.from(&#x27;Node.js 技术栈&#x27;, &#x27;UTF-8&#x27;);console.log(buf) // &lt;Buffer 4e 6f 64 65 2e 6a 73 20 e6 8a 80 e6 9c af e6 a0 88&gt;console.log(buf.length) // 17console.log(buf.toString(&#x27;UTF-8&#x27;, 0, 9)) // Node.js �console.log(buf.toString(&#x27;UTF-8&#x27;, 0, 11)) // Node.js 技 所支持的字符集有如下： ascii：仅支持 7 位 ASCII 数据，如果设置去掉高位的话，这种编码是非常快的 utf8：多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8 utf16le：2 或 4 个字节，小字节序编码的 Unicode 字符，支持代理对（U+10000至 U+10FFFF） ucs2，utf16le 的别名 base64：Base64 编码 latin：一种把 Buffer 编码成一字节编码的字符串的方式 binary：latin1 的别名， hex：将每个字节编码为两个十六进制字符 三、应用场景Buffer的应用场景常常与流的概念联系在一起，例如有如下： I/O操作 加密解密 zlib.js I/O操作通过流的形式，将一个文件的内容读取到另外一个文件 123456const fs = require(&#x27;fs&#x27;);const inputStream = fs.createReadStream(&#x27;input.txt&#x27;); // 创建可读流const outputStream = fs.createWriteStream(&#x27;output.txt&#x27;); // 创建可写流inputStream.pipe(outputStream); // 管道读写 加解密在一些加解密算法中会遇到使用 Buffer，例如 crypto.createCipheriv 的第二个参数 key 为 string 或 Buffer 类型 zlib.jszlib.js 为 Node.js 的核心库之一，其利用了缓冲区（Buffer）的功能来操作二进制数据流，提供了压缩或解压功能","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说对 Node 中的 fs 模块的理解? 有哪些常用方法?","slug":"node.说说对 Node 中的 fs 模块的理解_ 有哪些常用方法_","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:15.199Z","comments":true,"path":"2019/11/10/node.说说对 Node 中的 fs 模块的理解_ 有哪些常用方法_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E5%AF%B9%20Node%20%E4%B8%AD%E7%9A%84%20fs%20%E6%A8%A1%E5%9D%97%E7%9A%84%E7%90%86%E8%A7%A3_%20%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95_/","excerpt":"","text":"说说对 Node 中的 fs 模块的理解? 有哪些常用方法? 一、是什么fs（file system），该模块提供本地文件的读写能力，基本上是POSIX文件操作命令的简单包装 可以说，所有与文件的操作都是通过fs核心模块实现 导入模块如下： 1const fs = require(&#x27;fs&#x27;); 这个模块对所有文件系统操作提供异步（不具有sync 后缀）和同步（具有 sync后缀）两种操作方式，而供开发者选择 二、文件知识在计算机中有关于文件的知识： 权限位 mode 标识位 flag 文件描述为 fd 权限位 mode 针对文件所有者、文件所属组、其他用户进行权限分配，其中类型又分成读、写和执行，具备权限位4、2、1，不具备权限为0 如在linux查看文件权限位： 12drwxr-xr-x 1 PandaShen 197121 0 Jun 28 14:41 core-rw-r--r-- 1 PandaShen 197121 293 Jun 23 17:44 index.md 在开头前十位中，d为文件夹，-为文件，后九位就代表当前用户、用户所属组和其他用户的权限位，按每三位划分，分别代表读（r）、写（w）和执行（x），- 代表没有当前位对应的权限 标识位标识位代表着对文件的操作方式，如可读、可写、即可读又可写等等，如下表所示： 符号 含义 r 读取文件，如果文件不存在则抛出异常。 r+ 读取并写入文件，如果文件不存在则抛出异常。 rs 读取并写入文件，指示操作系统绕开本地文件系统缓存。 w 写入文件，文件不存在会被创建，存在则清空后写入。 wx 写入文件，排它方式打开。 w+ 读取并写入文件，文件不存在则创建文件，存在则清空后写入。 wx+ 和 w+ 类似，排他方式打开。 a 追加写入，文件不存在则创建文件。 ax 与 a 类似，排他方式打开。 a+ 读取并追加写入，不存在则创建。 ax+ 与 a+ 类似，排他方式打开。 文件描述为 fd操作系统会为每个打开的文件分配一个名为文件描述符的数值标识，文件操作使用这些文件描述符来识别与追踪每个特定的文件 Window系统使用了一个不同但概念类似的机制来追踪资源，为方便用户，NodeJS抽象了不同操作系统间的差异，为所有打开的文件分配了数值的文件描述符 在 NodeJS中，每操作一个文件，文件描述符是递增的，文件描述符一般从 3 开始，因为前面有 0、1、2三个比较特殊的描述符，分别代表 process.stdin（标准输入）、process.stdout（标准输出）和 process.stderr（错误输出） 三、方法下面针对fs模块常用的方法进行展开： 文件读取 文件写入 文件追加写入 文件拷贝 创建目录 文件读取fs.readFileSync同步读取，参数如下： 第一个参数为读取文件的路径或文件描述符 第二个参数为 options，默认值为 null，其中有 encoding（编码，默认为 null）和 flag（标识位，默认为 r），也可直接传入 encoding 结果为返回文件的内容 1234567const fs = require(&quot;fs&quot;);let buf = fs.readFileSync(&quot;1.txt&quot;);let data = fs.readFileSync(&quot;1.txt&quot;, &quot;utf8&quot;);console.log(buf); // &lt;Buffer 48 65 6c 6c 6f&gt;console.log(data); // Hello fs.readFile异步读取方法 readFile 与 readFileSync 的前两个参数相同，最后一个参数为回调函数，函数内有两个参数 err（错误）和 data（数据），该方法没有返回值，回调函数在读取文件成功后执行 1234567const fs = require(&quot;fs&quot;);fs.readFile(&quot;1.txt&quot;, &quot;utf8&quot;, (err, data) =&gt; &#123; if(!err)&#123; console.log(data); // Hello &#125;&#125;); 文件写入writeFileSync同步写入，有三个参数： 第一个参数为写入文件的路径或文件描述符 第二个参数为写入的数据，类型为 String 或 Buffer 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 w）和 mode（权限位，默认为 0o666），也可直接传入 encoding 123456const fs = require(&quot;fs&quot;);fs.writeFileSync(&quot;2.txt&quot;, &quot;Hello world&quot;);let data = fs.readFileSync(&quot;2.txt&quot;, &quot;utf8&quot;);console.log(data); // Hello world writeFile异步写入，writeFile 与 writeFileSync 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 err（错误），回调函数在文件写入数据成功后执行 123456789const fs = require(&quot;fs&quot;);fs.writeFile(&quot;2.txt&quot;, &quot;Hello world&quot;, err =&gt; &#123; if (!err) &#123; fs.readFile(&quot;2.txt&quot;, &quot;utf8&quot;, (err, data) =&gt; &#123; console.log(data); // Hello world &#125;); &#125;&#125;); 文件追加写入appendFileSync参数如下： 第一个参数为写入文件的路径或文件描述符 第二个参数为写入的数据，类型为 String 或 Buffer 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 a）和 mode（权限位，默认为 0o666），也可直接传入 encoding 1234const fs = require(&quot;fs&quot;);fs.appendFileSync(&quot;3.txt&quot;, &quot; world&quot;);let data = fs.readFileSync(&quot;3.txt&quot;, &quot;utf8&quot;); appendFile异步追加写入方法 appendFile 与 appendFileSync 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 err（错误），回调函数在文件追加写入数据成功后执行 123456789const fs = require(&quot;fs&quot;);fs.appendFile(&quot;3.txt&quot;, &quot; world&quot;, err =&gt; &#123; if (!err) &#123; fs.readFile(&quot;3.txt&quot;, &quot;utf8&quot;, (err, data) =&gt; &#123; console.log(data); // Hello world &#125;); &#125;&#125;); 文件拷贝copyFileSync同步拷贝 123456const fs = require(&quot;fs&quot;);fs.copyFileSync(&quot;3.txt&quot;, &quot;4.txt&quot;);let data = fs.readFileSync(&quot;4.txt&quot;, &quot;utf8&quot;);console.log(data); // Hello world copyFile异步拷贝 1234567const fs = require(&quot;fs&quot;);fs.copyFile(&quot;3.txt&quot;, &quot;4.txt&quot;, () =&gt; &#123; fs.readFile(&quot;4.txt&quot;, &quot;utf8&quot;, (err, data) =&gt; &#123; console.log(data); // Hello world &#125;);&#125;); 创建目录mkdirSync同步创建，参数为一个目录的路径，没有返回值，在创建目录的过程中，必须保证传入的路径前面的文件目录都存在，否则会抛出异常 12// 假设已经有了 a 文件夹和 a 下的 b 文件夹fs.mkdirSync(&quot;a/b/c&quot;) mkdir异步创建，第二个参数为回调函数 123fs.mkdir(&quot;a/b/c&quot;, err =&gt; &#123; if (!err) console.log(&quot;创建成功&quot;);&#125;);","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说对 Node 中的 Stream 的理解？应用场景？","slug":"node.说说对 Node 中的 Stream 的理解？应用场景？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:22.160Z","comments":true,"path":"2019/11/10/node.说说对 Node 中的 Stream 的理解？应用场景？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E5%AF%B9%20Node%20%E4%B8%AD%E7%9A%84%20Stream%20%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F/","excerpt":"","text":"说说对 Node 中的 Stream 的理解？应用场景？ 一、是什么流（Stream），是一种数据传输手段，是端到端信息交换的一种方式，是有顺序的，是逐块读取数据、处理内容，用于顺序读取输入或写入输出 在很多时候，流（Stream）是字节流（Byte Steram）的简称，也就是长长的一串字节 除了字节流，还可以有视频流、音频流、数据流 流的独特之处在于，它不像传统的程序那样一次将一个文件读入内存，而是逐块读取数据、处理其内容，而不是将其全部保存在内存中 流可以分成三部分：source、dest、pipe 在source和dest之间有一个连接的管道pipe,它的基本语法是source.pipe(dest)，source和dest就是通过pipe连接，让数据从source流向了dest，如下图所示： 二、种类在NodeJS，几乎所有的地方都使用到了流的概念，分成四个种类： 可写流：可写入数据的流。例如 fs.createWriteStream() 可以使用流将数据写入文件 可读流：可读取数据的流。例如fs.createReadStream() 可以从文件读取内容 双工流：既可读又可写的流。例如 net.Socket 转换流：可以在数据写入和读取时修改或转换数据的流。例如，在文件压缩操作中，可以向文件写入压缩数据，并从文件中读取解压数据 在NodeJS中HTTP服务器模块中，request 是可读流，response 是可写流。还有fs 模块，能同时处理可读和可写文件流 可读流和可写流都是单向的，比较容易理解，而另外两个是双向的 双工流之前了解过websocket通信，是一个全双工通信，发送方和接受方都是各自独立的方法，发送和接收都没有任何关系 如下图所示： 基本代码如下： 12345678910const &#123; Duplex &#125; = require(&#x27;stream&#x27;);const myDuplex = new Duplex(&#123; read(size) &#123; // ... &#125;, write(chunk, encoding, callback) &#123; // ... &#125;&#125;); 转换流转换流的演示图如下所示： 比如一个 babel，把es6转换为es5，我们在左边写入 es6，从右边读取 es5 基本代码如下所示： 1234567const &#123; Transform &#125; = require(&#x27;stream&#x27;);const myTransform = new Transform(&#123; transform(chunk, encoding, callback) &#123; // ... &#125;&#125;); 三、应用场景stream的应用场景主要就是处理IO操作，而http请求和文件操作都属于IO操作 思想一下，如果一次IO操作过大，硬件的开销就过大，而将此次大的IO操作进行分段操作，让数据像水管一样流动，知道流动完成 常见的场景有： get请求返回文件给客户端 文件操作 一些打包工具的底层操作 get请求返回文件给客户端使用stream流返回文件，res也是一个stream对象，通过pipe管道将文件数据返回 123456789const server = http.createServer(function (req, res) &#123; const method = req.method; // 获取请求方法 if (method === &#x27;GET&#x27;) &#123; // get 请求 const fileName = path.resolve(__dirname, &#x27;data.txt&#x27;); let stream = fs.createReadStream(fileName); stream.pipe(res); // 将 res 作为 stream 的 dest &#125;&#125;);server.listen(8000); 文件操作创建一个可读数据流readStream，一个可写数据流writeStream，通过pipe管道把数据流转过去 12345678910111213141516const fs = require(&#x27;fs&#x27;)const path = require(&#x27;path&#x27;)// 两个文件名const fileName1 = path.resolve(__dirname, &#x27;data.txt&#x27;)const fileName2 = path.resolve(__dirname, &#x27;data-bak.txt&#x27;)// 读取文件的 stream 对象const readStream = fs.createReadStream(fileName1)// 写入文件的 stream 对象const writeStream = fs.createWriteStream(fileName2)// 通过 pipe执行拷贝，数据流转readStream.pipe(writeStream)// 数据读取完成监听，即拷贝完成readStream.on(&#x27;end&#x27;, function () &#123; console.log(&#x27;拷贝完成&#x27;)&#125;) 一些打包工具的底层操作目前一些比较火的前端打包构建工具，都是通过node.js编写的，打包和构建的过程肯定是文件频繁操作的过程，离不开stream，如gulp","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说对 Node.js 中的事件循环机制理解?","slug":"node.说说对 Node.js 中的事件循环机制理解_","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:25.313Z","comments":true,"path":"2019/11/10/node.说说对 Node.js 中的事件循环机制理解_/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E5%AF%B9%20Node.js%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6%E7%90%86%E8%A7%A3_/","excerpt":"","text":"说说对 Node.js 中的事件循环机制理解? 一、是什么在浏览器事件循环中，我们了解到javascript在浏览器中的事件循环机制，其是根据HTML5定义的规范来实现 而在NodeJS中，事件循环是基于libuv实现，libuv是一个多平台的专注于异步IO的库，如下图最右侧所示： 上图EVENT_QUEUE 给人看起来只有一个队列，但EventLoop存在6个阶段，每个阶段都有对应的一个先进先出的回调队列 二、流程上节讲到事件循环分成了六个阶段，对应如下： timers阶段：这个阶段执行timer（setTimeout、setInterval）的回调 定时器检测阶段(timers)：本阶段执行 timer 的回调，即 setTimeout、setInterval 里面的回调函数 I/O事件回调阶段(I/O callbacks)：执行延迟到下一个循环迭代的 I/O 回调，即上一轮循环中未被执行的一些I/O回调 闲置阶段(idle, prepare)：仅系统内部使用 轮询阶段(poll)：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞 检查阶段(check)：setImmediate() 回调函数在这里执行 关闭事件回调阶段(close callback)：一些关闭的回调函数，如：socket.on(‘close’, …) 每个阶段对应一个队列，当事件循环进入某个阶段时, 将会在该阶段内执行回调，直到队列耗尽或者回调的最大数量已执行, 那么将进入下一个处理阶段 除了上述6个阶段，还存在process.nextTick，其不属于事件循环的任何一个阶段，它属于该阶段与下阶段之间的过渡, 即本阶段执行结束, 进入下一个阶段前, 所要执行的回调，类似插队 流程图如下所示： 在Node中，同样存在宏任务和微任务，与浏览器中的事件循环相似 微任务对应有： next tick queue：process.nextTick other queue：Promise的then回调、queueMicrotask 宏任务对应有： timer queue：setTimeout、setInterval poll queue：IO事件 check queue：setImmediate close queue：close事件 其执行顺序为： next tick microtask queue other microtask queue timer queue poll queue check queue close queue 三、题目通过上面的学习，下面开始看看题目 12345678910111213141516171819202122232425262728293031323334353637async function async1() &#123; console.log(&#x27;async1 start&#x27;) await async2() console.log(&#x27;async1 end&#x27;)&#125;async function async2() &#123; console.log(&#x27;async2&#x27;)&#125;console.log(&#x27;script start&#x27;)setTimeout(function () &#123; console.log(&#x27;setTimeout0&#x27;)&#125;, 0)setTimeout(function () &#123; console.log(&#x27;setTimeout2&#x27;)&#125;, 300)setImmediate(() =&gt; console.log(&#x27;setImmediate&#x27;));process.nextTick(() =&gt; console.log(&#x27;nextTick1&#x27;));async1();process.nextTick(() =&gt; console.log(&#x27;nextTick2&#x27;));new Promise(function (resolve) &#123; console.log(&#x27;promise1&#x27;) resolve(); console.log(&#x27;promise2&#x27;)&#125;).then(function () &#123; console.log(&#x27;promise3&#x27;)&#125;)console.log(&#x27;script end&#x27;) 分析过程： 先找到同步任务，输出script start 遇到第一个 setTimeout，将里面的回调函数放到 timer 队列中 遇到第二个 setTimeout，300ms后将里面的回调函数放到 timer 队列中 遇到第一个setImmediate，将里面的回调函数放到 check 队列中 遇到第一个 nextTick，将其里面的回调函数放到本轮同步任务执行完毕后执行 执行 async1函数，输出 async1 start 执行 async2 函数，输出 async2，async2 后面的输出 async1 end进入微任务，等待下一轮的事件循环 遇到第二个，将其里面的回调函数放到本轮同步任务执行完毕后执行 遇到 new Promise，执行里面的立即执行函数，输出 promise1、promise2 then里面的回调函数进入微任务队列 遇到同步任务，输出 script end 执行下一轮回到函数，先依次输出 nextTick 的函数，分别是 nextTick1、nextTick2 然后执行微任务队列，依次输出 async1 end、promise3 执行timer 队列，依次输出 setTimeout0 接着执行 check 队列，依次输出 setImmediate 300ms后，timer 队列存在任务，执行输出 setTimeout2 执行结果如下： 12345678910111213script startasync1 startasync2promise1promise2script endnextTick1nextTick2async1 endpromise3setTimeout0setImmediatesetTimeout2 最后有一道是关于setTimeout与setImmediate的输出顺序 1234567setTimeout(() =&gt; &#123; console.log(&quot;setTimeout&quot;);&#125;, 0);setImmediate(() =&gt; &#123; console.log(&quot;setImmediate&quot;);&#125;); 输出情况如下： 1234567情况一：setTimeoutsetImmediate情况二：setImmediatesetTimeout 分析下流程： 外层同步代码一次性全部执行完，遇到异步API就塞到对应的阶段 遇到setTimeout，虽然设置的是0毫秒触发，但实际上会被强制改成1ms，时间到了然后塞入times阶段 遇到setImmediate塞入check阶段 同步代码执行完毕，进入Event Loop 先进入times阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足setTimeout条件，执行回调，如果没过1毫秒，跳过 跳过空的阶段，进入check阶段，执行setImmediate回调 这里的关键在于这1ms，如果同步代码执行时间较长，进入Event Loop的时候1毫秒已经过了，setTimeout先执行，如果1毫秒还没到，就先执行了setImmediate","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"说说对中间件概念的理解，如何封装 node 中间件？","slug":"node.说说对中间件概念的理解，如何封装 node 中间件？","date":"2019-11-09T16:00:00.000Z","updated":"2022-08-05T07:21:28.614Z","comments":true,"path":"2019/11/10/node.说说对中间件概念的理解，如何封装 node 中间件？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/11/10/node.%E8%AF%B4%E8%AF%B4%E5%AF%B9%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%20node%20%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9F/","excerpt":"","text":"说说对中间件概念的理解，如何封装 node 中间件？ 一、是什么中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的 在NodeJS中，中间件主要是指封装http请求细节处理的方法 例如在express、koa等web框架中，中间件的本质为一个回调函数，参数包含请求对象、响应对象和执行下一个中间件的函数 在这些中间件函数中，我们可以执行业务逻辑代码，修改请求和响应对象、返回响应数据等操作 二、封装koa是基于NodeJS当前比较流行的web框架，本身支持的功能并不多，功能都可以通过中间件拓展实现。通过添加不同的中间件，实现不同的需求，从而构建一个 Koa 应用 Koa 中间件采用的是洋葱圈模型，每次执行下一个中间件传入两个参数： ctx ：封装了request 和 response 的变量 next ：进入下一个要执行的中间件的函数 下面就针对koa进行中间件的封装： Koa的中间件就是函数，可以是async 函数，或是普通函数 12345678910111213141516// async 函数app.use(async (ctx, next) =&gt; &#123; const start = Date.now(); await next(); const ms = Date.now() - start; console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;ms`);&#125;);// 普通函数app.use((ctx, next) =&gt; &#123; const start = Date.now(); return next().then(() =&gt; &#123; const ms = Date.now() - start; console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;ms`); &#125;);&#125;); 下面则通过中间件封装http请求过程中几个常用的功能： token校验123456789101112131415161718module.exports = (options) =&gt; async (ctx, next) &#123; try &#123; // 获取 token const token = ctx.header.authorization if (token) &#123; try &#123; // verify 函数验证 token，并获取用户相关信息 await verify(token) &#125; catch (err) &#123; console.log(err) &#125; &#125; // 进入下一个中间件 await next() &#125; catch (err) &#123; console.log(err) &#125;&#125; 日志模块12345678910const fs = require(&#x27;fs&#x27;)module.exports = (options) =&gt; async (ctx, next) =&gt; &#123; const startTime = Date.now() const requestTime = new Date() await next() const ms = Date.now() - startTime; let logout = `$&#123;ctx.request.ip&#125; -- $&#123;requestTime&#125; -- $&#123;ctx.method&#125; -- $&#123;ctx.url&#125; -- $&#123;ms&#125;ms`; // 输出日志文件 fs.appendFileSync(&#x27;./log.txt&#x27;, logout + &#x27;\\n&#x27;)&#125; Koa存在很多第三方的中间件，如koa-bodyparser、koa-static等 下面再来看看它们的大体的简单实现： koa-bodyparserkoa-bodyparser 中间件是将我们的 post 请求和表单提交的查询字符串转换成对象，并挂在 ctx.request.body 上，方便我们在其他中间件或接口处取值 12345678910111213141516171819202122232425262728293031323334353637// 文件：my-koa-bodyparser.jsconst querystring = require(&quot;querystring&quot;);module.exports = function bodyParser() &#123; return async (ctx, next) =&gt; &#123; await new Promise((resolve, reject) =&gt; &#123; // 存储数据的数组 let dataArr = []; // 接收数据 ctx.req.on(&quot;data&quot;, data =&gt; dataArr.push(data)); // 整合数据并使用 Promise 成功 ctx.req.on(&quot;end&quot;, () =&gt; &#123; // 获取请求数据的类型 json 或表单 let contentType = ctx.get(&quot;Content-Type&quot;); // 获取数据 Buffer 格式 let data = Buffer.concat(dataArr).toString(); if (contentType === &quot;application/x-www-form-urlencoded&quot;) &#123; // 如果是表单提交，则将查询字符串转换成对象赋值给 ctx.request.body ctx.request.body = querystring.parse(data); &#125; else if (contentType === &quot;applaction/json&quot;) &#123; // 如果是 json，则将字符串格式的对象转换成对象赋值给 ctx.request.body ctx.request.body = JSON.parse(data); &#125; // 执行成功的回调 resolve(); &#125;); &#125;); // 继续向下执行 await next(); &#125;;&#125;; koa-statickoa-static 中间件的作用是在服务器接到请求时，帮我们处理静态文件 12345678910111213141516171819202122232425262728293031323334353637const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);const mime = require(&quot;mime&quot;);const &#123; promisify &#125; = require(&quot;util&quot;);// 将 stat 和 access 转换成 Promiseconst stat = promisify(fs.stat);const access = promisify(fs.access)module.exports = function (dir) &#123; return async (ctx, next) =&gt; &#123; // 将访问的路由处理成绝对路径，这里要使用 join 因为有可能是 / let realPath = path.join(dir, ctx.path); try &#123; // 获取 stat 对象 let statObj = await stat(realPath); // 如果是文件，则设置文件类型并直接响应内容，否则当作文件夹寻找 index.html if (statObj.isFile()) &#123; ctx.set(&quot;Content-Type&quot;, `$&#123;mime.getType()&#125;;charset=utf8`); ctx.body = fs.createReadStream(realPath); &#125; else &#123; let filename = path.join(realPath, &quot;index.html&quot;); // 如果不存在该文件则执行 catch 中的 next 交给其他中间件处理 await access(filename); // 存在设置文件类型并响应内容 ctx.set(&quot;Content-Type&quot;, &quot;text/html;charset=utf8&quot;); ctx.body = fs.createReadStream(filename); &#125; &#125; catch (e) &#123; await next(); &#125; &#125;&#125; 三、总结在实现中间件时候，单个中间件应该足够简单，职责单一，中间件的代码编写应该高效，必要的时候通过缓存重复获取数据 koa本身比较简洁，但是通过中间件的机制能够实现各种所需要的功能，使得web应用具备良好的可拓展性和组合性 通过将公共逻辑的处理编写在中间件中，可以不用在每一个接口回调中做相同的代码编写，减少了冗杂代码，过程就如装饰者模式","categories":[{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]},{"title":"介绍一下CSS中的Grid网格布局","slug":"css.介绍一下CSS中的Grid网格布局","date":"2019-09-10T16:00:00.000Z","updated":"2022-08-05T07:09:40.871Z","comments":true,"path":"2019/09/11/css.介绍一下CSS中的Grid网格布局/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/09/11/css.%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BCSS%E4%B8%AD%E7%9A%84Grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/","excerpt":"","text":"介绍一下CSS中的Grid网格布局? 一、是什么Grid 布局即网格布局，是一个二维的布局方式，由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系 这与之前讲到的flex一维布局不相同 设置display:grid/inline-grid的元素就是网格布局容器，这样就能出发浏览器渲染引擎的网格布局算法 1234567&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item item-1&quot;&gt; &lt;p class=&quot;sub-item&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item item-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;item item-3&quot;&gt;&lt;/div&gt;&lt;/div&gt; 上述代码实例中，.container元素就是网格布局容器，.item元素就是网格的项目，由于网格元素只能是容器的顶层子元素，所以p元素并不是网格元素 这里提一下，网格线概念，有助于下面对grid-column系列属性的理解 网格线，即划分网格的线，如下图所示： 上图是一个 2 x 3 的网格，共有3根水平网格线和4根垂直网格线 二、属性同样，Grid 布局属性可以分为两大类： 容器属性， 项目属性 关于容器属性有如下： display 属性文章开头讲到，在元素上设置display：grid 或 display：inline-grid 来创建一个网格容器 display：grid 则该容器是一个块级元素 display: inline-grid 则容器元素为行内元素 grid-template-columns 属性，grid-template-rows 属性grid-template-columns 属性设置列宽，grid-template-rows 属性设置行高 12345678.wrapper &#123; display: grid; /* 声明了三列，宽度分别为 200px 200px 200px */ grid-template-columns: 200px 200px 200px; grid-gap: 5px; /* 声明了两行，行高分别为 50px 50px */ grid-template-rows: 50px 50px;&#125; 以上表示固定列宽为 200px 200px 200px，行高为 50px 50px 上述代码可以看到重复写单元格宽高，通过使用repeat()函数，可以简写重复的值 第一个参数是重复的次数 第二个参数是重复的值 所以上述代码可以简写成 123456.wrapper &#123; display: grid; grid-template-columns: repeat(3,200px); grid-gap: 5px; grid-template-rows:repeat(2,50px);&#125; 除了上述的repeact关键字，还有： auto-fill：示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格 grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素 fr：片段，为了方便表示比例关系 grid-template-columns: 200px 1fr 2fr 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3 minmax：产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。第一个参数就是最小值，第二个参数就是最大值 1&gt;minmax(100px, 1fr)`表示列宽不小于`100px`，不大于`1fr auto：由浏览器自己决定长度 grid-template-columns: 100px auto 100px 表示第一第三列为 100px，中间由浏览器决定长度 grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性grid-row-gap 属性、grid-column-gap 属性分别设置行间距和列间距。grid-gap 属性是两者的简写形式 grid-row-gap: 10px 表示行间距是 10px grid-column-gap: 20px 表示列间距是 20px grid-gap: 10px 20px 等同上述两个属性 grid-template-areas 属性用于定义区域，一个区域由一个或者多个单元格组成 12345678.container &#123; display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-template-areas: &#x27;a b c&#x27; &#x27;d e f&#x27; &#x27;g h i&#x27;;&#125; 上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。 多个单元格合并成一个区域的写法如下 123grid-template-areas: &#x27;a a a&#x27; &#x27;b b b&#x27; &#x27;c c c&#x27;; 上面代码将9个单元格分成a、b、c三个区域 如果某些区域不需要利用，则使用”点”（.）表示 grid-auto-flow 属性划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。 顺序就是由grid-auto-flow决定，默认为行，代表”先行后列”，即先填满第一行，再开始放入第二行 当修改成column后，放置变为如下： justify-items 属性， align-items 属性， place-items 属性justify-items 属性设置单元格内容的水平位置（左中右），align-items 属性设置单元格的垂直位置（上中下） 两者属性的值完成相同 1234.container &#123; justify-items: start | end | center | stretch; align-items: start | end | center | stretch;&#125; 属性对应如下： start：对齐单元格的起始边缘 end：对齐单元格的结束边缘 center：单元格内部居中 stretch：拉伸，占满单元格的整个宽度（默认值） place-items属性是align-items属性和justify-items属性的合并简写形式 justify-content 属性， align-content 属性， place-content 属性justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下） 1234.container &#123; justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; &#125; 两个属性的写法完全相同，都可以取下面这些值： start - 对齐容器的起始边框 end - 对齐容器的结束边框 center - 容器内部居中 space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍 space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔 space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔 stretch - 项目大小没有指定时，拉伸占据整个网格容器 grid-auto-columns 属性和 grid-auto-rows 属性有时候，一些项目的指定位置，在现有网格的外部，就会产生显示网格和隐式网格 比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。超出的部分就是隐式网格 而grid-auto-rows与grid-auto-columns就是专门用于指定隐式网格的宽高 关于项目属性，有如下： grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置 grid-column-start 属性：左边框所在的垂直网格线 grid-column-end 属性：右边框所在的垂直网格线 grid-row-start 属性：上边框所在的水平网格线 grid-row-end 属性：下边框所在的水平网格线 举个例子： 1234567891011121314151617&lt;style&gt; #container&#123; display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; &#125; .item-1 &#123; grid-column-start: 2; grid-column-end: 4; &#125;&lt;/style&gt;&lt;div id=&quot;container&quot;&gt; &lt;div class=&quot;item item-1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item item-2&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item item-3&quot;&gt;3&lt;/div&gt;&lt;/div&gt; 通过设置grid-column属性，指定1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线 grid-area 属性grid-area 属性指定项目放在哪一个区域 123.item-1 &#123; grid-area: e;&#125; 意思为将1号项目位于e区域 与上述讲到的grid-template-areas搭配使用 justify-self 属性、align-self 属性以及 place-self 属性justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。 align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目 1234.item &#123; justify-self: start | end | center | stretch; align-self: start | end | center | stretch;&#125; 这两个属性都可以取下面四个值。 start：对齐单元格的起始边缘。 end：对齐单元格的结束边缘。 center：单元格内部居中。 stretch：拉伸，占满单元格的整个宽度（默认值） 三、应用场景文章开头就讲到，Grid是一个强大的布局，如一些常见的 CSS 布局，如居中，两列布局，三列布局等等是很容易实现的，在以前的文章中，也有使用Grid布局完成对应的功能 关于兼容性问题，结果如下： 总体兼容性还不错，但在 IE 10 以下不支持 目前，Grid布局在手机端支持还不算太友好 参考文献 https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？","slug":"css.如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？","date":"2019-09-10T16:00:00.000Z","updated":"2022-08-05T07:09:18.740Z","comments":true,"path":"2019/09/11/css.如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/09/11/css.%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%EF%BC%8C%E5%8F%B3%E4%BE%A7%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%9F%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E4%B8%AD%E9%97%B4%E8%87%AA%E9%80%82%E5%BA%94%E5%91%A2%EF%BC%9F/","excerpt":"","text":"：如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？原创 灰灰 一、背景在日常布局中，无论是两栏布局还是三栏布局，使用的频率都非常高 PS: 文末有彩蛋 两栏布局两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满， 比如 Ant Design 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器 ❝ 这里称宽度较小的列父元素为次要布局容器，宽度较大的列父元素为主要布局容器 ❞ 这种布局适用于内容上具有明显主次关系的网页 三栏布局三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之 大家最常见的就是github： 二、双栏布局双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在 实现思路也非常的简单： 使用 float 左浮左边栏 右边模块使用 margin-left 撑出内容块做内容展示 为父级元素添加BFC，防止下方元素飞到上方内容 代码如下： 1234567891011121314151617181920&lt;style&gt; .box&#123; overflow: hidden; 添加BFC &#125; .left &#123; float: left; width: 200px; background-color: gray; height: 400px; &#125; .right &#123; margin-left: 210px; background-color: lightgray; height: 200px; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;&lt;/div&gt; 还有一种更为简单的使用则是采取：flex弹性布局 flex弹性布局123456789101112131415&lt;style&gt; .box&#123; display: flex; &#125; .left &#123; width: 100px; &#125; .right &#123; flex: 1; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;&lt;/div&gt; flex可以说是最好的方案了，代码少，使用简单 注意的是，flex容器的一个默认属性值:align-items: stretch; 这个属性导致了列等高的效果。为了让两个盒子高度自动，需要设置: align-items: flex-start 三、三栏布局实现三栏布局中间自适应的布局方式有： 两边使用 float，中间使用 margin 两边使用 absolute，中间使用 margin 两边使用 float 和负 margin display: table 实现 flex实现 grid网格布局 两边使用 float，中间使用 margin需要将中间的内容放在html结构最后，否则右侧会臣在中间内容的下方 实现代码如下： 12345678910111213141516171819202122232425262728293031&lt;style&gt; .wrap &#123; background: #eee; overflow: hidden; &lt;!-- 生成BFC，计算高度时考虑浮动的元素 --&gt; padding: 20px; height: 200px; &#125; .left &#123; width: 200px; height: 200px; float: left; background: coral; &#125; .right &#123; width: 120px; height: 200px; float: right; background: lightblue; &#125; .middle &#123; margin-left: 220px; height: 200px; background: lightpink; margin-right: 140px; &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt; &lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt;&lt;/div&gt; 原理如下： 两边固定宽度，中间宽度自适应。 利用中间元素的margin值控制两边的间距 宽度小于左右部分宽度之和时，右侧部分会被挤下去 这种实现方式存在缺陷： 主体内容是最后加载的。 右边在主体内容之前，如果是响应式设计，不能简单的换行展示 两边使用 absolute，中间使用 margin基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;style&gt; .container &#123; position: relative; &#125; .left, .right, .main &#123; height: 200px; line-height: 200px; text-align: center; &#125; .left &#123; position: absolute; top: 0; left: 0; width: 100px; background: green; &#125; .right &#123; position: absolute; top: 0; right: 0; width: 100px; background: green; &#125; .main &#123; margin: 0 110px; background: black; color: white; &#125;&lt;/style&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt;左边固定宽度&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右边固定宽度&lt;/div&gt; &lt;div class=&quot;main&quot;&gt;中间自适应&lt;/div&gt;&lt;/div&gt; 实现流程： 左右两边使用绝对定位，固定在两侧。 中间占满一行，但通过 margin和左右两边留出10px的间隔 两边使用 float 和负 margin1234567891011121314151617181920212223242526272829303132333435363738&lt;style&gt; .left, .right, .main &#123; height: 200px; line-height: 200px; text-align: center; &#125; .main-wrapper &#123; float: left; width: 100%; &#125; .main &#123; margin: 0 110px; background: black; color: white; &#125; .left, .right &#123; float: left; width: 100px; margin-left: -100%; background: green; &#125; .right &#123; margin-left: -100px; /* 同自身宽度 */ &#125;&lt;/style&gt;&lt;div class=&quot;main-wrapper&quot;&gt; &lt;div class=&quot;main&quot;&gt;中间自适应&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;left&quot;&gt;左边固定宽度&lt;/div&gt;&lt;div class=&quot;right&quot;&gt;右边固定宽度&lt;/div&gt; 实现过程： 中间使用了双层标签，外层是浮动的，以便左中右能在同一行展示 左边通过使用负 margin-left:-100%，相当于中间的宽度，所以向上偏移到左侧 右边通过使用负 margin-left:-100px，相当于自身宽度，所以向上偏移到最右侧 缺点： 增加了 .main-wrapper 一层，结构变复杂 使用负 margin，调试也相对麻烦 使用 display: table 实现&lt;table&gt; 标签用于展示行列数据，不适合用于布局。但是可以使用 display: table 来实现布局的效果 12345678910111213141516171819202122232425262728293031323334&lt;style&gt; .container &#123; height: 200px; line-height: 200px; text-align: center; display: table; table-layout: fixed; width: 100%; &#125; .left, .right, .main &#123; display: table-cell; &#125; .left, .right &#123; width: 100px; background: green; &#125; .main &#123; background: black; color: white; width: 100%; &#125;&lt;/style&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt;左边固定宽度&lt;/div&gt; &lt;div class=&quot;main&quot;&gt;中间自适应&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右边固定宽度&lt;/div&gt;&lt;/div&gt; 实现原理： 层通过 display: table设置为表格，设置 table-layout: fixed`表示列宽自身宽度决定，而不是自动计算。 内层的左中右通过 display: table-cell设置为表格单元。 左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度 使用flex实现利用flex弹性布局，可以简单实现中间自适应 代码如下： 123456789101112131415161718192021222324252627282930313233&lt;style type=&quot;text/css&quot;&gt; .wrap &#123; display: flex; justify-content: space-between; &#125; .left, .right, .middle &#123; height: 100px; &#125; .left &#123; width: 200px; background: coral; &#125; .right &#123; width: 120px; background: lightblue; &#125; .middle &#123; background: #555; width: 100%; margin: 0 20px; &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt; &lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt;&lt;/div&gt; 实现过程： 仅需将容器设置为display:flex;， 盒内元素两端对其，将中间元素设置为100%宽度，或者设为flex:1，即可填充空白 盒内元素的高度撑开容器的高度 优点： 结构简单直观 可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间 grid网格布局代码如下： 12345678910111213141516171819202122232425262728293031&lt;style&gt; .wrap &#123; display: grid; width: 100%; grid-template-columns: 300px auto 300px; &#125; .left, .right, .middle &#123; height: 100px; &#125; .left &#123; background: coral; &#125; .right &#123; width: 300px; background: lightblue; &#125; .middle &#123; background: #555; &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt; &lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt;&lt;/div&gt; 跟flex弹性布局一样的简单","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"如何实现单行／多行文本溢出的省略样式？","slug":"css.如何实现单行／多行文本溢出的省略样式？","date":"2019-09-10T16:00:00.000Z","updated":"2022-08-05T07:09:25.799Z","comments":true,"path":"2019/09/11/css.如何实现单行／多行文本溢出的省略样式？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/09/11/css.%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%EF%BC%8F%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E7%9A%84%E7%9C%81%E7%95%A5%E6%A0%B7%E5%BC%8F%EF%BC%9F/","excerpt":"","text":"如何实现单行／多行文本溢出的省略样式？ 一、前言在日常开发展示页面，如果一段文本的数量过长，受制于元素宽度的因素，有可能不能完全显示，为了提高用户的使用体验，这个时候就需要我们把溢出的文本显示成省略号 PS: 文末彩蛋 对于文本的溢出，我们可以分成两种形式： 单行文本溢出 多行文本溢出 二、实现方式单行文本溢出省略理解也很简单，即文本在一行内显示，超出部分以省略号的形式展现 实现方式也很简单，涉及的css属性有： text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本 white-space：设置文字在一行显示，不能换行 overflow：文字长度超出限定宽度，则隐藏超出的内容 overflow设为hidden，普通情况用在块级元素的外层隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略 white-space:nowrap，作用是设置文本不换行，是overflow:hidden和text-overflow：ellipsis生效的基础 text-overflow属性值有如下： clip：当对象内文本溢出部分裁切掉 ellipsis：当对象内文本溢出时显示省略标记（…） text-overflow只有在设置了overflow:hidden和white-space:nowrap才能够生效的 举个例子 123456789101112&lt;style&gt; p&#123; overflow: hidden; line-height: 40px; width:400px; height:40px; border:1px solid red; text-overflow: ellipsis; white-space: nowrap; &#125;&lt;/style&gt;&lt;p 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本&lt;/p&gt; 效果如下： 可以看到，设置单行文本溢出较为简单，并且省略号显示的位置较好 多行文本溢出省略多行文本溢出的时候，我们可以分为两种情况： 基于高度截断 基于行数截断 基于高度截断伪元素 + 定位核心的css代码结构如下： position: relative：为伪元素绝对定位 overflow: hidden：文本溢出限定的宽度就隐藏内容） position: absolute：给省略号绝对定位 line-height: 20px：结合元素高度,高度固定的情况下,设定行高, 控制显示行数 height: 40px：设定当前元素高度 ::after {} ：设置省略号样式 代码如下所示： 12345678910111213141516171819&lt;style&gt; .demo &#123; position: relative; line-height: 20px; height: 40px; overflow: hidden; &#125; .demo::after &#123; content: &quot;...&quot;; position: absolute; bottom: 0; right: 0; padding: 0 20px 0 10px; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&#x27;demo&#x27;&gt;这是一段很长的文本&lt;/div&gt;&lt;/body&gt; 实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 overflow: hidden 隐藏多余文字 这种实现具有以下优点： 兼容性好，对各大主流浏览器有好的支持 响应式截断，根据不同宽度做出调整 一般文本存在英文的时候，可以设置word-break: break-all使一个单词能够在换行时进行拆分 基于行数截断纯css实现也非常简单，核心的css代码如下： -webkit-line-clamp: 2：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性） display: -webkit-box：和1结合使用，将对象作为弹性伸缩盒子模型显示 -webkit-box-orient: vertical：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 overflow: hidden：文本溢出限定的宽度就隐藏内容 text-overflow: ellipsis：多行文本的情况下，用省略号“…”隐藏溢出范围的文本 123456789101112131415&lt;style&gt; p &#123; width: 400px; border-radius: 1px solid red; -webkit-line-clamp: 2; display: -webkit-box; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; &#125;&lt;/style&gt;&lt;p&gt; 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本&lt;/p&gt; 可以看到，上述使用了webkit的CSS属性扩展，所以兼容浏览器范围是PC端的webkit内核的浏览器，由于移动端大多数是使用webkit，所以移动端常用该形式 需要注意的是，如果文本为一段很长的英文或者数字，则需要添加word-wrap: break-word属性 还能通过使用javascript实现配合css，实现代码如下所示： css结构如下： 123456789101112131415161718p &#123; position: relative; width: 400px; line-height: 20px; overflow: hidden;&#125;.p-after:after&#123; content: &quot;...&quot;; position: absolute; bottom: 0; right: 0; padding-left: 40px; background: -webkit-linear-gradient(left, transparent, #fff 55%); background: -moz-linear-gradient(left, transparent, #fff 55%); background: -o-linear-gradient(left, transparent, #fff 55%); background: linear-gradient(to right, transparent, #fff 55%);&#125; javascript代码如下： 12345678910111213$(function()&#123; //获取文本的行高，并获取文本的高度，假设我们规定的行数是五行，那么对超过行数的部分进行限制高度，并加上省略号 $(&#x27;p&#x27;).each(function(i, obj)&#123; var lineHeight = parseInt($(this).css(&quot;line-height&quot;)); var height = parseInt($(this).height()); if((height / lineHeight) &gt;3 )&#123; $(this).addClass(&quot;p-after&quot;) $(this).css(&quot;height&quot;,&quot;60px&quot;); &#125;else&#123; $(this).removeClass(&quot;p-after&quot;); &#125; &#125;);&#125;)","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"如果要做优化，CSS提高性能的方法有哪些？","slug":"css.如果要做优化，CSS提高性能的方法有哪些？","date":"2019-09-10T16:00:00.000Z","updated":"2022-08-05T07:09:31.656Z","comments":true,"path":"2019/09/11/css.如果要做优化，CSS提高性能的方法有哪些？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/09/11/css.%E5%A6%82%E6%9E%9C%E8%A6%81%E5%81%9A%E4%BC%98%E5%8C%96%EF%BC%8CCSS%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","excerpt":"","text":"如果要做优化，CSS提高性能的方法有哪些？ 一、前言每一个网页都离不开css，但是很多人又认为，css主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的 作为页面渲染和内容展现的重要环节，css影响着用户对整个网站的第一体验 因此，在整个产品研发过程中，css性能优化同样需要贯穿全程 二、实现方式实现方式有很多种，主要有如下： 内联首屏关键CSS 异步加载CSS 资源压缩 合理使用选择器 减少使用昂贵的属性 不要使用@import 内联首屏关键CSS在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联css关键代码能够使浏览器在下载完html后就能立刻渲染 而如果外部引用css代码，在解析html结构过程中遇到外部css文件，才会开始下载css代码，再渲染 所以，CSS内联使用使渲染时间提前 注意：但是较大的css代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式 异步加载CSS在CSS文件请求、下载、解析完成之前，CSS会阻塞渲染，浏览器将不会渲染任何已处理的内容 前面加载内联代码后，后面的外部引用css则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下： 使用javascript将link标签插到head标签最后 123456// 创建link标签const myCSS = document.createElement( &quot;link&quot; );myCSS.rel = &quot;stylesheet&quot;;myCSS.href = &quot;mystyles.css&quot;;// 插入到header的最后位置document.head.insertBefore( myCSS, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling ); 设置link标签media属性为noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将media的值设为screen或all，从而让浏览器开始解析CSS 1&lt;link rel=&quot;stylesheet&quot; href=&quot;mystyles.css&quot; media=&quot;noexist&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt; 通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel设回stylesheet 1&lt;link rel=&quot;alternate stylesheet&quot; href=&quot;mystyles.css&quot; onload=&quot;this.rel=&#x27;stylesheet&#x27;&quot;&gt; 资源压缩利用webpack、gulp/grunt、rollup等模块化工具，将css代码进行压缩，使文件变小，大大降低了浏览器的加载时间 合理使用选择器css匹配的规则是从右往左开始匹配，例如#markdown .content h3匹配规则如下： 先找到h3标签元素 然后去除祖先不是.content的元素 最后去除祖先不是#markdown的元素 如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高 所以我们在编写选择器的时候，可以遵循以下规则： 不要嵌套使用过多复杂选择器，最好不要三层以上 使用id选择器就没必要再进行嵌套 通配符和属性选择器效率最低，避免使用 减少使用昂贵的属性在页面发生重绘的时候，昂贵属性如box-shadow/border-radius/filter/透明度/:nth-child等，会降低浏览器的渲染性能 不要使用@importcss样式文件有两种引入方式，一种是link元素，另一种是@import @import会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时 而且多个@import可能会导致下载顺序紊乱 比如一个css文件index.css包含了以下内容：@import url(&quot;reset.css&quot;) 那么浏览器就必须先把index.css下载、解析和执行后，才下载、解析和执行第二个文件reset.css 其他 减少重排操作，以及减少不必要的重绘 了解哪些属性可以继承而来，避免对这些属性重复编写 cssSprite，合成所有icon图片，用宽高加上backgroud-position的背景图方式显现出我们要的icon图，减少了http请求 把小的icon图片转成base64编码 CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性 三、总结css实现性能的方式可以从选择器嵌套、属性特性、减少http这三面考虑，同时还要注意css代码的加载顺序","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]},{"title":"让Chrome支持小于12px 的文字方式有哪些？区别？","slug":"css.让Chrome支持小于12px 的文字方式有哪些？区别？","date":"2019-09-10T16:00:00.000Z","updated":"2022-08-05T07:09:36.550Z","comments":true,"path":"2019/09/11/css.让Chrome支持小于12px 的文字方式有哪些？区别？/","link":"","permalink":"https://liuliushaoyang0723.gitee.io/abu/2019/09/11/css.%E8%AE%A9Chrome%E6%94%AF%E6%8C%81%E5%B0%8F%E4%BA%8E12px%20%E7%9A%84%E6%96%87%E5%AD%97%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"让Chrome支持小于12px 的文字方式有哪些？区别？ 一、背景Chrome 中文版浏览器会默认设定页面的最小字号是12px，英文版没有限制 PS: 文末彩蛋 原由 Chrome 团队认为汉字小于12px就会增加识别难度 中文版浏览器 与网页语言无关，取决于用户在Chrome的设置里（chrome://settings/languages）把哪种语言设置为默认显示语言 系统级最小字号 浏览器默认设定页面的最小字号，用户可以前往 chrome://settings/fonts 根据需求更改 而我们在实际项目中，不能奢求用户更改浏览器设置 对于文本需要以更小的字号来显示，就需要用到一些小技巧 二、解决方案常见的解决方案有： zoom -webkit-transform:scale() -webkit-text-size-adjust:none Zoomzoom 的字面意思是“变焦”，可以改变页面上元素的尺寸，属于真实尺寸 其支持的值类型有： zoom:50%，表示缩小到原来的一半 zoom:0.5，表示缩小到原来的一半 使用 zoom 来”支持“ 12px 以下的字体 代码如下： 123456789101112131415&lt;style type=&quot;text/css&quot;&gt; .span1&#123; font-size: 12px; display: inline-block; zoom: 0.8; &#125; .span2&#123; display: inline-block; font-size: 12px; &#125;&lt;/style&gt;&lt;body&gt; &lt;span class=&quot;span1&quot;&gt;测试10px&lt;/span&gt; &lt;span class=&quot;span2&quot;&gt;测试12px&lt;/span&gt;&lt;/body&gt; 效果如下： ❝ 需要注意的是，Zoom 并不是标准属性，需要考虑其兼容性 ❞ -webkit-transform:scale()针对chrome浏览器,加webkit前缀，用transform:scale()这个属性进行放缩 注意的是，使用scale属性只对可以定义宽高的元素生效，所以，下面代码中将span元素转为行内块元素 实现代码如下： 123456789101112131415&lt;style type=&quot;text/css&quot;&gt; .span1&#123; font-size: 12px; display: inline-block; -webkit-transform:scale(0.8); &#125; .span2&#123; display: inline-block; font-size: 12px; &#125;&lt;/style&gt;&lt;body&gt; &lt;span class=&quot;span1&quot;&gt;测试10px&lt;/span&gt; &lt;span class=&quot;span2&quot;&gt;测试12px&lt;/span&gt;&lt;/body&gt; 效果如下： -webkit-text-size-adjust:none该属性用来设定文字大小是否根据设备(浏览器)来自动调整显示大小 属性值： percentage：字体显示的大小； auto：默认，字体大小会根据设备/浏览器来自动调整； none:字体大小不会自动调整 1html &#123; -webkit-text-size-adjust: none; &#125; 这样设置之后会有一个问题，就是当你放大网页时，一般情况下字体也会随着变大，而设置了以上代码后，字体只会显示你当前设置的字体大小，不会随着网页放大而变大了 所以，我们不建议全局应用该属性，而是单独对某一属性使用 需要注意的是，自从chrome 27之后，就取消了对这个属性的支持。同时，该属性只对英文、数字生效，对中文不生效 三、总结Zoom 非标属性，有兼容问题，缩放会改变了元素占据的空间大小，触发重排 -webkit-transform:scale() 大部分现代浏览器支持，并且对英文、数字、中文也能够生效，缩放不会改变了元素占据的空间大小，页面布局不会发生变化 -webkit-text-size-adjust对谷歌浏览器有版本要求，在27之后，就取消了该属性的支持，并且只对英文、数字生效","categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"}],"tags":[]}],"categories":[{"name":"CSS","slug":"CSS","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/CSS/"},{"name":"Webpack","slug":"Webpack","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Webpack/"},{"name":"设计模式","slug":"设计模式","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"网络协议","slug":"网络协议","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"TypeScript","slug":"TypeScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/TypeScript/"},{"name":"React","slug":"React","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/React/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/HTML/"},{"name":"es6","slug":"es6","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/es6/"},{"name":"Vue","slug":"Vue","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Vue/"},{"name":"Node","slug":"Node","permalink":"https://liuliushaoyang0723.gitee.io/abu/categories/Node/"}],"tags":[]}